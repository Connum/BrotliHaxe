<?php

// Generated by Haxe 3.4.0
class decode_transform_Transform {
	public function __construct($prefix, $transform, $suffix) {
		if(!php_Boot::$skip_constructor) {
		$this->prefix = new _hx_array(array());
		{
			$_g1 = 0;
			$_g = strlen($prefix);
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$this->prefix[$i] = _hx_char_code_at($prefix, $i);
				unset($i);
			}
		}
		$this->transform = $transform;
		$this->suffix = new _hx_array(array());
		{
			$_g11 = 0;
			$_g2 = strlen($suffix);
			while($_g11 < $_g2) {
				$_g11 = $_g11 + 1;
				$i1 = $_g11 - 1;
				$this->suffix[$i1] = _hx_char_code_at($suffix, $i1);
				unset($i1);
			}
		}
	}}
	public $prefix;
	public $transform;
	public $suffix;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'decode.transform.Transform'; }
}
