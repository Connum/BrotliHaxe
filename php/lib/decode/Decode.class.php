<?php

// Generated by Haxe 3.4.0
class decode_Decode {
	public function __construct(){}
	static function BROTLI_FAILURE() {
		return 0;
	}
	static function BROTLI_LOG_UINT($x) {}
	static function BROTLI_LOG_ARRAY_INDEX($array_name, $idx) {}
	static function BROTLI_LOG($x) {
		haxe_Log::trace($x, _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
	}
	static function BROTLI_LOG_UCHAR_VECTOR($v, $len) {}
	static $kDefaultCodeLength = 8;
	static $kCodeLengthRepeatCode = 16;
	static $kNumLiteralCodes = 256;
	static $kNumInsertAndCopyCodes = 704;
	static $kNumBlockLengthCodes = 26;
	static $kLiteralContextBits = 6;
	static $kDistanceContextBits = 2;
	static $HUFFMAN_TABLE_BITS = 8;
	static $HUFFMAN_TABLE_MASK = 255;
	static $CODE_LENGTH_CODES = 18;
	static $kCodeLengthCodeOrder;
	static $NUM_DISTANCE_SHORT_CODES = 16;
	static $kDistanceShortCodeIndexOffset;
	static $kDistanceShortCodeValueOffset;
	static function DecodeWindowBits($br) {
		$n = null;
		if(decode_BitReader::BrotliReadBits($br, 1) === 0) {
			return 16;
		}
		$n = decode_BitReader::BrotliReadBits($br, 3);
		if($n > 0) {
			return 17 + $n;
		}
		$n = decode_BitReader::BrotliReadBits($br, 3);
		if($n > 0) {
			return 8 + $n;
		}
		return 17;
	}
	static function DecodeVarLenUint8($br) {
		if(decode_BitReader::BrotliReadBits($br, 1) === 1) {
			$nbits = decode_BitReader::BrotliReadBits($br, 3);
			if($nbits === 0) {
				return 1;
			} else {
				return decode_BitReader::BrotliReadBits($br, $nbits) + (1 << $nbits);
			}
		}
		return 0;
	}
	static function JumpToByteBoundary($br) {
		return decode_BitReader::BrotliReadBits($br, ($br->bit_pos_ + 7 & -8) - $br->bit_pos_) === 0;
	}
	static function DecodeMetaBlockLength($br, $meta_block_length, $input_end, $is_metadata, $is_uncompressed) {
		$size_nibbles = null;
		$size_bytes = null;
		$input_end[0] = decode_BitReader::BrotliReadBits($br, 1);
		$meta_block_length[0] = 0;
		$is_uncompressed[0] = 0;
		$is_metadata[0] = 0;
		$tmp = null;
		if($input_end[0] === 1) {
			$tmp = decode_BitReader::BrotliReadBits($br, 1) === 1;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return true;
		}
		$size_nibbles = decode_BitReader::BrotliReadBits($br, 2) + 4;
		if($size_nibbles === 7) {
			$is_metadata[0] = 1;
			if(decode_BitReader::BrotliReadBits($br, 1) !== 0) {
				return false;
			}
			$size_bytes = decode_BitReader::BrotliReadBits($br, 2);
			if($size_bytes === 0) {
				return true;
			}
			{
				$_g1 = 0;
				while($_g1 < $size_bytes) {
					$_g1 = $_g1 + 1;
					$i = $_g1 - 1;
					$next_byte = decode_BitReader::BrotliReadBits($br, 8);
					$tmp1 = null;
					$tmp2 = null;
					if($i + 1 === $size_bytes) {
						$tmp2 = $size_bytes > 1;
					} else {
						$tmp2 = false;
					}
					if($tmp2) {
						$tmp1 = $next_byte === 0;
					} else {
						$tmp1 = false;
					}
					if($tmp1) {
						return false;
					}
					$meta_block_length[0] = $meta_block_length->a[0] | $next_byte << $i * 8;
					unset($tmp2,$tmp1,$next_byte,$i);
				}
			}
		} else {
			$_g11 = 0;
			while($_g11 < $size_nibbles) {
				$_g11 = $_g11 + 1;
				$i1 = $_g11 - 1;
				$next_nibble = decode_BitReader::BrotliReadBits($br, 4);
				$tmp3 = null;
				$tmp4 = null;
				if($i1 + 1 === $size_nibbles) {
					$tmp4 = $size_nibbles > 4;
				} else {
					$tmp4 = false;
				}
				if($tmp4) {
					$tmp3 = $next_nibble === 0;
				} else {
					$tmp3 = false;
				}
				if($tmp3) {
					return false;
				}
				$meta_block_length[0] = $meta_block_length->a[0] | $next_nibble << $i1 * 4;
				unset($tmp4,$tmp3,$next_nibble,$i1);
			}
		}
		_hx_array_increment($meta_block_length,0);
		$tmp5 = null;
		if($input_end[0] !== 1) {
			$tmp5 = $is_metadata[0] !== 1;
		} else {
			$tmp5 = false;
		}
		if($tmp5) {
			$is_uncompressed[0] = decode_BitReader::BrotliReadBits($br, 1);
		}
		return true;
	}
	static function ReadSymbol($table, $table_off, $br) {
		$nbits = null;
		decode_BitReader::BrotliFillBitWindow($br);
		$table_off = $table_off + (_hx_shift_right($br->val_, $br->bit_pos_) & 255);
		$a = $table[$table_off]->bits;
		$aNeg = $a < 0;
		$x = null;
		if($aNeg !== false) {
			$x = $aNeg;
		} else {
			$x = $a > 8;
		}
		if($x) {
			$br->bit_pos_ = $br->bit_pos_ + 8;
			$nbits = $table[$table_off]->bits - 8;
			$table_off = $table_off + $table[$table_off]->value;
			$table_off = $table_off + (_hx_shift_right($br->val_, $br->bit_pos_) & (1 << $nbits) - 1);
		}
		$br->bit_pos_ = $br->bit_pos_ + $table[$table_off]->bits;
		return $table[$table_off]->value;
	}
	static function ReadHuffmanCodeLengths($code_length_code_lengths, $num_symbols, $code_lengths, $s) {
		$br = $s->br;
		if($s->sub_state[1] === 60) {
			$s->symbol = 0;
			$s->prev_code_len = 8;
			$s->repeat = 0;
			$s->repeat_code_len = 0;
			$s->space = 32768;
			if(decode_Huffman::BrotliBuildHuffmanTable($s->table, 0, 5, $code_length_code_lengths, 18) <= 1) {
				haxe_Log::trace("[ReadHuffmanCodeLengths] Building code length tree failed: ", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
				return 0;
			}
			$s->sub_state[1] = 61;
		}
		if($s->sub_state[1] === 61) {
			while(true) {
				$tmp = null;
				if($s->symbol < $num_symbols) {
					$tmp = $s->space > 0;
				} else {
					$tmp = false;
				}
				if(!$tmp) {
					break;
				}
				$p = $s->table;
				$p_off = 0;
				$code_len = null;
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					return 2;
				}
				decode_BitReader::BrotliFillBitWindow($br);
				$p_off = 0 + (_hx_shift_right($br->val_, $br->bit_pos_) & 31);
				$br->bit_pos_ = $br->bit_pos_ + $p[$p_off]->bits;
				$code_len = $p[$p_off]->value;
				$code_lengths[$s->symbol] = $code_len;
				$tmp1 = null;
				if(false !== $code_len < 0) {
					$tmp1 = false;
				} else {
					$tmp1 = 16 > $code_len;
				}
				if($tmp1) {
					$s->repeat = 0;
					if($code_len !== 0) {
						$s->prev_code_len = $code_len;
						$s->space = $s->space - (32768 >> $code_len);
					}
					$s->symbol++;
				} else {
					$extra_bits = $code_len - 14;
					$old_repeat = null;
					$repeat_delta = null;
					$new_len = 0;
					if($code_len === 16) {
						$new_len = $s->prev_code_len;
					}
					if($s->repeat_code_len !== $new_len) {
						$s->repeat = 0;
						$s->repeat_code_len = $new_len;
					}
					$old_repeat = $s->repeat;
					if($s->repeat > 0) {
						$s->repeat = $s->repeat - 2;
						$s->repeat = $s->repeat << $extra_bits;
					}
					$a = $s->repeat;
					$s->repeat = $a + (decode_BitReader::BrotliReadBits($br, $extra_bits) + 3);
					$repeat_delta = $s->repeat - $old_repeat;
					if($s->symbol + $repeat_delta > $num_symbols) {
						return 0;
					}
					DefaultFunctions::memset_UInt($code_lengths, $s->symbol, $s->repeat_code_len, $repeat_delta);
					$s->symbol = $s->symbol + $repeat_delta;
					if($s->repeat_code_len !== 0) {
						$s->space = $s->space - ($repeat_delta << 15 - $s->repeat_code_len);
					}
					unset($repeat_delta,$old_repeat,$new_len,$extra_bits,$a);
				}
				unset($tmp1,$tmp,$p_off,$p,$code_len);
			}
			if($s->space !== 0) {
				haxe_Log::trace("[ReadHuffmanCodeLengths] s.space = " . _hx_string_rec($s->space, "") . "\x0A", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
				return 0;
			}
			DefaultFunctions::memset_UInt($code_lengths, $s->symbol, 0, $num_symbols - $s->symbol);
			$s->sub_state[1] = 50;
			return 1;
		}
		return 0;
	}
	static function ReadHuffmanCode($alphabet_size, $table, $table_off, $opt_table_size, $s) {
		$br = $s->br;
		$result = 1;
		$table_size = 0;
		while(true) {
			if($s->sub_state[1] === 50) {
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					return 2;
				}
				$this1 = (new _hx_array(array()));
				$this1->length = $alphabet_size;
				$s->code_lengths = $this1;
				if($s->code_lengths === null) {
					return 0;
				}
				$s->simple_code_or_skip = decode_BitReader::BrotliReadBits($br, 2);
				if($s->simple_code_or_skip === 1) {
					$max_bits_counter = $alphabet_size - 1;
					$max_bits = 0;
					$symbols = (new _hx_array(array(0, 0, 0, 0)));
					$num_symbols = decode_BitReader::BrotliReadBits($br, 2) + 1;
					while($max_bits_counter > 0) {
						$max_bits_counter = $max_bits_counter >> 1;
						$max_bits = $max_bits + 1;
					}
					DefaultFunctions::memset_UInt($s->code_lengths, 0, 0, $alphabet_size);
					{
						$_g1 = 0;
						$_g = $num_symbols;
						while($_g1 < $_g) {
							$_g1 = $_g1 + 1;
							$i = $_g1 - 1;
							$symbols[$i] = decode_BitReader::BrotliReadBits($br, $max_bits);
							if($symbols->a[$i] >= $alphabet_size) {
								return 0;
							}
							$s->code_lengths[$symbols[$i]] = 2;
							unset($i);
						}
						unset($_g1,$_g);
					}
					$s->code_lengths[$symbols[0]] = 1;
					switch($num_symbols) {
					case 1:{}break;
					case 2:{
						if($symbols[0] === $symbols[1]) {
							return 0;
						}
						$s->code_lengths[$symbols[1]] = 1;
					}break;
					case 3:{
						$tmp = null;
						$tmp1 = null;
						if($symbols[0] !== $symbols[1]) {
							$tmp1 = $symbols[0] === $symbols[2];
						} else {
							$tmp1 = true;
						}
						if(!$tmp1) {
							$tmp = $symbols[1] === $symbols[2];
						} else {
							$tmp = true;
						}
						if($tmp) {
							return 0;
						}
					}break;
					case 4:{
						$tmp2 = null;
						$tmp3 = null;
						$tmp4 = null;
						$tmp5 = null;
						$tmp6 = null;
						if($symbols[0] !== $symbols[1]) {
							$tmp6 = $symbols[0] === $symbols[2];
						} else {
							$tmp6 = true;
						}
						if(!$tmp6) {
							$tmp5 = $symbols[0] === $symbols[3];
						} else {
							$tmp5 = true;
						}
						if(!$tmp5) {
							$tmp4 = $symbols[1] === $symbols[2];
						} else {
							$tmp4 = true;
						}
						if(!$tmp4) {
							$tmp3 = $symbols[1] === $symbols[3];
						} else {
							$tmp3 = true;
						}
						if(!$tmp3) {
							$tmp2 = $symbols[2] === $symbols[3];
						} else {
							$tmp2 = true;
						}
						if($tmp2) {
							return 0;
						}
						if(decode_BitReader::BrotliReadBits($br, 1) === 1) {
							$s->code_lengths[$symbols[2]] = 3;
							$s->code_lengths[$symbols[3]] = 3;
						} else {
							$s->code_lengths[$symbols[0]] = 2;
						}
					}break;
					}
					$s->sub_state[1] = 62;
					continue;
					unset($symbols,$num_symbols,$max_bits_counter,$max_bits);
				} else {
					$space = 32;
					$num_codes = 0;
					$huff = (new _hx_array(array(new decode_huffman_HuffmanCode(2, 0), new decode_huffman_HuffmanCode(2, 4), new decode_huffman_HuffmanCode(2, 3), new decode_huffman_HuffmanCode(3, 2), new decode_huffman_HuffmanCode(2, 0), new decode_huffman_HuffmanCode(2, 4), new decode_huffman_HuffmanCode(2, 3), new decode_huffman_HuffmanCode(4, 1), new decode_huffman_HuffmanCode(2, 0), new decode_huffman_HuffmanCode(2, 4), new decode_huffman_HuffmanCode(2, 3), new decode_huffman_HuffmanCode(3, 2), new decode_huffman_HuffmanCode(2, 0), new decode_huffman_HuffmanCode(2, 4), new decode_huffman_HuffmanCode(2, 3), new decode_huffman_HuffmanCode(4, 5))));
					{
						$_g2 = 0;
						while($_g2 < 18) {
							$_g2 = $_g2 + 1;
							$s->code_length_code_lengths[$_g2 - 1] = 0;
						}
						unset($_g2);
					}
					{
						$_g3 = $s->simple_code_or_skip;
						while($_g3 < 18) {
							$_g3 = $_g3 + 1;
							if($space <= 0) {
								break;
							}
							$code_len_idx = decode_Decode::$kCodeLengthCodeOrder[$_g3 - 1];
							$p_off = 0;
							$v = null;
							decode_BitReader::BrotliFillBitWindow($br);
							$p_off = 0 + (_hx_shift_right($br->val_, $br->bit_pos_) & 15);
							$br->bit_pos_ = $br->bit_pos_ + _hx_array_get($huff, $p_off)->bits;
							$v = _hx_array_get($huff, $p_off)->value;
							$s->code_length_code_lengths[$code_len_idx] = $v;
							if($v !== 0) {
								$space = $space - (32 >> $v);
								$num_codes = $num_codes + 1;
							}
							unset($v,$p_off,$code_len_idx);
						}
						unset($_g3);
					}
					$tmp7 = null;
					if($num_codes !== 1) {
						$tmp7 = $space === 0;
					} else {
						$tmp7 = true;
					}
					if(!$tmp7) {
						return 0;
					}
					$s->sub_state[1] = 60;
					unset($tmp7,$space,$num_codes,$huff);
				}
				unset($this1);
			}
			$tmp8 = null;
			if($s->sub_state[1] !== 60) {
				$tmp8 = $s->sub_state[1] === 61;
			} else {
				$tmp8 = true;
			}
			if($tmp8) {
				$result = decode_Decode::ReadHuffmanCodeLengths($s->code_length_code_lengths, $alphabet_size, $s->code_lengths, $s);
				if($result !== 1) {
					return $result;
				}
				$s->sub_state[1] = 62;
			}
			if($s->sub_state[1] === 62) {
				$table_size = decode_Huffman::BrotliBuildHuffmanTable($table, $table_off, 8, $s->code_lengths, $alphabet_size);
				if($table_size === 0) {
					haxe_Log::trace("[ReadHuffmanCode] BuildHuffmanTable failed: ", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
					return 0;
				}
				$s->code_lengths = null;
				if($opt_table_size !== null) {
					$opt_table_size[0] = $table_size;
				}
				$s->sub_state[1] = 50;
				return $result;
			}
			unset($tmp8);
		}
	}
	static function ReadBlockLength($table, $table_off, $br) {
		$code = null;
		$nbits = null;
		$code = decode_Decode::ReadSymbol($table, $table_off, $br);
		$nbits = _hx_array_get(decode_Prefix::$kBlockLengthPrefixCode, $code)->nbits;
		$a = _hx_array_get(decode_Prefix::$kBlockLengthPrefixCode, $code)->offset;
		return $a + decode_BitReader::BrotliReadBits($br, $nbits);
	}
	static function TranslateShortCodes($code, $ringbuffer, $index) {
		$val = null;
		if($code < 16) {
			$index = $index + decode_Decode::$kDistanceShortCodeIndexOffset[$code];
			$index = $index & 3;
			$val = $ringbuffer[$index] + decode_Decode::$kDistanceShortCodeValueOffset[$code];
		} else {
			$val = $code - 16 + 1;
		}
		return $val;
	}
	static function InverseMoveToFrontTransform($v, $v_len) {
		$this1 = (new _hx_array(array()));
		$this1->length = 256;
		$mtf = $this1;
		{
			$_g = 0;
			while($_g < 256) {
				$_g = $_g + 1;
				$i = $_g - 1;
				$mtf[$i] = $i;
				unset($i);
			}
		}
		{
			$_g1 = 0;
			while($_g1 < $v_len) {
				$_g1 = $_g1 + 1;
				$i1 = $_g1 - 1;
				$index = $v[$i1];
				$value = $mtf[$index];
				$v[$i1] = $value;
				while(true) {
					$aNeg = $index < 0;
					$tmp = null;
					if($aNeg !== false) {
						$tmp = $aNeg;
					} else {
						$tmp = $index > 0;
					}
					if(!$tmp) {
						break;
					}
					$mtf[$index] = $mtf[$index - 1];
					$index = $index - 1;
					unset($tmp,$aNeg);
				}
				$mtf[0] = $value;
				unset($value,$index,$i1);
			}
		}
	}
	static function HuffmanTreeGroupDecode($group, $s) {
		if($s->sub_state[0] === 50) {
			$s->next = $group->codes;
			$s->htree_index = 0;
			$s->sub_state[0] = 70;
		}
		if($s->sub_state[0] === 70) {
			$next_off = 0;
			while($s->htree_index < $group->num_htrees) {
				$table_size = (new _hx_array(array()));
				$result = decode_Decode::ReadHuffmanCode($group->alphabet_size, $s->next, $next_off, $table_size, $s);
				if($result !== 1) {
					return $result;
				}
				$group->htrees[$s->htree_index] = $s->next;
				$group->htrees_off[$s->htree_index] = $next_off;
				$next_off = $next_off + $table_size[0];
				if($table_size[0] === 0) {
					return 0;
				}
				++$s->htree_index;
				unset($table_size,$result);
			}
			$s->sub_state[0] = 50;
			return 1;
		}
		return 0;
	}
	static function DecodeContextMap($context_map_size, $num_htrees, $context_map, $s) {
		$br = $s->br;
		$result = 1;
		$use_rle_for_zeros = null;
		if($s->sub_state[0] === 50) {
			if(!decode_BitReader::BrotliReadMoreInput($br)) {
				return 2;
			}
			$num_htrees[0] = decode_Decode::DecodeVarLenUint8($br) + 1;
			$s->context_index = 0;
			$context_map[0] = FunctionMalloc::mallocUInt($context_map_size);
			if($context_map[0]->length === 0) {
				return 0;
			}
			if($num_htrees->a[0] <= 1) {
				DefaultFunctions::memset_UInt($context_map[0], 0, 0, $context_map_size);
				return 1;
			}
			$use_rle_for_zeros = decode_BitReader::BrotliReadBits($br, 1);
			if($use_rle_for_zeros === 1) {
				$s->max_run_length_prefix = decode_BitReader::BrotliReadBits($br, 4) + 1;
			} else {
				$s->max_run_length_prefix = 0;
			}
			$s->context_map_table = FunctionMalloc::malloc2_decode_huffman_HuffmanCode(_hx_qtype("decode.huffman.HuffmanCode"), 1080);
			if($s->context_map_table === null) {
				return 0;
			}
			$s->sub_state[0] = 80;
		}
		if($s->sub_state[0] === 80) {
			$result = decode_Decode::ReadHuffmanCode($num_htrees->a[0] + $s->max_run_length_prefix, $s->context_map_table, 0, null, $s);
			if($result !== 1) {
				return $result;
			}
			$s->sub_state[0] = 81;
		}
		if($s->sub_state[0] === 81) {
			while($s->context_index < $context_map_size) {
				$code = null;
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					return 2;
				}
				$code = decode_Decode::ReadSymbol($s->context_map_table, 0, $br);
				if($code === 0) {
					$context_map[0][$s->context_index] = 0;
					++$s->context_index;
				} else {
					if($code <= $s->max_run_length_prefix) {
						$reps = 1 + (1 << $code) + decode_BitReader::BrotliReadBits($br, $code);
						while(true) {
							$reps = $reps - 1;
							if(!($reps > 0)) {
								break;
							}
							if($s->context_index >= $context_map_size) {
								return 0;
							}
							$context_map[0][$s->context_index] = 0;
							++$s->context_index;
						}
						unset($reps);
					} else {
						$context_map[0][$s->context_index] = $code - $s->max_run_length_prefix;
						++$s->context_index;
					}
				}
				unset($code);
			}
			if(decode_BitReader::BrotliReadBits($br, 1) === 1) {
				decode_Decode::InverseMoveToFrontTransform($context_map[0], $context_map_size);
			}
			$s->context_map_table = null;
			$s->sub_state[0] = 50;
			return 1;
		}
		return 0;
	}
	static function DecodeBlockType($max_block_type, $trees, $tree_type, $block_types, $ringbuffers, $indexes, $br) {
		$ringbuffer_off = $tree_type * 2;
		$type_code = decode_Decode::ReadSymbol($trees, $tree_type * 1080, $br);
		$block_type = null;
		if($type_code === 0) {
			$block_type = $ringbuffers[$ringbuffer_off + ($indexes[$tree_type] & 1)];
		} else {
			if($type_code === 1) {
				$block_type = $ringbuffers[$ringbuffer_off + ($indexes[$tree_type] - 1 & 1)] + 1;
			} else {
				$block_type = $type_code - 2;
			}
		}
		if($block_type >= $max_block_type) {
			$block_type = $block_type - $max_block_type;
		}
		$block_types[$tree_type] = $block_type;
		$ringbuffers[$ringbuffer_off + ($indexes[$tree_type] & 1)] = $block_type;
		$indexes[$tree_type] = $indexes[$tree_type] + 1;
	}
	static function DecodeBlockTypeWithContext($s, $br) {
		decode_Decode::DecodeBlockType($s->num_block_types[0], $s->block_type_trees, 0, $s->block_type, $s->block_type_rb, $s->block_type_rb_index, $br);
		$s->block_length[0] = decode_Decode::ReadBlockLength($s->block_len_trees, 0, $br);
		$s->context_offset = $s->block_type[0] << 6;
		$s->context_map_slice = $s->context_map;
		$s->context_map_slice_off = $s->context_map_off + $s->context_offset;
		$s->literal_htree_index = $s->context_map_slice[$s->context_map_slice_off];
		$s->context_mode = $s->context_modes[$s->block_type[0]];
		$s->context_lookup_offset1 = decode_Context::$kContextLookupOffsets[$s->context_mode];
		$s->context_lookup_offset2 = decode_Context::$kContextLookupOffsets[$s->context_mode + 1];
	}
	static function CopyUncompressedBlockToOutput($output, $pos, $s) {
		$rb_size = $s->ringbuffer_mask + 1;
		$ringbuffer_end = $s->ringbuffer;
		$ringbuffer_end_off = $s->ringbuffer_off + $rb_size;
		$rb_pos = $pos & $s->ringbuffer_mask;
		$br_pos = $s->br->pos_ & 8191;
		$remaining_bits = null;
		$num_read = null;
		$num_written = null;
		while(true) {
			if($s->sub_state[0] === 50) {
				$tmp = null;
				if($s->meta_block_remaining_len >= 8) {
					$a = $s->br->bit_pos_ + ($s->meta_block_remaining_len << 3);
					$b = $s->br->bit_end_pos_;
					$aNeg = $b < 0;
					if($aNeg !== $a < 0) {
						$tmp = $aNeg;
					} else {
						$tmp = $b > $a;
					}
					unset($b,$aNeg,$a);
				} else {
					$tmp = true;
				}
				if($tmp) {
					$s->sub_state[0] = 51;
					continue;
				}
				$a1 = $s->br->bit_end_pos_;
				$tmp1 = null;
				if(false !== $a1 < 0) {
					$tmp1 = false;
				} else {
					$tmp1 = 64 > $a1;
				}
				if($tmp1) {
					return 0;
				}
				$remaining_bits = 32;
				while(true) {
					$a2 = $s->br->bit_pos_;
					$tmp2 = null;
					if(false !== $a2 < 0) {
						$tmp2 = false;
					} else {
						$tmp2 = $remaining_bits > $a2;
					}
					if(!$tmp2) {
						break;
					}
					$s->ringbuffer[$s->ringbuffer_off + $rb_pos] = _hx_shift_right($s->br->val_, $s->br->bit_pos_) & 255;
					$s->br->bit_pos_ = $s->br->bit_pos_ + 8;
					$rb_pos = $rb_pos + 1;
					--$s->meta_block_remaining_len;
					unset($tmp2,$a2);
				}
				$s->nbytes = _hx_shift_right($s->br->bit_end_pos_ - $s->br->bit_pos_, 3);
				if($br_pos + $s->nbytes > 8191) {
					$tail = 8192 - $br_pos;
					DefaultFunctions::memcpy_UInt($s->ringbuffer, $s->ringbuffer_off + $rb_pos, $s->br->buf_, $s->br->buf_off + $br_pos, $tail);
					$s->nbytes = $s->nbytes - $tail;
					$rb_pos = $rb_pos + $tail;
					$s->meta_block_remaining_len = $s->meta_block_remaining_len - $tail;
					$br_pos = 0;
					unset($tail);
				}
				DefaultFunctions::memcpy_UInt($s->ringbuffer, $s->ringbuffer_off + $rb_pos, $s->br->buf_, $s->br->buf_off + $br_pos, $s->nbytes);
				$rb_pos = $rb_pos + $s->nbytes;
				$s->meta_block_remaining_len = $s->meta_block_remaining_len - $s->nbytes;
				$s->partially_written = 0;
				$s->sub_state[0] = 55;
				unset($tmp1,$tmp,$a1);
			}
			if($s->sub_state[0] === 55) {
				if($rb_pos >= $rb_size) {
					$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off + $s->partially_written, $rb_size - $s->partially_written);
					if($num_written < 0) {
						return 0;
					}
					$s->partially_written = $s->partially_written + $num_written;
					if($s->partially_written < $rb_size) {
						return 3;
					}
					$rb_pos = $rb_pos - $rb_size;
					$s->meta_block_remaining_len = $s->meta_block_remaining_len + $rb_size;
					DefaultFunctions::memcpy_UInt($s->ringbuffer, $s->ringbuffer_off, $ringbuffer_end, $ringbuffer_end_off, $rb_pos);
				}
				$s->sub_state[0] = 52;
				continue;
			}
			if($s->sub_state[0] === 51) {
				while($s->meta_block_remaining_len > 0) {
					if(!decode_BitReader::BrotliReadMoreInput($s->br)) {
						return 2;
					}
					{
						$rb_pos = $rb_pos + 1;
						$s->ringbuffer[$rb_pos - 1] = decode_BitReader::BrotliReadBits($s->br, 8);
					}
					if($rb_pos === $rb_size) {
						$s->partially_written = 0;
						$s->sub_state[0] = 56;
						break;
					}
					$s->meta_block_remaining_len--;
				}
				if($s->sub_state[0] === 51) {
					$s->sub_state[0] = 50;
					return 1;
				}
				$s->sub_state[0] = 56;
			}
			if($s->sub_state[0] === 56) {
				$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off + $s->partially_written, $rb_size - $s->partially_written);
				if($num_written < 0) {
					return 0;
				}
				$s->partially_written = $s->partially_written + $num_written;
				if($s->partially_written < $rb_size) {
					return 3;
				}
				$rb_pos = 0;
				$s->meta_block_remaining_len--;
				$s->sub_state[0] = 51;
				continue;
			}
			if($s->sub_state[0] === 52) {
				if($rb_pos + $s->meta_block_remaining_len >= $rb_size) {
					$s->nbytes = $rb_size - $rb_pos;
					$tmp3 = decode_Streams::BrotliRead($s->br->input_, $s->ringbuffer, $s->ringbuffer_off + $rb_pos, $s->nbytes);
					if($tmp3 < $s->nbytes) {
						return 2;
					}
					$s->partially_written = 0;
					$s->sub_state[0] = 57;
					unset($tmp3);
				} else {
					$s->sub_state[0] = 53;
					continue;
				}
			}
			if($s->sub_state[0] === 57) {
				$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off + $s->partially_written, $rb_size - $s->partially_written);
				if($num_written < 0) {
					return 0;
				}
				$s->partially_written = $s->partially_written + $num_written;
				if($s->partially_written < $rb_size) {
					return 3;
				}
				$s->meta_block_remaining_len = $s->meta_block_remaining_len - $s->nbytes;
				$rb_pos = 0;
				$s->sub_state[0] = 52;
				continue;
			}
			if($s->sub_state[0] === 53) {
				$num_read = decode_Streams::BrotliRead($s->br->input_, $s->ringbuffer, $s->ringbuffer_off + $rb_pos, $s->meta_block_remaining_len);
				$s->meta_block_remaining_len = $s->meta_block_remaining_len - $num_read;
				if($s->meta_block_remaining_len > 0) {
					return 2;
				}
				decode_BitReader::BrotliInitBitReader($s->br, $s->br->input_, $s->br->finish_);
				$s->sub_state[0] = 54;
			}
			if($s->sub_state[0] === 54) {
				if(!decode_BitReader::BrotliWarmupBitReader($s->br)) {
					return 2;
				}
				$s->sub_state[0] = 50;
				return 1;
			}
		}
	}
	static function BrotliDecompressedSize($encoded_size, $encoded_buffer, $encoded_buffer_off, $decoded_size) {
		$val = 0;
		$bit_pos = 0;
		$is_last = null;
		$is_uncompressed = 0;
		$size_nibbles = null;
		$meta_block_len = 0;
		if($encoded_size === 0) {
			return 0;
		}
		{
			$_g = 0;
			while($_g < 4) {
				$_g = $_g + 1;
				$i = $_g - 1;
				if($i >= $encoded_size) {
					break;
				}
				$val = $val | $encoded_buffer[$i] << 8 * $i;
				unset($i);
			}
		}
		$bit_pos = 1;
		if(($val & 1) === 1) {
			$bit_pos = 4;
			if((_hx_shift_right($val, 1) & 7) === 0) {
				$bit_pos = 7;
			}
		}
		$is_last = _hx_shift_right($val, $bit_pos) & 1;
		$bit_pos = $bit_pos + 1;
		if($is_last === 1) {
			if((_hx_shift_right($val, $bit_pos) & 1) === 1) {
				$decoded_size[0] = 0;
				return 1;
			}
			$bit_pos = $bit_pos + 1;
		}
		$size_nibbles = (_hx_shift_right($val, $bit_pos) & 3) + 4;
		if($size_nibbles === 7) {
			return 0;
		}
		$bit_pos = $bit_pos + 2;
		{
			$_g1 = 0;
			while($_g1 < $size_nibbles) {
				$_g1 = $_g1 + 1;
				$meta_block_len = $meta_block_len | (_hx_shift_right($val, $bit_pos) & 15) << 4 * ($_g1 - 1);
				$bit_pos = $bit_pos + 4;
			}
		}
		$meta_block_len = $meta_block_len + 1;
		if($is_last === 1) {
			$decoded_size[0] = $meta_block_len;
			return 1;
		}
		$is_uncompressed = _hx_shift_right($val, $bit_pos) & 1;
		$bit_pos = $bit_pos + 1;
		if($is_uncompressed === 1) {
			$offset = ($bit_pos + 7 >> 3) + $meta_block_len;
			$tmp = null;
			if($offset < $encoded_size) {
				$tmp = ($encoded_buffer[$offset] & 3) === 3;
			} else {
				$tmp = false;
			}
			if($tmp) {
				$decoded_size[0] = $meta_block_len;
				return 1;
			}
		}
		return 0;
	}
	static function BrotliDecompressStreaming($input, $output, $finish, $s) {
		$context = null;
		$pos = $s->pos;
		$i = $s->loop_counter;
		$result = 1;
		$br = $s->br;
		$initial_remaining_len = null;
		$bytes_copied = null;
		$num_written = null;
		$s->br->input_ = $input;
		$s->br->finish_ = $finish;
		while(true) {
			if($result !== 1) {
				$tmp = null;
				if($result === 2) {
					$tmp = $finish === 1;
				} else {
					$tmp = false;
				}
				if($tmp) {
					haxe_Log::trace("Unexpected end of input. State: " . _hx_string_rec($s->state, "") . "\x0A", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
					$result = 0;
				}
				break;
				unset($tmp);
			}
			if($s->state === 0) {
				$pos = 0;
				$s->input_end = 0;
				$s->window_bits = 0;
				$s->max_distance = 0;
				$s->dist_rb[0] = 16;
				$s->dist_rb[1] = 15;
				$s->dist_rb[2] = 11;
				$s->dist_rb[3] = 4;
				$s->dist_rb_idx = 0;
				$s->prev_byte1 = 0;
				$s->prev_byte2 = 0;
				$s->block_type_trees = null;
				$s->block_len_trees = null;
				decode_BitReader::BrotliInitBitReader($br, $input, $finish);
				$s->state = 1;
			}
			if($s->state === 1) {
				if(!decode_BitReader::BrotliWarmupBitReader($br)) {
					$result = 2;
					continue;
				}
				$s->window_bits = decode_Decode::DecodeWindowBits($br);
				if($s->window_bits === 9) {
					$result = 0;
					continue;
				}
				$s->max_backward_distance = (1 << $s->window_bits) - 16;
				$s->block_type_trees = FunctionMalloc::malloc2_decode_huffman_HuffmanCode(_hx_qtype("decode.huffman.HuffmanCode"), 3240);
				$s->block_len_trees = FunctionMalloc::malloc2_decode_huffman_HuffmanCode(_hx_qtype("decode.huffman.HuffmanCode"), 3240);
				$tmp1 = null;
				if($s->block_type_trees !== null) {
					$tmp1 = $s->block_len_trees === null;
				} else {
					$tmp1 = true;
				}
				if($tmp1) {
					$result = 0;
					continue;
				}
				$s->state = 10;
				unset($tmp1);
			}
			if($s->state === 10) {
				if($s->input_end !== 0) {
					$s->partially_written = 0;
					$s->state = 100;
					continue;
				}
				$s->meta_block_remaining_len = 0;
				$s->block_length[0] = 268435456;
				$s->block_length[1] = 268435456;
				$s->block_length[2] = 268435456;
				$s->block_type[0] = 0;
				$s->num_block_types[0] = 1;
				$s->num_block_types[1] = 1;
				$s->num_block_types[2] = 1;
				$s->block_type_rb[0] = 0;
				$s->block_type_rb[1] = 1;
				$s->block_type_rb[2] = 0;
				$s->block_type_rb[3] = 1;
				$s->block_type_rb[4] = 0;
				$s->block_type_rb[5] = 1;
				$s->block_type_rb_index[0] = 0;
				$s->context_map = null;
				$s->context_modes = null;
				$s->dist_context_map = null;
				$s->context_offset = 0;
				$s->context_map_slice = null;
				$s->context_map_slice_off = 0;
				$s->literal_htree_index = 0;
				$s->dist_context_offset = 0;
				$s->dist_context_map_slice = null;
				$s->dist_context_map_slice_off = 0;
				$s->dist_htree_index = 0;
				$s->context_lookup_offset1 = 0;
				$s->context_lookup_offset2 = 0;
				{
					$_g = 0;
					while($_g < 3) {
						$_g = $_g + 1;
						$i1 = $_g - 1;
						_hx_array_get($s->hgroup, $i1)->codes = null;
						_hx_array_get($s->hgroup, $i1)->htrees = null;
						unset($i1);
					}
					unset($_g);
				}
				$s->state = 11;
			}
			if($s->state === 11) {
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					$result = 2;
					continue;
				}
				$meta_block_remaining_len = (new _hx_array(array($s->meta_block_remaining_len)));
				$input_end = (new _hx_array(array($s->input_end)));
				$is_metadata = (new _hx_array(array($s->is_metadata)));
				$is_uncompressed = (new _hx_array(array($s->is_uncompressed)));
				if(!decode_Decode::DecodeMetaBlockLength($br, $meta_block_remaining_len, $input_end, $is_metadata, $is_uncompressed)) {
					$result = 0;
					continue;
				}
				$s->meta_block_remaining_len = $meta_block_remaining_len[0];
				$s->input_end = $input_end[0];
				$s->is_metadata = $is_metadata[0];
				$s->is_uncompressed = $is_uncompressed[0];
				if($s->ringbuffer === null) {
					$known_size = (new _hx_array(array(0)));
					$s->ringbuffer_size = 1 << $s->window_bits;
					if(decode_Decode::BrotliDecompressedSize(4096, $br->buf_, $br->buf_off, $known_size) === 1) {
						while(true) {
							$tmp2 = null;
							if($s->ringbuffer_size >= $known_size->a[0] * 2) {
								$tmp2 = $s->ringbuffer_size > 1;
							} else {
								$tmp2 = false;
							}
							if(!$tmp2) {
								break;
							}
							$s->ringbuffer_size = Std::int($s->ringbuffer_size / 2);
							unset($tmp2);
						}
					}
					while($s->ringbuffer_size < $s->custom_dict_size) {
						$s->ringbuffer_size = $s->ringbuffer_size * 2;
					}
					$s->ringbuffer_mask = $s->ringbuffer_size - 1;
					$this1 = (new _hx_array(array()));
					$this1->length = $s->ringbuffer_size + 4224 + 24;
					$s->ringbuffer = $this1;
					$s->ringbuffer_off = 0;
					if($s->ringbuffer->length === 0) {
						$result = 0;
						continue;
					}
					$s->ringbuffer_end = $s->ringbuffer;
					$s->ringbuffer_end_off = $s->ringbuffer_off + $s->ringbuffer_size;
					if($s->custom_dict_off !== -1) {
						DefaultFunctions::memcpy_UInt($s->ringbuffer, $s->ringbuffer_off + (-$s->custom_dict_size & $s->ringbuffer_mask), $s->custom_dict, $s->custom_dict_off, $s->custom_dict_size);
						if($s->custom_dict_size > 0) {
							$s->prev_byte1 = $s->custom_dict[$s->custom_dict_size - 1];
						}
						if($s->custom_dict_size > 1) {
							$s->prev_byte2 = $s->custom_dict[$s->custom_dict_size - 2];
						}
					}
					unset($this1,$known_size);
				}
				if($s->is_metadata === 1) {
					if(!decode_Decode::JumpToByteBoundary($s->br)) {
						$result = 0;
						continue;
					}
					$s->state = 18;
					continue;
				}
				if($s->meta_block_remaining_len === 0) {
					$s->state = 20;
					continue;
				}
				if($s->is_uncompressed === 1) {
					if(!decode_Decode::JumpToByteBoundary($s->br)) {
						$result = 0;
						continue;
					}
					$s->state = 17;
					continue;
				}
				$i = 0;
				$s->state = 30;
				continue;
				unset($meta_block_remaining_len,$is_uncompressed,$is_metadata,$input_end);
			}
			if($s->state === 17) {
				$initial_remaining_len = $s->meta_block_remaining_len;
				$result = decode_Decode::CopyUncompressedBlockToOutput($output, $pos, $s);
				if($result === 3) {
					continue;
				}
				$bytes_copied = $initial_remaining_len - $s->meta_block_remaining_len;
				$pos = $pos + $bytes_copied;
				if($bytes_copied > 0) {
					$tmp3 = null;
					if($bytes_copied === 1) {
						$tmp3 = $s->prev_byte1;
					} else {
						$tmp3 = $s->ringbuffer[$pos - 2 & $s->ringbuffer_mask];
					}
					$s->prev_byte2 = $tmp3;
					$s->prev_byte1 = $s->ringbuffer[$pos - 1 & $s->ringbuffer_mask];
					unset($tmp3);
				}
				if($result !== 1) {
					continue;
				}
				$s->state = 20;
				continue;
			}
			if($s->state === 18) {
				while($s->meta_block_remaining_len > 0) {
					if(!decode_BitReader::BrotliReadMoreInput($s->br)) {
						$result = 2;
						continue;
					}
					decode_BitReader::BrotliReadBits($s->br, 8);
					--$s->meta_block_remaining_len;
				}
				$s->state = 20;
				continue;
			}
			if($s->state === 30) {
				if($i >= 3) {
					$s->state = 12;
					continue;
				}
				$s->num_block_types[$i] = decode_Decode::DecodeVarLenUint8($br) + 1;
				$s->state = 31;
			}
			if($s->state === 31) {
				if($s->num_block_types->a[$i] >= 2) {
					$result = decode_Decode::ReadHuffmanCode($s->num_block_types->a[$i] + 2, $s->block_type_trees, $i * 1080, null, $s);
					if($result !== 1) {
						continue;
					}
					$s->state = 32;
				} else {
					$i = $i + 1;
					$s->state = 30;
					continue;
				}
			}
			if($s->state === 32) {
				$result = decode_Decode::ReadHuffmanCode(26, $s->block_len_trees, $i * 1080, null, $s);
				if($result !== 1) {
					break;
				}
				$s->block_length[$i] = decode_Decode::ReadBlockLength($s->block_len_trees, $i * 1080, $br);
				$s->block_type_rb_index[$i] = 1;
				$i = $i + 1;
				$s->state = 30;
				continue;
			}
			if($s->state === 12) {
				if(!decode_BitReader::BrotliReadInputAmount($br, 128)) {
					$result = 2;
					continue;
				}
				$s->distance_postfix_bits = decode_BitReader::BrotliReadBits($br, 2);
				$a = decode_BitReader::BrotliReadBits($br, 4);
				$s->num_direct_distance_codes = 16 + ($a << $s->distance_postfix_bits);
				$s->distance_postfix_mask = (1 << $s->distance_postfix_bits) - 1;
				$s->num_distance_codes = $s->num_direct_distance_codes + (48 << $s->distance_postfix_bits);
				$s->context_modes = FunctionMalloc::mallocUInt($s->num_block_types[0]);
				if($s->context_modes->length === 0) {
					$result = 0;
					continue;
				}
				{
					$_g1 = 0;
					$_g2 = $s->num_block_types[0];
					while($_g1 < $_g2) {
						$_g1 = $_g1 + 1;
						$s->context_modes[$_g1 - 1] = decode_BitReader::BrotliReadBits($br, 2) << 1;
					}
					unset($_g2,$_g1);
				}
				$s->state = 33;
				unset($a);
			}
			if($s->state === 33) {
				$num_literal_htrees = (new _hx_array(array($s->num_literal_htrees)));
				$context_map = (new _hx_array(array($s->context_map)));
				$result = decode_Decode::DecodeContextMap($s->num_block_types[0] << 6, $num_literal_htrees, $context_map, $s);
				$s->num_literal_htrees = $num_literal_htrees[0];
				$s->context_map = $context_map[0];
				$s->context_map_off = 0;
				$s->trivial_literal_context = 1;
				{
					$_g11 = 0;
					$_g3 = $s->num_block_types[0] << 6;
					while($_g11 < $_g3) {
						$_g11 = $_g11 + 1;
						$i2 = $_g11 - 1;
						if($s->context_map[$i2] !== $i2 >> 6) {
							$s->trivial_literal_context = 0;
							continue;
						}
						unset($i2);
					}
					unset($_g3,$_g11);
				}
				if($result !== 1) {
					continue;
				}
				$s->state = 34;
				unset($num_literal_htrees,$context_map);
			}
			if($s->state === 34) {
				$num_dist_htrees = (new _hx_array(array($s->num_dist_htrees)));
				$dist_context_map = (new _hx_array(array($s->dist_context_map)));
				$result = decode_Decode::DecodeContextMap($s->num_block_types[2] << 2, $num_dist_htrees, $dist_context_map, $s);
				$s->num_dist_htrees = $num_dist_htrees[0];
				$s->dist_context_map = $dist_context_map[0];
				$s->dist_context_map_off = 0;
				if($result !== 1) {
					continue;
				}
				decode_Huffman::BrotliHuffmanTreeGroupInit($s->hgroup[0], 256, $s->num_literal_htrees);
				decode_Huffman::BrotliHuffmanTreeGroupInit($s->hgroup[1], 704, $s->num_block_types[1]);
				decode_Huffman::BrotliHuffmanTreeGroupInit($s->hgroup[2], $s->num_distance_codes, $s->num_dist_htrees);
				$i = 0;
				$s->state = 35;
				unset($num_dist_htrees,$dist_context_map);
			}
			if($s->state === 35) {
				$result = decode_Decode::HuffmanTreeGroupDecode($s->hgroup[$i], $s);
				if($result !== 1) {
					continue;
				}
				$i = $i + 1;
				if($i >= 3) {
					$s->context_map_slice = $s->context_map;
					$s->context_map_slice_off = $s->context_map_off;
					$s->dist_context_map_slice = $s->dist_context_map;
					$s->dist_context_map_slice_off = $s->dist_context_map_off;
					$s->context_mode = $s->context_modes[$s->block_type[0]];
					$s->context_lookup_offset1 = decode_Context::$kContextLookupOffsets[$s->context_mode];
					$s->context_lookup_offset2 = decode_Context::$kContextLookupOffsets[$s->context_mode + 1];
					$s->htree_command = _hx_array_get($s->hgroup, 1)->htrees[0];
					$s->htree_command_off = _hx_array_get($s->hgroup, 1)->htrees_off[0];
					$s->state = 13;
					continue;
				}
				continue;
			}
			if($s->state === 13) {
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					$result = 2;
					continue;
				}
				if($s->meta_block_remaining_len <= 0) {
					$pos = $pos & 1073741823;
					$s->state = 20;
					continue;
				}
				if($s->block_length[1] === 0) {
					decode_Decode::DecodeBlockType($s->num_block_types[1], $s->block_type_trees, 1, $s->block_type, $s->block_type_rb, $s->block_type_rb_index, $br);
					$s->block_length[1] = decode_Decode::ReadBlockLength($s->block_len_trees, 1080, $br);
					$s->htree_command = _hx_array_get($s->hgroup, 1)->htrees[$s->block_type[1]];
					$s->htree_command_off = _hx_array_get($s->hgroup, 1)->htrees_off[$s->block_type[1]];
				}
				$s->block_length[1] = $s->block_length->a[1] - 1;
				$s->cmd_code = decode_Decode::ReadSymbol($s->htree_command, $s->htree_command_off, $br);
				$s->range_idx = $s->cmd_code >> 6;
				if($s->range_idx >= 2) {
					$s->range_idx = $s->range_idx - 2;
					$s->distance_code = -1;
				} else {
					$s->distance_code = 0;
				}
				$s->insert_code = decode_Prefix::$kInsertRangeLut->a[$s->range_idx] + ($s->cmd_code >> 3 & 7);
				$s->copy_code = decode_Prefix::$kCopyRangeLut->a[$s->range_idx] + ($s->cmd_code & 7);
				$a1 = _hx_array_get(decode_Prefix::$kInsertLengthPrefixCode, $s->insert_code)->offset;
				$s->insert_length = $a1 + decode_BitReader::BrotliReadBits($br, _hx_array_get(decode_Prefix::$kInsertLengthPrefixCode, $s->insert_code)->nbits);
				$a2 = _hx_array_get(decode_Prefix::$kCopyLengthPrefixCode, $s->copy_code)->offset;
				$s->copy_length = $a2 + decode_BitReader::BrotliReadBits($br, _hx_array_get(decode_Prefix::$kCopyLengthPrefixCode, $s->copy_code)->nbits);
				$i = 0;
				$s->state = 14;
				unset($a2,$a1);
			}
			if($s->state === 14) {
				if($s->trivial_literal_context === 1) {
					while($i < $s->insert_length) {
						if(!decode_BitReader::BrotliReadMoreInput($br)) {
							$result = 2;
							break;
						}
						if($s->block_length[0] === 0) {
							decode_Decode::DecodeBlockTypeWithContext($s, $br);
						}
						$s->ringbuffer[$pos & $s->ringbuffer_mask] = decode_Decode::ReadSymbol(_hx_array_get($s->hgroup, 0)->htrees[$s->literal_htree_index], _hx_array_get($s->hgroup, 0)->htrees_off[$s->literal_htree_index], $br);
						$s->block_length[0] = $s->block_length->a[0] - 1;
						if(($pos & $s->ringbuffer_mask) === $s->ringbuffer_mask) {
							$s->partially_written = 0;
							$s->state = 19;
							break;
						}
						$pos = $pos + 1;
						$i = $i + 1;
					}
				} else {
					$p1 = $s->prev_byte1;
					$p2 = $s->prev_byte2;
					while($i < $s->insert_length) {
						if(!decode_BitReader::BrotliReadMoreInput($br)) {
							$result = 2;
							break;
						}
						if($s->block_length[0] === 0) {
							decode_Decode::DecodeBlockTypeWithContext($s, $br);
						}
						$context = decode_Context::$kContextLookup[$s->context_lookup_offset1 + $p1] | decode_Context::$kContextLookup[$s->context_lookup_offset2 + $p2];
						$s->literal_htree_index = $s->context_map_slice[$s->context_map_slice_off + $context];
						$s->block_length[0] = $s->block_length->a[0] - 1;
						$p2 = $p1;
						$p1 = decode_Decode::ReadSymbol(_hx_array_get($s->hgroup, 0)->htrees[$s->literal_htree_index], _hx_array_get($s->hgroup, 0)->htrees_off[$s->literal_htree_index], $br);
						$s->ringbuffer[$pos & $s->ringbuffer_mask] = $p1;
						if(($pos & $s->ringbuffer_mask) === $s->ringbuffer_mask) {
							$s->partially_written = 0;
							$s->state = 19;
							break;
						}
						$pos = $pos + 1;
						$i = $i + 1;
					}
					$s->prev_byte1 = $p1;
					$s->prev_byte2 = $p2;
					unset($p2,$p1);
				}
				$tmp4 = null;
				if($result === 1) {
					$tmp4 = $s->state === 19;
				} else {
					$tmp4 = true;
				}
				if($tmp4) {
					continue;
				}
				$s->meta_block_remaining_len = $s->meta_block_remaining_len - $s->insert_length;
				if($s->meta_block_remaining_len <= 0) {
					$s->state = 20;
					continue;
				} else {
					if($s->distance_code < 0) {
						$s->state = 15;
					} else {
						$s->state = 16;
						continue;
					}
				}
				unset($tmp4);
			}
			if($s->state === 15) {
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					$result = 2;
					continue;
				}
				if($s->block_length[2] === 0) {
					decode_Decode::DecodeBlockType($s->num_block_types[2], $s->block_type_trees, 2, $s->block_type, $s->block_type_rb, $s->block_type_rb_index, $br);
					$s->block_length[2] = decode_Decode::ReadBlockLength($s->block_len_trees, 2160, $br);
					$s->dist_context_offset = $s->block_type[2] << 2;
					$s->dist_context_map_slice = $s->dist_context_map;
					$s->dist_context_map_slice_off = $s->dist_context_map_off + $s->dist_context_offset;
				}
				$s->block_length[2] = $s->block_length->a[2] - 1;
				if($s->copy_length > 4) {
					$context = 3;
				} else {
					$context = $s->copy_length - 2;
				}
				$s->dist_htree_index = $s->dist_context_map_slice[$s->dist_context_map_slice_off + $context];
				$s->distance_code = decode_Decode::ReadSymbol(_hx_array_get($s->hgroup, 2)->htrees[$s->dist_htree_index], _hx_array_get($s->hgroup, 2)->htrees_off[$s->dist_htree_index], $br);
				if($s->distance_code >= $s->num_direct_distance_codes) {
					$nbits = null;
					$postfix = null;
					$offset = null;
					$s->distance_code = $s->distance_code - $s->num_direct_distance_codes;
					$postfix = $s->distance_code & $s->distance_postfix_mask;
					$s->distance_code = $s->distance_code >> $s->distance_postfix_bits;
					$nbits = ($s->distance_code >> 1) + 1;
					$offset = (2 + ($s->distance_code & 1) << $nbits) - 4;
					$a3 = $s->num_direct_distance_codes;
					$a4 = $offset + decode_BitReader::BrotliReadBits($br, $nbits);
					$s->distance_code = $a3 + ($a4 << $s->distance_postfix_bits) + $postfix;
					unset($postfix,$offset,$nbits,$a4,$a3);
				}
				$s->state = 16;
			}
			if($s->state === 16) {
				if(!decode_BitReader::BrotliReadMoreInput($br)) {
					$result = 2;
					continue;
				}
				$s->distance = decode_Decode::TranslateShortCodes($s->distance_code, $s->dist_rb, $s->dist_rb_idx);
				if($s->distance < 0) {
					$result = 0;
					continue;
				}
				$tmp5 = null;
				if($pos + $s->custom_dict_size < $s->max_backward_distance) {
					$tmp5 = $s->max_distance !== $s->max_backward_distance;
				} else {
					$tmp5 = false;
				}
				if($tmp5) {
					$s->max_distance = $pos + $s->custom_dict_size;
				} else {
					$s->max_distance = $s->max_backward_distance;
				}
				$s->copy_dst = $s->ringbuffer;
				$s->copy_dst_off = $s->ringbuffer_off + ($pos & $s->ringbuffer_mask);
				if($s->distance > $s->max_distance) {
					$tmp6 = null;
					if($s->copy_length >= 4) {
						$tmp6 = $s->copy_length <= 24;
					} else {
						$tmp6 = false;
					}
					if($tmp6) {
						$offset1 = decode_Dictionary::$kBrotliDictionaryOffsetsByLength[$s->copy_length];
						$word_id = $s->distance - $s->max_distance - 1;
						$shift = decode_Dictionary::$kBrotliDictionarySizeBitsByLength[$s->copy_length];
						$transform_idx = $word_id >> $shift;
						$offset1 = $offset1 + ($word_id & (1 << $shift) - 1) * $s->copy_length;
						if($transform_idx < decode_Transforms::$kNumTransforms) {
							$len = decode_Transforms::TransformDictionaryWord($s->copy_dst, $s->copy_dst_off, decode_Dictionary::$kBrotliDictionary, $offset1, $s->copy_length, $transform_idx);
							$s->copy_dst_off = $s->copy_dst_off + $len;
							$pos = $pos + $len;
							$s->meta_block_remaining_len = $s->meta_block_remaining_len - $len;
							if($s->copy_dst_off >= $s->ringbuffer_end_off) {
								$s->partially_written = 0;
								$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off, $s->ringbuffer_size);
								if($num_written < 0) {
									$result = 0;
									continue;
								}
								$s->partially_written = $s->partially_written + $num_written;
								if($s->partially_written < $s->ringbuffer_size) {
									$result = 3;
									$s->state = 21;
									continue;
								}
								DefaultFunctions::memcpy_UInt($s->ringbuffer, $s->ringbuffer_off, $s->ringbuffer_end, $s->ringbuffer_end_off, $s->copy_dst_off - $s->ringbuffer_end_off);
							}
							unset($len);
						} else {
							haxe_Log::trace("Invalid backward reference. pos: " . _hx_string_rec($pos, "") . " distance: " . _hx_string_rec($s->distance, "") . " " . "len: " . _hx_string_rec($s->copy_length, "") . " bytes left: " . _hx_string_rec($s->meta_block_remaining_len, "") . "\x0A", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
							$result = 0;
							continue;
						}
						unset($word_id,$transform_idx,$shift,$offset1);
					} else {
						haxe_Log::trace("Invalid backward reference. pos: " . _hx_string_rec($pos, "") . " distance: " . _hx_string_rec($s->distance, "") . " " . "len: " . _hx_string_rec($s->copy_length, "") . " bytes left: " . _hx_string_rec($s->meta_block_remaining_len, "") . "\x0A", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
						$result = 0;
						continue;
					}
					unset($tmp6);
				} else {
					if($s->distance_code > 0) {
						$s->dist_rb[$s->dist_rb_idx & 3] = $s->distance;
						++$s->dist_rb_idx;
					}
					if($s->copy_length > $s->meta_block_remaining_len) {
						haxe_Log::trace("Invalid backward reference. pos: " . _hx_string_rec($pos, "") . " distance: " . _hx_string_rec($s->distance, "") . " " . "len: " . _hx_string_rec($s->copy_length, "") . " bytes left: " . _hx_string_rec($s->meta_block_remaining_len, "") . "\x0A", _hx_anonymous(array("fileName" => "Decode.hx", "lineNumber" => 55, "className" => "decode.Decode", "methodName" => "BROTLI_LOG")));
						$result = 0;
						continue;
					}
					$s->copy_src = $s->ringbuffer;
					$s->copy_src_off = $s->ringbuffer_off + ($pos - $s->distance & $s->ringbuffer_mask);
					{
						$_g12 = 0;
						$_g4 = $s->copy_length;
						while($_g12 < $_g4) {
							$_g12 = $_g12 + 1;
							$s->ringbuffer[$pos & $s->ringbuffer_mask] = $s->ringbuffer[$pos - $s->distance & $s->ringbuffer_mask];
							if(($pos & $s->ringbuffer_mask) === $s->ringbuffer_mask) {
								$s->partially_written = 0;
								$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off, $s->ringbuffer_size);
								if($num_written < 0) {
									$result = 0;
									continue;
								}
								$s->partially_written = $s->partially_written + $num_written;
								if($s->partially_written < $s->ringbuffer_size) {
									$result = 3;
									$s->state = 22;
									continue;
								}
							}
							$pos = $pos + 1;
							--$s->meta_block_remaining_len;
						}
						unset($_g4,$_g12);
					}
					if($result === 3) {
						continue;
					}
				}
				$s->state = 23;
				unset($tmp5);
			}
			if($s->state === 23) {
				$s->prev_byte1 = $s->ringbuffer[$pos - 1 & $s->ringbuffer_mask];
				$s->prev_byte2 = $s->ringbuffer[$pos - 2 & $s->ringbuffer_mask];
				$s->state = 13;
			}
			$tmp7 = null;
			$tmp8 = null;
			if($s->state !== 19) {
				$tmp8 = $s->state === 21;
			} else {
				$tmp8 = true;
			}
			if(!$tmp8) {
				$tmp7 = $s->state === 22;
			} else {
				$tmp7 = true;
			}
			if($tmp7) {
				$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off + $s->partially_written, $s->ringbuffer_size - $s->partially_written);
				if($num_written < 0) {
					$result = 0;
					continue;
				}
				$s->partially_written = $s->partially_written + $num_written;
				if($s->partially_written < $s->ringbuffer_size) {
					$result = 3;
					continue;
				}
				if($s->state === 21) {
					DefaultFunctions::memcpy_UInt($s->ringbuffer, $s->ringbuffer_off, $s->ringbuffer_end, $s->ringbuffer_end_off, $s->copy_dst_off - $s->ringbuffer_end_off);
					$s->state = 23;
				} else {
					if($s->state === 22) {
						$pos = $pos + 1;
						--$s->meta_block_remaining_len;
						$i = $i + 1;
						while($i < $s->copy_length) {
							$s->ringbuffer[$pos & $s->ringbuffer_mask] = $s->ringbuffer[$pos - $s->distance & $s->ringbuffer_mask];
							if(($pos & $s->ringbuffer_mask) === $s->ringbuffer_mask) {
								$s->partially_written = 0;
								$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off, $s->ringbuffer_size);
								if($num_written < 0) {
									$result = 0;
									continue;
								}
								$s->partially_written = $s->partially_written + $num_written;
								if($s->partially_written < $s->ringbuffer_size) {
									$result = 3;
									continue;
								}
							}
							$pos = $pos + 1;
							--$s->meta_block_remaining_len;
							$i = $i + 1;
						}
						if($result === 3) {
							continue;
						}
						$s->state = 23;
					} else {
						$pos = $pos + 1;
						$i = $i + 1;
						$s->state = 14;
					}
				}
				continue;
			}
			if($s->state === 20) {
				if($s->context_modes !== null) {
					$s->context_modes = null;
				}
				if($s->context_map !== null) {
					$s->context_map = null;
				}
				if($s->dist_context_map !== null) {
					$s->dist_context_map = null;
				}
				{
					$_g5 = 0;
					while($_g5 < 3) {
						$_g5 = $_g5 + 1;
						$i3 = $_g5 - 1;
						_hx_array_get($s->hgroup, $i3)->codes = null;
						_hx_array_get($s->hgroup, $i3)->htrees = null;
						unset($i3);
					}
					unset($_g5);
				}
				$s->state = 10;
				continue;
			}
			if($s->state === 100) {
				if($s->ringbuffer->length !== 0) {
					$num_written = decode_Streams::BrotliWrite($output, $s->ringbuffer, $s->ringbuffer_off + $s->partially_written, ($pos & $s->ringbuffer_mask) - $s->partially_written);
					if($num_written < 0) {
						return 0;
					}
					$s->partially_written = $s->partially_written + $num_written;
					if($s->partially_written < ($pos & $s->ringbuffer_mask)) {
						$result = 3;
						break;
					}
				}
				if(!decode_Decode::JumpToByteBoundary($s->br)) {
					$result = 0;
				}
				return $result;
			}
			unset($tmp8,$tmp7);
		}
		$s->pos = $pos;
		$s->loop_counter = $i;
		return $result;
	}
	static function BrotliDecompress($input, $output) {
		$s = new decode_state_BrotliState();
		decode_State::BrotliStateInit($s);
		decode_Decode::BrotliDecompressStreaming($input, $output, 1, $s);
		return 1;
	}
	function __toString() { return 'decode.Decode'; }
}
decode_Decode::$kCodeLengthCodeOrder = (new _hx_array(array(1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15)));
decode_Decode::$kDistanceShortCodeIndexOffset = (new _hx_array(array(3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2)));
decode_Decode::$kDistanceShortCodeValueOffset = (new _hx_array(array(0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3)));
