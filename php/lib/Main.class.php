<?php

// Generated by Haxe 3.4.0
class Main extends decode_Decode {
	public function __construct() {}
	static function ParseQuality($s, $quality) {
		$i = Std::parseInt($s);
		$tmp = null;
		if($i >= 0) {
			$tmp = $i <= 11;
		} else {
			$tmp = false;
		}
		if($tmp) {
			$quality[0] = $i;
			return true;
		} else {
			return false;
		}
	}
	static function ParseArgv($argc, $argv, $input_path, $output_path, $force, $quality, $decompress) {
		$error = false;
		$force[0] = 0;
		$input_path[0] = "";
		$output_path[0] = "";
		if($argc > 0) {
			$tmp = null;
			$tmp1 = null;
			if(strlen($argv[0]) >= 5) {
				$tmp1 = $argv[0] === "unbro";
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$tmp = 1;
			} else {
				$tmp = 0;
			}
			$decompress[0] = $tmp;
		} else {
			$error = true;
		}
		$k = 0;
		$i = 0;
		if(!$error) {
			while($i < $argc) {
				$i = $i + 1;
				$k = $i - 1;
				$tmp2 = null;
				if("--force" !== $argv[$k]) {
					$tmp2 = "-f" === $argv[$k];
				} else {
					$tmp2 = true;
				}
				if($tmp2) {
					if($force[0] !== 0) {
						$error = true;
						break;
					}
					$force[0] = 1;
					continue;
				} else {
					$tmp3 = null;
					$tmp4 = null;
					if("--decompress" !== $argv[$k]) {
						$tmp4 = "--uncompress" === $argv[$k];
					} else {
						$tmp4 = true;
					}
					if(!$tmp4) {
						$tmp3 = "-d" === $argv[$k];
					} else {
						$tmp3 = true;
					}
					if($tmp3) {
						$decompress[0] = 1;
						continue;
					}
					unset($tmp4,$tmp3);
				}
				if($k < $argc - 1) {
					$tmp5 = null;
					$tmp6 = null;
					if("--input" !== $argv[$k]) {
						$tmp6 = "--in" === $argv[$k];
					} else {
						$tmp6 = true;
					}
					if(!$tmp6) {
						$tmp5 = "-i" === $argv[$k];
					} else {
						$tmp5 = true;
					}
					if($tmp5) {
						if($input_path[0] !== "") {
							$error = true;
							break;
						}
						$input_path[0] = $argv[$k + 1];
						$i = $i + 1;
						continue;
					} else {
						$tmp7 = null;
						$tmp8 = null;
						if("--output" !== $argv[$k]) {
							$tmp8 = "--out" === $argv[$k];
						} else {
							$tmp8 = true;
						}
						if(!$tmp8) {
							$tmp7 = "-o" === $argv[$k];
						} else {
							$tmp7 = true;
						}
						if($tmp7) {
							if($output_path[0] !== "") {
								$error = true;
								break;
							}
							$output_path[0] = $argv[$k + 1];
							$i = $i + 1;
							continue;
						} else {
							$tmp9 = null;
							if("--quality" !== $argv[$k]) {
								$tmp9 = "-q" === $argv[$k];
							} else {
								$tmp9 = true;
							}
							if($tmp9) {
								if(!Main::ParseQuality($argv[$k + 1], $quality)) {
									$error = true;
									break;
								}
								$i = $i + 1;
								continue;
							}
							unset($tmp9);
						}
						unset($tmp8,$tmp7);
					}
					unset($tmp6,$tmp5);
				}
				$error = true;
				break;
				unset($tmp2);
			}
		}
		if($error) {
			Sys::hprint("Usage: [--force] [--quality n] [--decompress] [--input filename] [--output filename]\x0A");
			return false;
		}
		return true;
	}
	static function main() {
		$argv = Sys::args();
		$argc = $argv->length;
		$input_path = (new _hx_array(array("")));
		$output_path = (new _hx_array(array("")));
		$force = (new _hx_array(array(0)));
		$quality = (new _hx_array(array(11)));
		$decompress = (new _hx_array(array(0)));
		if(!Main::ParseArgv($argc, $argv, $input_path, $output_path, $force, $quality, $decompress)) {
			return;
		}
		if(!file_exists($input_path[0])) {
			Sys::hprint("Input Filename doesn't exists");
			return;
		}
		$tmp = null;
		if(file_exists($output_path[0])) {
			$tmp = $force[0] === 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
			Sys::hprint("Output Filename can't overwrite");
			return;
		}
		$dictionary = Brotli::OpenInputBinary("dictionary.txt");
		$clock_start = Date::now()->getTime();
		$fin = Brotli::OpenInputFile($input_path[0]);
		$fout = Brotli::OpenOutputFile($output_path[0], $force[0]);
		if($decompress->a[0] > 0) {
			decode_Dictionary::$kBrotliDictionary = $dictionary;
			$clock_start1 = Date::now()->getTime();
			$input = decode_Streams::BrotliFileInput($fin);
			$output = decode_Streams::BrotliFileOutput($fout);
			if(decode_Decode::BrotliDecompress($input, $output) <= 0) {
				Sys::hprint("Error while decoding");
				return;
			}
		} else {
			encode_Dictionary::$kBrotliDictionary = $dictionary;
			$DictionaryHash = Brotli::OpenInputBinary("DictionaryHash.txt");
			$DictionaryWords = Brotli::OpenInputBinary("DictionaryWords.txt");
			$DictionaryBuckets = Brotli::OpenInputBinary("DictionaryBuckets.txt");
			$kStaticDictionaryHash = encode_Dictionary_hash::$kStaticDictionaryHash;
			$kStaticDictionaryBuckets = encode_Static_dict_lut::$kStaticDictionaryBuckets;
			{
				$_g = 0;
				while($_g < 32768) {
					$_g = $_g + 1;
					$i = $_g - 1;
					$kStaticDictionaryHash->push($DictionaryHash[$i * 2 + 1] << 8 | $DictionaryHash[$i * 2]);
					$kStaticDictionaryBuckets->push($DictionaryBuckets[$i * 3 + 2] << 16 | $DictionaryBuckets[$i * 3 + 1] << 8 | $DictionaryBuckets[$i * 3]);
					unset($i);
				}
			}
			$kStaticDictionaryWords = encode_Static_dict_lut::$kStaticDictionaryWords;
			{
				$_g1 = 0;
				while($_g1 < 31704) {
					$_g1 = $_g1 + 1;
					$i1 = $_g1 - 1;
					$len = _hx_shift_right($DictionaryWords[$i1 * 3 + 1], 3);
					$idx = ($DictionaryWords[$i1 * 3 + 1] & 7) << 8 | $DictionaryWords[$i1 * 3];
					$transform = $DictionaryWords[$i1 * 3 + 2];
					$kStaticDictionaryWords->push(new encode_static_dict_lut_DictWord($len, $transform, $idx));
					unset($transform,$len,$idx,$i1);
				}
			}
			$params = new encode_encode_BrotliParams();
			$params->quality = $quality[0];
			$clock_start2 = Date::now()->getTime();
			$input1 = new encode_streams_BrotliIn($fin, 65536);
			$output1 = new encode_streams_BrotliOut($fout);
			if(!encode_Encode::BrotliCompress($params, $input1, $output1)) {
				Sys::hprint("Error while encoding");
				return;
			}
		}
		$clock_end = Date::now()->getTime();
		print memory_get_usage();
		$duration = ($clock_end - $clock_start) / 1000;
		if($duration < 1e-9) {
			$duration = 1e-9;
		}
		$uncompressed_bytes = null;
		if($decompress->a[0] > 0) {
			$uncompressed_bytes = $fout->tell();
		} else {
			$uncompressed_bytes = $fin->tell();
		}
		$uncompressed_bytes_in_MB = $uncompressed_bytes / 1048576.;
		$log = null;
		if($decompress->a[0] > 0) {
			$log = "de";
		} else {
			$log = "";
		}
		$log1 = "Filename:" . _hx_string_or_null($output_path[0]) . " " . _hx_string_or_null($log) . "compressed size:";
		$log2 = _hx_string_or_null($log1) . _hx_string_rec($fout->tell(), "") . " ";
		$log3 = null;
		if($decompress->a[0] > 0) {
			$log3 = "de";
		} else {
			$log3 = "";
		}
		$log4 = _hx_string_or_null($log2) . _hx_string_or_null($log3) . "coding time (ms):" . _hx_string_rec(($clock_end - $clock_start), "") . " ";
		if($decompress->a[0] > 0) {
			$log4 = _hx_string_or_null($log4) . "Brotli decompression speed: ";
		} else {
			$log4 = _hx_string_or_null($log4) . "Brotli compression speed: ";
		}
		$log4 = _hx_string_or_null($log4) . _hx_string_or_null((_hx_string_rec(Std::int($uncompressed_bytes_in_MB / $duration * 100) / 100, "") . " MB/s"));
		Sys::hprint($log4);
		return;
	}
	function __toString() { return 'Main'; }
}
