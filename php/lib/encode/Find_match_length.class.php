<?php

// Generated by Haxe 3.4.0
class encode_Find_match_length {
	public function __construct() {}
	static function FindMatchLengthWithLimit($s1, $s1_off, $s2, $s2_off, $limit) {
		$matched = 0;
		$s2_limit_off = $s2_off + $limit;
		$s2_ptr_off = $s2_off;
		while(true) {
			$tmp = null;
			if($s2_ptr_off <= $s2_limit_off - 4) {
				$p_off = $s1_off + $matched;
				$tmp = ($s2[$s2_ptr_off + 3] << 24 | $s2[$s2_ptr_off + 2] << 16 | $s2[$s2_ptr_off + 1] << 8 | $s2[$s2_ptr_off]) === ($s1[$p_off + 3] << 24 | $s1[$p_off + 2] << 16 | $s1[$p_off + 1] << 8 | $s1[$p_off]);
				unset($p_off);
			} else {
				$tmp = false;
			}
			if(!$tmp) {
				break;
			}
			$s2_ptr_off = $s2_ptr_off + 4;
			$matched = $matched + 4;
			unset($tmp);
		}
		while(true) {
			$tmp1 = null;
			if($s2_ptr_off < $s2_limit_off) {
				$tmp1 = $s1[$s1_off + $matched] === $s2[$s2_ptr_off];
			} else {
				$tmp1 = false;
			}
			if(!$tmp1) {
				break;
			}
			$s2_ptr_off = $s2_ptr_off + 1;
			$matched = $matched + 1;
			unset($tmp1);
		}
		return $matched;
	}
	function __toString() { return 'encode.Find_match_length'; }
}
