<?php

// Generated by Haxe 3.4.0
class encode_streams_BrotliOut {
	public function __construct($f) {
		if(!php_Boot::$skip_constructor) {
		$this->f_ = $f;
	}}
	public $f_;
	public function Write($buf, $n) {
		$bytes = haxe_io_Bytes::alloc($n);
		{
			$_g1 = 0;
			$_g = $n;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				{
					$this1 = $bytes->b;
					$this1->s[$i] = chr($buf[$i]);
					unset($this1);
				}
				unset($i);
			}
		}
		$this->f_->write($bytes);
		return true;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.streams.BrotliOut'; }
}
