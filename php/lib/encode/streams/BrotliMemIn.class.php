<?php

// Generated by Haxe 3.4.0
class encode_streams_BrotliMemIn {
	public function __construct($buf, $len) {
		if(!php_Boot::$skip_constructor) {
		$this->buf_ = $buf;
		$this->len_ = $len;
		$this->pos_ = 0;
	}}
	public function position() {
		return $this->pos_;
	}
	public $buf_;
	public $len_;
	public $pos_;
	public function Reset($buf, $len) {
		$this->buf_ = $buf;
		$this->len_ = $len;
		$this->pos_ = 0;
	}
	public function Read($n, $output) {
		if($this->pos_ === $this->len_) {
			return null;
		}
		if($n > $this->len_ - $this->pos_) {
			$n = $this->len_ - $this->pos_;
		}
		$this1 = (new _hx_array(array()));
		$this1->length = $n;
		$p = $this1;
		DefaultFunctions::memcpyVectorArray($p, 0, $this->buf_, $this->pos_, $n);
		$tmp = $this;
		$tmp->pos_ = $tmp->pos_ + $n;
		$output[0] = $n;
		return $p;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.streams.BrotliMemIn'; }
}
