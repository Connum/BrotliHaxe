<?php

// Generated by Haxe 3.4.0
class encode_streams_BrotliMemOut {
	public function __construct($buf) {
		if(!php_Boot::$skip_constructor) {
		$this->buf_ = $buf;
		$this->pos_ = 0;
	}}
	public function position() {
		return $this->pos_;
	}
	public $buf_;
	public $pos_;
	public function Reset($buf, $len) {
		$this->buf_ = $buf;
		$this->pos_ = 0;
	}
	public function Write($buf, $n) {
		DefaultFunctions::memcpyArrayVector($this->buf_, $this->pos_, $buf, 0, $n);
		$tmp = $this;
		$tmp->pos_ = $tmp->pos_ + $n;
		return true;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.streams.BrotliMemOut'; }
}
