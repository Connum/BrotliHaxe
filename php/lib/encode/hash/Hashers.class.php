<?php

// Generated by Haxe 3.4.0
class encode_hash_Hashers {
	public function __construct() {}
	public function Init($type) {
		switch($type) {
		case 1:{
			$this->hash_h1 = new encode_hash_HashLongestMatchQuickly(16, 1, true);
		}break;
		case 2:{
			$this->hash_h2 = new encode_hash_HashLongestMatchQuickly(16, 2, false);
		}break;
		case 3:{
			$this->hash_h3 = new encode_hash_HashLongestMatchQuickly(16, 4, false);
		}break;
		case 4:{
			$this->hash_h4 = new encode_hash_HashLongestMatchQuickly(17, 4, true);
		}break;
		case 5:{
			$this->hash_h5 = new encode_hash_HashLongestMatch(14, 4, 4);
		}break;
		case 6:{
			$this->hash_h6 = new encode_hash_HashLongestMatch(14, 5, 4);
		}break;
		case 7:{
			$this->hash_h7 = new encode_hash_HashLongestMatch(15, 6, 10);
		}break;
		case 8:{
			$this->hash_h8 = new encode_hash_HashLongestMatch(15, 7, 10);
		}break;
		case 9:{
			$this->hash_h9 = new encode_hash_HashLongestMatch(15, 8, 16);
		}break;
		default:{}break;
		}
	}
	public function WarmupHashHashLongestMatchQuickly($size, $dict, $hasher) {
		$_g1 = 0;
		while($_g1 < $size) {
			$_g1 = $_g1 + 1;
			$hasher->Store($dict, 0, $_g1 - 1);
		}
	}
	public function WarmupHashHashLongestMatch($size, $dict, $hasher) {
		$_g1 = 0;
		while($_g1 < $size) {
			$_g1 = $_g1 + 1;
			$hasher->Store($dict, 0, $_g1 - 1);
		}
	}
	public function PrependCustomDictionary($type, $size, $dict) {
		switch($type) {
		case 1:{
			$this->WarmupHashHashLongestMatchQuickly($size, $dict, $this->hash_h1);
		}break;
		case 2:{
			$this->WarmupHashHashLongestMatchQuickly($size, $dict, $this->hash_h2);
		}break;
		case 3:{
			$this->WarmupHashHashLongestMatchQuickly($size, $dict, $this->hash_h3);
		}break;
		case 4:{
			$this->WarmupHashHashLongestMatchQuickly($size, $dict, $this->hash_h4);
		}break;
		case 5:{
			$this->WarmupHashHashLongestMatch($size, $dict, $this->hash_h5);
		}break;
		case 6:{
			$this->WarmupHashHashLongestMatch($size, $dict, $this->hash_h6);
		}break;
		case 7:{
			$this->WarmupHashHashLongestMatch($size, $dict, $this->hash_h7);
		}break;
		case 8:{
			$this->WarmupHashHashLongestMatch($size, $dict, $this->hash_h8);
		}break;
		case 9:{
			$this->WarmupHashHashLongestMatch($size, $dict, $this->hash_h9);
		}break;
		default:{}break;
		}
	}
	public $hash_h1;
	public $hash_h2;
	public $hash_h3;
	public $hash_h4;
	public $hash_h5;
	public $hash_h6;
	public $hash_h7;
	public $hash_h8;
	public $hash_h9;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.hash.Hashers'; }
}
