<?php

// Generated by Haxe 3.4.0
class encode_Command_functions {
	public function __construct() {}
	static function GetDistCode($distance_code, $code, $extra) {
		if($distance_code < 16) {
			$code[0] = $distance_code;
			$extra[0] = 0;
		} else {
			$distance_code = $distance_code - 12;
			$numextra = encode_Fast_log::Log2FloorNonZero($distance_code) - 1;
			$prefix = $distance_code >> $numextra;
			$code[0] = 12 + 2 * $numextra + $prefix;
			$extra[0] = $numextra << 24 | $distance_code - ($prefix << $numextra);
		}
	}
	static $insbase;
	static $insextra;
	static $copybase;
	static $copyextra;
	static function GetInsertLengthCode($insertlen) {
		if($insertlen < 6) {
			return $insertlen;
		} else {
			if($insertlen < 130) {
				$insertlen = $insertlen - 2;
				$nbits = encode_Fast_log::Log2FloorNonZero($insertlen) - 1;
				return ($nbits << 1) + ($insertlen >> $nbits) + 2;
			} else {
				if($insertlen < 2114) {
					return encode_Fast_log::Log2FloorNonZero($insertlen - 66) + 10;
				} else {
					if($insertlen < 6210) {
						return 21;
					} else {
						if($insertlen < 22594) {
							return 22;
						} else {
							return 23;
						}
					}
				}
			}
		}
	}
	static function GetCopyLengthCode($copylen) {
		if($copylen < 10) {
			return $copylen - 2;
		} else {
			if($copylen < 134) {
				$copylen = $copylen - 6;
				$nbits = encode_Fast_log::Log2FloorNonZero($copylen) - 1;
				return ($nbits << 1) + ($copylen >> $nbits) + 4;
			} else {
				if($copylen < 2118) {
					return encode_Fast_log::Log2FloorNonZero($copylen - 70) + 12;
				} else {
					return 23;
				}
			}
		}
	}
	static function CombineLengthCodes($inscode, $copycode, $distancecode) {
		$bits64 = $copycode & 7 | ($inscode & 7) << 3;
		$tmp = null;
		$tmp1 = null;
		if($distancecode === 0) {
			$tmp1 = $inscode < 8;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $copycode < 16;
		} else {
			$tmp = false;
		}
		if($tmp) {
			if($copycode < 8) {
				return $bits64;
			} else {
				return $bits64 | 64;
			}
		} else {
			return _hx_array_get((new _hx_array(array(2, 3, 6, 4, 5, 8, 7, 9, 10))), ($copycode >> 3) + 3 * ($inscode >> 3)) << 6 | $bits64;
		}
	}
	static function GetLengthCode($insertlen, $copylen, $distancecode, $code, $extra) {
		$inscode = encode_Command_functions::GetInsertLengthCode($insertlen);
		$copycode = encode_Command_functions::GetCopyLengthCode($copylen);
		$insnumextra = encode_Command_functions::$insextra[$inscode];
		$numextra = $insnumextra + encode_Command_functions::$copyextra[$copycode];
		$insextraval = $insertlen - encode_Command_functions::$insbase[$inscode];
		$copyextraval = $copylen - encode_Command_functions::$copybase[$copycode];
		$code[0] = encode_Command_functions::CombineLengthCodes($inscode, $copycode, $distancecode);
		$tmp = null;
		if(false !== $numextra < 0) {
			$tmp = false;
		} else {
			$tmp = 32 > $numextra;
		}
		if($tmp) {
			$extra[0] = $numextra << 16 | 0;
			$extra[1] = $copyextraval << $insnumextra | $insextraval;
		} else {
			$x = new haxe__Int64____Int64(0, 0);
			$value = $x;
			$x1 = new haxe__Int64____Int64($numextra >> 31, $numextra);
			$b = null;
			{
				$x2 = new haxe__Int64____Int64($x1->low << 16 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits, 0);
				$b = $x2;
			}
			$high = $value->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $value->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $value->low) < 0) {
				$high = $high + 1;
				$high = $high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x3 = new haxe__Int64____Int64($high, $low);
			$value = $x3;
			$x4 = new haxe__Int64____Int64($copyextraval >> 31, $copyextraval);
			$a = $x4;
			$b1 = $insnumextra;
			$b1 = $b1 & 63;
			$b2 = null;
			if($b1 === 0) {
				$x5 = new haxe__Int64____Int64($a->high, $a->low);
				$b2 = $x5;
			} else {
				if($b1 < 32) {
					$x6 = new haxe__Int64____Int64($a->high << $b1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits | _hx_shift_right($a->low, 32 - $b1), $a->low << $b1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits);
					$b2 = $x6;
				} else {
					$x7 = new haxe__Int64____Int64($a->low << $b1 - 32 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits, 0);
					$b2 = $x7;
				}
			}
			$high1 = $value->high + $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low1 = $value->low + $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low1, $value->low) < 0) {
				$high1 = $high1 + 1;
				$high1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x8 = new haxe__Int64____Int64($high1, $low1);
			$value = $x8;
			$x9 = new haxe__Int64____Int64($insextraval >> 31, $insextraval);
			$b3 = $x9;
			$high2 = $value->high + $b3->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$low2 = $value->low + $b3->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low2, $value->low) < 0) {
				$high2 = $high2 + 1;
				$high2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$x10 = new haxe__Int64____Int64($high2, $low2);
			$value = $x10;
			$x11 = $value->high;
			$x12 = new haxe__Int64____Int64($x11 >> 31, $x11);
			$x13 = $x12;
			if($x13->high !== $x13->low >> 31) {
				throw new HException("Overflow");
			}
			$extra[0] = $x13->low;
			$x14 = $value->low;
			$x15 = new haxe__Int64____Int64($x14 >> 31, $x14);
			$x16 = $x15;
			if($x16->high !== $x16->low >> 31) {
				throw new HException("Overflow");
			}
			$extra[1] = $x16->low;
		}
	}
	function __toString() { return 'encode.Command_functions'; }
}
encode_Command_functions::$insbase = (new _hx_array(array(0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 18, 26, 34, 50, 66, 98, 130, 194, 322, 578, 1090, 2114, 6210, 22594)));
encode_Command_functions::$insextra = (new _hx_array(array(0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 12, 14, 24)));
encode_Command_functions::$copybase = (new _hx_array(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 22, 30, 38, 54, 70, 102, 134, 198, 326, 582, 1094, 2118)));
encode_Command_functions::$copyextra = (new _hx_array(array(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 24)));
