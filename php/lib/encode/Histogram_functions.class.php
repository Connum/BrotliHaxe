<?php

// Generated by Haxe 3.4.0
class encode_Histogram_functions {
	public function __construct() {}
	static function HistogramLiteral() {
		return new encode_histogram_Histogram(256);
	}
	static $HistogramLiteralInt = 256;
	static function HistogramCommand() {
		return new encode_histogram_Histogram(704);
	}
	static $HistogramCommandInt = 704;
	static function HistogramDistance() {
		return new encode_histogram_Histogram(520);
	}
	static $HistogramDistanceInt = 520;
	static function HistogramBlockLength() {
		return new encode_histogram_Histogram(26);
	}
	static $HistogramBlockLengthInt = 26;
	static function HistogramContextMap() {
		return new encode_histogram_Histogram(272);
	}
	static $HistogramContextMapInt = 272;
	static function HistogramBlockType() {
		return new encode_histogram_Histogram(258);
	}
	static $HistogramBlockTypeInt = 258;
	static $kLiteralContextBits = 6;
	static $kDistanceContextBits = 2;
	static function BuildHistograms($cmds, $num_commands, $literal_split, $insert_and_copy_split, $dist_split, $ringbuffer, $start_pos, $mask, $prev_byte, $prev_byte2, $context_modes, $literal_histograms, $insert_and_copy_histograms, $copy_dist_histograms) {
		$pos = $start_pos;
		$literal_it = new encode_block_splitter_BlockSplitIterator($literal_split);
		$insert_and_copy_it = new encode_block_splitter_BlockSplitIterator($insert_and_copy_split);
		$dist_it = new encode_block_splitter_BlockSplitIterator($dist_split);
		{
			$_g1 = 0;
			while($_g1 < $num_commands) {
				$_g1 = $_g1 + 1;
				$cmd = $cmds[$_g1 - 1];
				$insert_and_copy_it->Next();
				_hx_array_get($insert_and_copy_histograms, $insert_and_copy_it->type_)->Add1($cmd->cmd_prefix_[0]);
				{
					$_g3 = 0;
					$_g2 = $cmd->insert_len_;
					while($_g3 < $_g2) {
						$_g3 = $_g3 + 1;
						$literal_it->Next();
						_hx_array_get($literal_histograms, ($literal_it->type_ << 6) + encode_Context::ContextFunction($prev_byte, $prev_byte2, $context_modes[$literal_it->type_]))->Add1($ringbuffer[$pos & $mask]);
						$prev_byte2 = $prev_byte;
						$prev_byte = $ringbuffer[$pos & $mask];
						$pos = $pos + 1;
					}
					unset($_g3,$_g2);
				}
				$pos = $pos + $cmd->copy_len_;
				if($cmd->copy_len_ > 0) {
					$prev_byte2 = $ringbuffer[$pos - 2 & $mask];
					$prev_byte = $ringbuffer[$pos - 1 & $mask];
					$a = $cmd->cmd_prefix_[0];
					$aNeg = $a < 0;
					$tmp = null;
					if($aNeg !== false) {
						$tmp = $aNeg;
					} else {
						$tmp = $a >= 128;
					}
					if($tmp) {
						$dist_it->Next();
						_hx_array_get($copy_dist_histograms, ($dist_it->type_ << 2) + $cmd->DistanceContext())->Add1($cmd->dist_prefix_[0]);
					}
					unset($tmp,$aNeg,$a);
				}
				unset($cmd);
			}
		}
	}
	function __toString() { return 'encode.Histogram_functions'; }
}
