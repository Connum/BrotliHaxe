<?php

// Generated by Haxe 3.4.0
class encode_backward_references_ZopfliCostModel {
	public function __construct() {}
	public function SetFromCommands($num_bytes, $position, $ringbuffer, $ringbuffer_mask, $commands, $num_commands, $last_insert_len) {
		$histogram_literal = FunctionMalloc::mallocInt(256);
		$histogram_cmd = FunctionMalloc::mallocInt(704);
		$histogram_dist = FunctionMalloc::mallocInt(520);
		$pos = $position - $last_insert_len;
		{
			$_g1 = 0;
			while($_g1 < $num_commands) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$inslength = _hx_array_get($commands, $i)->insert_len_;
				$copylength = _hx_array_get($commands, $i)->copy_len_;
				$distcode = _hx_array_get($commands, $i)->dist_prefix_[0];
				$cmdcode = _hx_array_get($commands, $i)->cmd_prefix_[0];
				$histogram_cmd[$cmdcode] = $histogram_cmd[$cmdcode] + 1;
				if($cmdcode >= 128) {
					$histogram_dist[$distcode] = $histogram_dist[$distcode] + 1;
				}
				{
					$_g3 = 0;
					while($_g3 < $inslength) {
						$_g3 = $_g3 + 1;
						{
							$_g4 = $ringbuffer[$pos + ($_g3 - 1) & $ringbuffer_mask];
							$histogram_literal[$_g4] = $histogram_literal[$_g4] + 1;
							unset($_g4);
						}
					}
					unset($_g3);
				}
				$pos = $pos + ($inslength + $copylength);
				unset($inslength,$i,$distcode,$copylength,$cmdcode);
			}
		}
		$cost_literal_ = new _hx_array(array());
		$this->Set($histogram_literal, $cost_literal_);
		$cost_literal = $cost_literal_[0];
		$cost_cmd = (new _hx_array(array($this->cost_cmd_)));
		$this->Set($histogram_cmd, $cost_cmd);
		$this->cost_cmd_ = $cost_cmd[0];
		$cost_dist = (new _hx_array(array($this->cost_dist_)));
		$this->Set($histogram_dist, $cost_dist);
		$this->cost_dist_ = $cost_dist[0];
		$this->min_cost_cmd_ = encode_Backward_references::$kInfinity;
		{
			$_g = 0;
			while($_g < 704) {
				$_g = $_g + 1;
				$this->min_cost_cmd_ = Math::min($this->min_cost_cmd_, $this->cost_cmd_[$_g - 1]);
			}
		}
		$this1 = (new _hx_array(array()));
		$this1->length = $num_bytes + 1;
		$this->literal_costs_ = $this1;
		$this->literal_costs_[0] = 0.0;
		{
			$_g11 = 0;
			while($_g11 < $num_bytes) {
				$_g11 = $_g11 + 1;
				$i1 = $_g11 - 1;
				$this->literal_costs_[$i1 + 1] = $this->literal_costs_->a[$i1] + $cost_literal[$ringbuffer[$position + $i1 & $ringbuffer_mask]];
				unset($i1);
			}
		}
	}
	public function SetFromLiteralCosts($num_bytes, $position, $literal_cost, $literal_cost_mask) {
		$this->literal_costs_ = FunctionMalloc::mallocFloat($num_bytes + 1);
		$this->literal_costs_[0] = 0.0;
		if($literal_cost !== null) {
			$_g1 = 0;
			while($_g1 < $num_bytes) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$this->literal_costs_[$i + 1] = $this->literal_costs_->a[$i] + $literal_cost[$position + $i & $literal_cost_mask];
				unset($i);
			}
		} else {
			$_g11 = 1;
			$_g = $num_bytes + 1;
			while($_g11 < $_g) {
				$_g11 = $_g11 + 1;
				$i1 = $_g11 - 1;
				$this->literal_costs_[$i1] = $i1 * 5.4;
				unset($i1);
			}
		}
		$this1 = (new _hx_array(array()));
		$this1->length = 704;
		$this->cost_cmd_ = $this1;
		$this2 = (new _hx_array(array()));
		$this2->length = 520;
		$this->cost_dist_ = $this2;
		{
			$_g2 = 0;
			while($_g2 < 704) {
				$_g2 = $_g2 + 1;
				$i2 = $_g2 - 1;
				$this->cost_cmd_[$i2] = encode_Fast_log::FastLog2(11 + $i2);
				unset($i2);
			}
		}
		{
			$_g3 = 0;
			while($_g3 < 520) {
				$_g3 = $_g3 + 1;
				$i3 = $_g3 - 1;
				$this->cost_dist_[$i3] = encode_Fast_log::FastLog2(20 + $i3);
				unset($i3);
			}
		}
		$this->min_cost_cmd_ = encode_Fast_log::FastLog2(11);
	}
	public function GetCommandCost($dist_code, $length_code, $insert_length) {
		$inscode = encode_Command_functions::GetInsertLengthCode($insert_length);
		$copycode = encode_Command_functions::GetCopyLengthCode($length_code);
		$cmdcode = encode_Command_functions::CombineLengthCodes($inscode, $copycode, $dist_code);
		$insnumextra = encode_Command_functions::$insextra[$inscode];
		$copynumextra = encode_Command_functions::$copyextra[$copycode];
		$dist_symbol = new _hx_array(array());
		$distextra = new _hx_array(array());
		encode_Command_functions::GetDistCode($dist_code, $dist_symbol, $distextra);
		$result = null;
		$int = $insnumextra + $copynumextra + (_hx_shift_right($distextra[0], 24));
		if($int < 0) {
			$result = 4294967296.0 + $int;
		} else {
			$result = $int + 0.0;
		}
		$result = $result + $this->cost_cmd_[$cmdcode];
		$aNeg = $cmdcode < 0;
		$tmp = null;
		if($aNeg !== false) {
			$tmp = $aNeg;
		} else {
			$tmp = $cmdcode >= 128;
		}
		if($tmp) {
			$result = $result + $this->cost_dist_[$dist_symbol[0]];
		}
		return $result;
	}
	public function GetLiteralCosts($from, $to) {
		return $this->literal_costs_->a[$to] - $this->literal_costs_[$from];
	}
	public function GetMinCostCmd() {
		return $this->min_cost_cmd_;
	}
	public function Set($histogram, $cost) {
		$this1 = (new _hx_array(array()));
		$this1->length = $histogram->length;
		$cost[0] = $this1;
		$sum = 0;
		{
			$_g1 = 0;
			$_g = $histogram->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$sum = $sum + $histogram[$_g1 - 1];
			}
		}
		$log2sum = encode_Fast_log::FastLog2($sum);
		{
			$_g11 = 0;
			$_g2 = $histogram->length;
			while($_g11 < $_g2) {
				$_g11 = $_g11 + 1;
				$i = $_g11 - 1;
				if($histogram[$i] === 0) {
					$cost[0][$i] = $log2sum + 2;
					continue;
				}
				{
					$val = $log2sum - encode_Fast_log::FastLog2($histogram[$i]);
					$cost[0][$i] = $val;
					unset($val);
				}
				if($cost[0][$i] < 1) {
					$cost[0][$i] = 1;
				}
				unset($i);
			}
		}
	}
	public $cost_cmd_;
	public $cost_dist_;
	public $literal_costs_;
	public $min_cost_cmd_;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.backward_references.ZopfliCostModel'; }
}
