<?php

// Generated by Haxe 3.4.0
class encode_backward_references_StartPosQueue {
	public function __construct($bits) {
		if(!php_Boot::$skip_constructor) {
		$this->mask_ = (1 << $bits) - 1;
		$this->q_ = FunctionMalloc::malloc2__encode_backward_references_Pair(_hx_qtype("encode.backward_references.Pair"), 1 << $bits);
		$this->idx_ = 0;
	}}
	public function Clear() {
		$this->idx_ = 0;
	}
	public function Push($pos, $costdiff) {
		{
			$val = new encode_backward_references_Pair($pos, $costdiff);
			$this->q_[$this->idx_ & $this->mask_] = $val;
		}
		$i = $this->idx_;
		while(true) {
			$tmp = null;
			if($i > 0) {
				$tmp = $i > $this->idx_ - $this->mask_;
			} else {
				$tmp = false;
			}
			if(!$tmp) {
				break;
			}
			if(_hx_array_get($this->q_, $i & $this->mask_)->second > _hx_array_get($this->q_, $i - 1 & $this->mask_)->second) {
				$t1 = _hx_array_get($this->q_, $i & $this->mask_)->first;
				$t2 = _hx_array_get($this->q_, $i & $this->mask_)->second;
				_hx_array_get($this->q_, $i & $this->mask_)->first = _hx_array_get($this->q_, $i - 1 & $this->mask_)->first;
				_hx_array_get($this->q_, $i & $this->mask_)->second = _hx_array_get($this->q_, $i - 1 & $this->mask_)->second;
				_hx_array_get($this->q_, $i - 1 & $this->mask_)->first = $t1;
				_hx_array_get($this->q_, $i - 1 & $this->mask_)->second = $t2;
				unset($t2,$t1);
			}
			$i = $i - 1;
			unset($tmp);
		}
		++$this->idx_;
	}
	public function size() {
		return Std::int(Math::min($this->idx_, $this->mask_ + 1));
	}
	public function GetStartPos($k) {
		return _hx_array_get($this->q_, $this->idx_ - $k - 1 & $this->mask_)->first;
	}
	public $mask_;
	public $q_;
	public $idx_;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.backward_references.StartPosQueue'; }
}
