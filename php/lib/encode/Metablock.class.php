<?php

// Generated by Haxe 3.4.0
class encode_Metablock {
	public function __construct() {}
	static function BuildMetaBlock($ringbuffer, $pos, $mask, $prev_byte, $prev_byte2, $cmds, $num_commands, $literal_context_mode, $mb) {
		encode_Block_splitter::SplitBlock($cmds, $num_commands, $ringbuffer, $pos & $mask, $mb->literal_split, $mb->command_split, $mb->distance_split);
		$literal_context_modes = new _hx_array(array());
		{
			$_g1 = 0;
			$_g = $mb->literal_split->num_types;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$literal_context_modes[$_g1 - 1] = $literal_context_mode;
			}
		}
		$num_literal_contexts = $mb->literal_split->num_types << 6;
		$num_distance_contexts = $mb->distance_split->num_types << 2;
		$literal_histograms = new _hx_array(array());
		{
			$_g11 = 0;
			while($_g11 < $num_literal_contexts) {
				$_g11 = $_g11 + 1;
				$literal_histograms->push(new encode_histogram_Histogram(encode_Histogram_functions::$HistogramLiteralInt));
			}
		}
		$mb->command_histograms = (new _hx_array(array()));
		{
			$_g12 = 0;
			$_g2 = $mb->command_split->num_types;
			while($_g12 < $_g2) {
				$_g12 = $_g12 + 1;
				$mb1 = $mb->command_histograms;
				$mb1->push(new encode_histogram_Histogram(encode_Histogram_functions::$HistogramCommandInt));
				unset($mb1);
			}
		}
		$distance_histograms = new _hx_array(array());
		{
			$_g13 = 0;
			while($_g13 < $num_distance_contexts) {
				$_g13 = $_g13 + 1;
				$distance_histograms->push(new encode_histogram_Histogram(encode_Histogram_functions::$HistogramDistanceInt));
			}
		}
		encode_Histogram_functions::BuildHistograms($cmds, $num_commands, $mb->literal_split, $mb->command_split, $mb->distance_split, $ringbuffer, $pos, $mask, $prev_byte, $prev_byte2, $literal_context_modes, $literal_histograms, $mb->command_histograms, $distance_histograms);
		{
			$_g14 = 0;
			$_g3 = $literal_histograms->length;
			while($_g14 < $_g3) {
				$_g14 = $_g14 + 1;
				$i = $_g14 - 1;
				$mb->literal_histograms[$i] = new encode_histogram_Histogram(encode_Histogram_functions::$HistogramLiteralInt);
				_hx_array_get($mb->literal_histograms, $i)->bit_cost_ = _hx_array_get($literal_histograms, $i)->bit_cost_;
				{
					$_g31 = 0;
					$_g21 = _hx_array_get($literal_histograms, $i)->data_->length;
					while($_g31 < $_g21) {
						$_g31 = $_g31 + 1;
						$a = $_g31 - 1;
						_hx_array_get($mb->literal_histograms, $i)->data_[$a] = _hx_array_get($literal_histograms, $i)->data_[$a];
						unset($a);
					}
					unset($_g31,$_g21);
				}
				_hx_array_get($mb->literal_histograms, $i)->kDataSize = _hx_array_get($literal_histograms, $i)->kDataSize;
				_hx_array_get($mb->literal_histograms, $i)->total_count_ = _hx_array_get($literal_histograms, $i)->total_count_;
				unset($i);
			}
		}
		$this1 = (new _hx_array(array()));
		$this1->length = 64 * $mb->literal_split->num_types;
		$mb->literal_context_map = $this1;
		encode_Cluster::ClusterHistograms($literal_histograms, 64, $mb->literal_split->num_types, 256, $mb->literal_histograms, encode_Histogram_functions::$HistogramLiteralInt, $mb->literal_context_map);
		{
			$_g15 = 0;
			$_g4 = $distance_histograms->length;
			while($_g15 < $_g4) {
				$_g15 = $_g15 + 1;
				$i1 = $_g15 - 1;
				$mb->distance_histograms[$i1] = new encode_histogram_Histogram(encode_Histogram_functions::$HistogramDistanceInt);
				_hx_array_get($mb->distance_histograms, $i1)->bit_cost_ = _hx_array_get($distance_histograms, $i1)->bit_cost_;
				{
					$_g32 = 0;
					$_g22 = _hx_array_get($distance_histograms, $i1)->data_->length;
					while($_g32 < $_g22) {
						$_g32 = $_g32 + 1;
						$a1 = $_g32 - 1;
						_hx_array_get($mb->distance_histograms, $i1)->data_[$a1] = _hx_array_get($distance_histograms, $i1)->data_[$a1];
						unset($a1);
					}
					unset($_g32,$_g22);
				}
				_hx_array_get($mb->distance_histograms, $i1)->kDataSize = _hx_array_get($distance_histograms, $i1)->kDataSize;
				_hx_array_get($mb->distance_histograms, $i1)->total_count_ = _hx_array_get($distance_histograms, $i1)->total_count_;
				unset($i1);
			}
		}
		$this2 = (new _hx_array(array()));
		$this2->length = 4 * $mb->distance_split->num_types;
		$mb->distance_context_map = $this2;
		encode_Cluster::ClusterHistograms($distance_histograms, 4, $mb->distance_split->num_types, 256, $mb->distance_histograms, encode_Histogram_functions::$HistogramDistanceInt, $mb->distance_context_map);
	}
	static function BuildMetaBlockGreedy($ringbuffer, $pos, $mask, $commands, $n_commands, $mb) {
		$num_literals = 0;
		{
			$_g1 = 0;
			while($_g1 < $n_commands) {
				$_g1 = $_g1 + 1;
				$num_literals = $num_literals + _hx_array_get($commands, $_g1 - 1)->insert_len_;
			}
		}
		$lit_blocks = new encode_metablock_BlockSplitter(encode_Histogram_functions::$HistogramLiteralInt, 256, 512, 400.0, $num_literals, $mb->literal_split, $mb->literal_histograms);
		$cmd_blocks = new encode_metablock_BlockSplitter(encode_Histogram_functions::$HistogramCommandInt, 704, 1024, 500.0, $n_commands, $mb->command_split, $mb->command_histograms);
		$dist_blocks = new encode_metablock_BlockSplitter(encode_Histogram_functions::$HistogramDistanceInt, 64, 512, 100.0, $n_commands, $mb->distance_split, $mb->distance_histograms);
		{
			$_g11 = 0;
			while($_g11 < $n_commands) {
				$_g11 = $_g11 + 1;
				$cmd = $commands[$_g11 - 1];
				$cmd_blocks->AddSymbol($cmd->cmd_prefix_[0]);
				{
					$_g3 = 0;
					$_g2 = $cmd->insert_len_;
					while($_g3 < $_g2) {
						$_g3 = $_g3 + 1;
						$lit_blocks->AddSymbol($ringbuffer[$pos & $mask]);
						$pos = $pos + 1;
					}
					unset($_g3,$_g2);
				}
				$pos = $pos + $cmd->copy_len_;
				$tmp = null;
				if($cmd->copy_len_ > 0) {
					$a = $cmd->cmd_prefix_[0];
					$aNeg = $a < 0;
					if($aNeg !== false) {
						$tmp = $aNeg;
					} else {
						$tmp = $a >= 128;
					}
					unset($aNeg,$a);
				} else {
					$tmp = false;
				}
				if($tmp) {
					$dist_blocks->AddSymbol($cmd->dist_prefix_[0]);
				}
				unset($tmp,$cmd);
			}
		}
		$lit_blocks->FinishBlock(true);
		$cmd_blocks->FinishBlock(true);
		$dist_blocks->FinishBlock(true);
	}
	static function BuildMetaBlockGreedyWithContexts($ringbuffer, $pos, $mask, $prev_byte, $prev_byte2, $literal_context_mode, $num_contexts, $static_context_map, $commands, $n_commands, $mb) {
		$num_literals = 0;
		{
			$_g1 = 0;
			while($_g1 < $n_commands) {
				$_g1 = $_g1 + 1;
				$num_literals = $num_literals + _hx_array_get($commands, $_g1 - 1)->insert_len_;
			}
		}
		$lit_blocks = new encode_metablock_ContextBlockSplitter(encode_Histogram_functions::$HistogramLiteralInt, 256, $num_contexts, 512, 400.0, $num_literals, $mb->literal_split, $mb->literal_histograms);
		$cmd_blocks = new encode_metablock_BlockSplitter(encode_Histogram_functions::$HistogramCommandInt, 704, 1024, 500.0, $n_commands, $mb->command_split, $mb->command_histograms);
		$dist_blocks = new encode_metablock_BlockSplitter(encode_Histogram_functions::$HistogramDistanceInt, 64, 512, 100.0, $n_commands, $mb->distance_split, $mb->distance_histograms);
		{
			$_g11 = 0;
			while($_g11 < $n_commands) {
				$_g11 = $_g11 + 1;
				$cmd = $commands[$_g11 - 1];
				$cmd_blocks->AddSymbol($cmd->cmd_prefix_[0]);
				{
					$_g3 = 0;
					$_g2 = $cmd->insert_len_;
					while($_g3 < $_g2) {
						$_g3 = $_g3 + 1;
						$literal = $ringbuffer[$pos & $mask];
						$lit_blocks->AddSymbol($literal, $static_context_map[encode_Context::ContextFunction($prev_byte, $prev_byte2, $literal_context_mode)]);
						$prev_byte2 = $prev_byte;
						$prev_byte = $literal;
						$pos = $pos + 1;
						unset($literal);
					}
					unset($_g3,$_g2);
				}
				$pos = $pos + $cmd->copy_len_;
				if($cmd->copy_len_ > 0) {
					$prev_byte2 = $ringbuffer[$pos - 2 & $mask];
					$prev_byte = $ringbuffer[$pos - 1 & $mask];
					if($cmd->cmd_prefix_[0] >= 128) {
						$dist_blocks->AddSymbol($cmd->dist_prefix_[0]);
					}
				}
				unset($cmd);
			}
		}
		$lit_blocks->FinishBlock(true);
		$cmd_blocks->FinishBlock(true);
		$dist_blocks->FinishBlock(true);
		$mb->literal_context_map = FunctionMalloc::mallocInt($mb->literal_split->num_types << 6);
		{
			$_g12 = 0;
			$_g = $mb->literal_split->num_types;
			while($_g12 < $_g) {
				$_g12 = $_g12 + 1;
				$i = $_g12 - 1;
				{
					$_g31 = 0;
					while($_g31 < 64) {
						$_g31 = $_g31 + 1;
						$j = $_g31 - 1;
						$mb->literal_context_map[($i << 6) + $j] = $i * $num_contexts + $static_context_map[$j];
						unset($j);
					}
					unset($_g31);
				}
				unset($i);
			}
		}
	}
	static function OptimizeHistograms($num_direct_distance_codes, $distance_postfix_bits, $mb) {
		{
			$_g1 = 0;
			$_g = $mb->literal_histograms->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				encode_Entropy_encode::OptimizeHuffmanCountsForRle(256, _hx_array_get($mb->literal_histograms, $_g1 - 1)->data_);
			}
		}
		{
			$_g11 = 0;
			$_g2 = $mb->command_histograms->length;
			while($_g11 < $_g2) {
				$_g11 = $_g11 + 1;
				encode_Entropy_encode::OptimizeHuffmanCountsForRle(704, _hx_array_get($mb->command_histograms, $_g11 - 1)->data_);
			}
		}
		$num_distance_codes = 16 + $num_direct_distance_codes + (48 << $distance_postfix_bits);
		{
			$_g12 = 0;
			$_g3 = $mb->distance_histograms->length;
			while($_g12 < $_g3) {
				$_g12 = $_g12 + 1;
				encode_Entropy_encode::OptimizeHuffmanCountsForRle($num_distance_codes, _hx_array_get($mb->distance_histograms, $_g12 - 1)->data_);
			}
		}
	}
	function __toString() { return 'encode.Metablock'; }
}
