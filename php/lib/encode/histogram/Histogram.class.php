<?php

// Generated by Haxe 3.4.0
class encode_histogram_Histogram {
	public function __construct($kDataSize) {
		if(!php_Boot::$skip_constructor) {
		$this->kDataSize = $kDataSize;
		$this1 = (new _hx_array(array()));
		$this1->length = $kDataSize;
		$this->data_ = $this1;
		$this->Clear();
	}}
	public function Clear() {
		DefaultFunctions::memset_Int($this->data_, 0, 0, $this->data_->length);
		$this->total_count_ = 0;
	}
	public function Add1($val) {
		$this->data_[$val] = $this->data_->a[$val] + 1;
		++$this->total_count_;
	}
	public function Remove($val) {
		$this->data_[$val] = $this->data_->a[$val] - 1;
		--$this->total_count_;
	}
	public function Add2($p, $p_off, $n) {
		$tmp = $this;
		$tmp->total_count_ = $tmp->total_count_ + $n;
		$n = $n + 1;
		while(true) {
			$n = $n - 1;
			if(!($n > 0)) {
				break;
			}
			$p_off = $p_off + 1;
			$_g = $p[$p_off - 1];
			$this->data_[$_g] = $this->data_->a[$_g] + 1;
			unset($_g);
		}
	}
	public function AddHistogram($v) {
		$tmp = $this;
		$tmp->total_count_ = $tmp->total_count_ + $v->total_count_;
		{
			$_g1 = 0;
			$_g = $this->kDataSize;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$this->data_[$i] = $this->data_->a[$i] + $v->data_[$i];
				unset($i);
			}
		}
	}
	public $kDataSize;
	public $data_;
	public $total_count_;
	public $bit_cost_;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'encode.histogram.Histogram'; }
}
