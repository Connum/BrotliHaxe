<?php

// Generated by Haxe 3.4.0
class FunctionMalloc {
	public function __construct() {}
	static function mallocArray_encode_hash_BackwardMatch($t, $a) {
		$arr = new _hx_array(array());
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				$arr[$_g1 - 1] = new encode_hash_BackwardMatch();
			}
		}
		return $arr;
	}
	static function malloc_encode_backward_references_ZopfliNode($t, $a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				{
					$val = new encode_backward_references_ZopfliNode();
					$arr[$_g1 - 1] = $val;
					unset($val);
				}
			}
		}
		return $arr;
	}
	static function malloc2__encode_backward_references_Pair($t, $a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				{
					$val = new encode_backward_references_Pair(0, 0);
					$arr[$_g1 - 1] = $val;
					unset($val);
				}
			}
		}
		return $arr;
	}
	static function malloc2_decode_huffman_HuffmanCode($t, $a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				{
					$val = new decode_huffman_HuffmanCode(0, 0);
					$arr[$_g1 - 1] = $val;
					unset($val);
				}
			}
		}
		return $arr;
	}
	static function malloc_decode_huffman_HuffmanTreeGroup($t, $a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				{
					$val = new decode_huffman_HuffmanTreeGroup();
					$arr[$_g1 - 1] = $val;
					unset($val);
				}
			}
		}
		return $arr;
	}
	static function mallocUInt($a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				$arr[$_g1 - 1] = 0;
			}
		}
		return $arr;
	}
	static function mallocInt($a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				$arr[$_g1 - 1] = 0;
			}
		}
		return $arr;
	}
	static function mallocFloat($a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				$arr[$_g1 - 1] = 0;
			}
		}
		return $arr;
	}
	static function mallocBool($a) {
		$this1 = (new _hx_array(array()));
		$this1->length = $a;
		$arr = $this1;
		{
			$_g1 = 0;
			while($_g1 < $a) {
				$_g1 = $_g1 + 1;
				$arr[$_g1 - 1] = false;
			}
		}
		return $arr;
	}
	function __toString() { return 'FunctionMalloc'; }
}
