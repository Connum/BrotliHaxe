// Generated by Haxe 3.4.0
package decode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Huffman extends haxe.lang.HxObject
{
	static
	{
		//line 16 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		decode.Huffman.BROTLI_HUFFMAN_MAX_TABLE_SIZE = 1080;
		//line 18 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		decode.Huffman.MAX_LENGTH = 15;
		//line 21 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		decode.Huffman.MAX_CODE_LENGTHS_SIZE = 704;
	}
	
	public Huffman(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Huffman()
	{
		//line 184 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		decode.Huffman.__hx_ctor_decode_Huffman(this);
	}
	
	
	public static void __hx_ctor_decode_Huffman(decode.Huffman __hx_this)
	{
	}
	
	
	public static int BROTLI_HUFFMAN_MAX_TABLE_SIZE;
	
	public static int MAX_LENGTH;
	
	public static int MAX_CODE_LENGTHS_SIZE;
	
	public static int GetNextKey(int key, int len)
	{
		//line 26 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int step = ( 1 << ( len - 1 ) );
		//line 27 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		while (( (( key & step )) > 0 ))
		{
			//line 28 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			step >>= 1;
		}
		
		//line 30 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		return ( (( key & ( step - 1 ) )) + step );
	}
	
	
	public static void ReplicateValue(decode.huffman.HuffmanCode[] table, int table_off, int step, int end, decode.huffman.HuffmanCode code)
	{
		//line 40 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		while (true)
		{
			//line 41 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			end -= step;
			//line 42 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			((decode.huffman.HuffmanCode[]) (table) )[( table_off + end )] = new decode.huffman.HuffmanCode(code.bits, code.value);
			//line 40 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			if ( ! ((( end > 0 ))) ) 
			{
				//line 40 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				break;
			}
			
		}
		
	}
	
	
	public static int NextTableBitSize(int[] count, int len, int root_bits)
	{
		//line 51 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int left = ( 1 << ( len - root_bits ) );
		//line 52 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		while (( len < 15 ))
		{
			//line 53 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			left -= ((int) (((int[]) (count) )[len]) );
			//line 54 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			if (( left <= 0 )) 
			{
				//line 54 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				break;
			}
			
			//line 55 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			 ++ len;
			//line 56 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			left <<= 1;
		}
		
		//line 58 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		return ( len - root_bits );
	}
	
	
	public static int BrotliBuildHuffmanTable(decode.huffman.HuffmanCode[] root_table, int root_table_off, int root_bits, int[] code_lengths, int code_lengths_size)
	{
		//line 67 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		decode.huffman.HuffmanCode code = new decode.huffman.HuffmanCode(0, 0);
		//line 69 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int table_off = 0;
		//line 71 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int symbol = 0;
		//line 72 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int key = 0;
		//line 73 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int step = 0;
		//line 74 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int low = 0;
		//line 75 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int mask = 0;
		//line 76 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int table_bits = 0;
		//line 77 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int table_size = 0;
		//line 78 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int total_size = 0;
		//line 79 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int[] sorted = haxe.root.FunctionMalloc.mallocInt(704);
		//line 80 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int[] count = haxe.root.FunctionMalloc.mallocInt(16);
		//line 81 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		int[] offset = haxe.root.FunctionMalloc.mallocInt(16);
		//line 83 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		if (( code_lengths_size > 704 )) 
		{
			//line 84 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			return 0;
		}
		
		//line 88 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		{
			//line 88 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			int _g1 = 0;
			//line 88 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			while (( _g1 < code_lengths_size ))
			{
				//line 88 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int symbol1 = _g1++;
				//line 89 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				{
					//line 89 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					int _g2 = ((int) (((int[]) (code_lengths) )[symbol1]) );
					//line 89 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					((int[]) (count) )[_g2] = ( ((int) (((int[]) (count) )[_g2]) ) + 1 );
				}
				
			}
			
		}
		
		//line 93 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		((int[]) (offset) )[1] = 0;
		//line 94 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		{
			//line 94 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			int _g = 1;
			//line 94 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			while (( _g < 15 ))
			{
				//line 94 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int len = _g++;
				//line 95 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				((int[]) (offset) )[( len + 1 )] = ( ((int) (((int[]) (offset) )[len]) ) + ((int) (((int[]) (count) )[len]) ) );
			}
			
		}
		
		//line 99 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		{
			//line 99 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			int _g11 = 0;
			//line 99 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			while (( _g11 < code_lengths_size ))
			{
				//line 99 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int symbol2 = _g11++;
				//line 100 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				if (( ((int) (((int[]) (code_lengths) )[symbol2]) ) != 0 )) 
				{
					//line 101 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					((int[]) (sorted) )[((int) (((int[]) (offset) )[((int) (((int[]) (code_lengths) )[symbol2]) )]) )] = symbol2;
					//line 102 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					{
						//line 102 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						int _g21 = ((int) (((int[]) (code_lengths) )[symbol2]) );
						//line 102 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						((int[]) (offset) )[_g21] = ( ((int) (((int[]) (offset) )[_g21]) ) + 1 );
					}
					
				}
				
			}
			
		}
		
		//line 107 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		table_off = root_table_off;
		//line 108 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		table_bits = root_bits;
		//line 109 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		table_size = ( 1 << root_bits );
		//line 110 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		total_size = table_size;
		//line 113 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		if (( ((int) (((int[]) (offset) )[15]) ) == 1 )) 
		{
			//line 114 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			code.bits = 0;
			//line 115 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			code.value = ((int) (((int[]) (sorted) )[0]) );
			//line 116 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			{
				//line 116 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int _g12 = 0;
				//line 116 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int _g3 = total_size;
				//line 116 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				while (( _g12 < _g3 ))
				{
					//line 116 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					int key1 = _g12++;
					//line 117 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					((decode.huffman.HuffmanCode[]) (root_table) )[( root_table_off + key1 )] = code;
				}
				
			}
			
			//line 119 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			return total_size;
		}
		
		//line 123 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		key = 0;
		//line 124 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		symbol = 0;
		//line 125 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		step = 2;
		//line 126 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		{
			//line 126 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			int _g13 = 1;
			//line 126 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			int _g4 = ( root_bits + 1 );
			//line 126 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			while (( _g13 < _g4 ))
			{
				//line 126 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int len1 = _g13++;
				//line 127 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				while (( ((int) (((int[]) (count) )[len1]) ) > 0 ))
				{
					//line 128 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					code.bits = len1;
					//line 129 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					code.value = ((int[]) (sorted) )[symbol++];
					//line 130 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					decode.Huffman.ReplicateValue(root_table, ( root_table_off + key ), step, table_size, code);
					//line 131 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					key = decode.Huffman.GetNextKey(key, len1);
					//line 132 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					((int[]) (count) )[len1] = ( ((int) (((int[]) (count) )[len1]) ) - 1 );
				}
				
				//line 134 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				step <<= 1;
			}
			
		}
		
		//line 138 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		mask = ( total_size - 1 );
		//line 139 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		low = -1;
		//line 140 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		step = 2;
		//line 141 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		{
			//line 141 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			int _g14 = ( root_bits + 1 );
			//line 141 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
			while (( _g14 < 16 ))
			{
				//line 141 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				int len2 = _g14++;
				//line 142 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				while (( ((int) (((int[]) (count) )[len2]) ) > 0 ))
				{
					//line 143 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					if (( (( key & mask )) != low )) 
					{
						//line 144 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						table_off += table_size;
						//line 145 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						table_bits = decode.Huffman.NextTableBitSize(count, len2, root_bits);
						//line 146 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						table_size = ( 1 << table_bits );
						//line 147 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						total_size += table_size;
						//line 148 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						low = ( key & mask );
						//line 149 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						((decode.huffman.HuffmanCode) (((decode.huffman.HuffmanCode[]) (root_table) )[( root_table_off + low )]) ).bits = ( table_bits + root_bits );
						//line 150 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
						((decode.huffman.HuffmanCode) (((decode.huffman.HuffmanCode[]) (root_table) )[( root_table_off + low )]) ).value = ( ( table_off - root_table_off ) - low );
					}
					
					//line 152 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					code.bits = ( len2 - root_bits );
					//line 153 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					code.value = ((int[]) (sorted) )[symbol++];
					//line 154 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					decode.Huffman.ReplicateValue(root_table, ( table_off + (( key >> root_bits )) ), step, table_size, code);
					//line 155 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					key = decode.Huffman.GetNextKey(key, len2);
					//line 156 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
					((int[]) (count) )[len2] = ( ((int) (((int[]) (count) )[len2]) ) - 1 );
				}
				
				//line 158 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
				step <<= 1;
			}
			
		}
		
		//line 161 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		return total_size;
	}
	
	
	public static void BrotliHuffmanTreeGroupInit(decode.huffman.HuffmanTreeGroup group, int alphabet_size, int ntrees)
	{
		//line 167 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		group.alphabet_size = alphabet_size;
		//line 168 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		group.num_htrees = ntrees;
		//line 169 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		group.codes = haxe.root.FunctionMalloc.malloc2_decode_huffman_HuffmanCode(decode.huffman.HuffmanCode.class, ( ntrees * 1080 ));
		//line 171 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		group.htrees = new haxe.root.Array<decode.huffman.HuffmanCode[]>();
		//line 172 "C:\\Users\\Dominik\\Brotli\\src\\decode\\Huffman.hx"
		group.htrees_off = new haxe.root.Array<java.lang.Object>();
	}
	
	
	public static void BrotliHuffmanTreeGroupRelease(decode.huffman.HuffmanTreeGroup group)
	{
	}
	
	
}


