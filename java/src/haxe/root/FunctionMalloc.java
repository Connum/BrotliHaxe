// Generated by Haxe 3.4.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class FunctionMalloc extends haxe.lang.HxObject
{
	public FunctionMalloc(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public FunctionMalloc()
	{
		//line 71 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		haxe.root.FunctionMalloc.__hx_ctor__FunctionMalloc(this);
	}
	
	
	public static void __hx_ctor__FunctionMalloc(haxe.root.FunctionMalloc __hx_this)
	{
	}
	
	
	public static haxe.root.Array<encode.hash.BackwardMatch> mallocArray_encode_hash_BackwardMatch(java.lang.Class t, int a)
	{
		//line 54 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		haxe.root.Array<encode.hash.BackwardMatch> arr = new haxe.root.Array<encode.hash.BackwardMatch>();
		//line 55 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 55 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 55 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 55 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 56 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				arr.__set(i, new encode.hash.BackwardMatch());
			}
			
		}
		
		//line 57 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static encode.backward_references.ZopfliNode[] malloc_encode_backward_references_ZopfliNode(java.lang.Class t, int a)
	{
		//line 48 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		encode.backward_references.ZopfliNode[] this1 = new encode.backward_references.ZopfliNode[a];
		//line 48 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		encode.backward_references.ZopfliNode[] arr = ((encode.backward_references.ZopfliNode[]) (this1) );
		//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 50 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((encode.backward_references.ZopfliNode[]) (arr) )[i] = new encode.backward_references.ZopfliNode();
			}
			
		}
		
		//line 51 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static encode.backward_references.Pair[] malloc2__encode_backward_references_Pair(java.lang.Class t, int a)
	{
		//line 66 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		encode.backward_references.Pair[] this1 = new encode.backward_references.Pair[a];
		//line 66 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		encode.backward_references.Pair[] arr = ((encode.backward_references.Pair[]) (this1) );
		//line 67 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 67 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 67 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 67 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 68 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((encode.backward_references.Pair[]) (arr) )[i] = new encode.backward_references.Pair(0, ((double) (0) ));
			}
			
		}
		
		//line 69 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static decode.huffman.HuffmanCode[] malloc2_decode_huffman_HuffmanCode(java.lang.Class t, int a)
	{
		//line 60 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		decode.huffman.HuffmanCode[] this1 = new decode.huffman.HuffmanCode[a];
		//line 60 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		decode.huffman.HuffmanCode[] arr = ((decode.huffman.HuffmanCode[]) (this1) );
		//line 61 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 61 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 61 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 61 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 62 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((decode.huffman.HuffmanCode[]) (arr) )[i] = new decode.huffman.HuffmanCode(0, 0);
			}
			
		}
		
		//line 63 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static decode.huffman.HuffmanTreeGroup[] malloc_decode_huffman_HuffmanTreeGroup(java.lang.Class t, int a)
	{
		//line 48 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		decode.huffman.HuffmanTreeGroup[] this1 = new decode.huffman.HuffmanTreeGroup[a];
		//line 48 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		decode.huffman.HuffmanTreeGroup[] arr = ((decode.huffman.HuffmanTreeGroup[]) (this1) );
		//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 49 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 50 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((decode.huffman.HuffmanTreeGroup[]) (arr) )[i] = new decode.huffman.HuffmanTreeGroup();
			}
			
		}
		
		//line 51 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static int[] mallocUInt(int a)
	{
		//line 24 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		int[] this1 = new int[a];
		//line 24 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		int[] arr = ((int[]) (this1) );
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 25 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 25 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 25 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 26 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((int[]) (arr) )[i] = 0;
			}
			
		}
		
		//line 27 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static int[] mallocInt(int a)
	{
		//line 30 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		int[] this1 = new int[a];
		//line 30 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		int[] arr = ((int[]) (this1) );
		//line 31 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 31 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 31 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 31 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 32 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((int[]) (arr) )[i] = 0;
			}
			
		}
		
		//line 33 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static double[] mallocFloat(int a)
	{
		//line 36 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		double[] this1 = new double[a];
		//line 36 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		double[] arr = ((double[]) (this1) );
		//line 37 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 37 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 37 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 37 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 38 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((double[]) (arr) )[i] = ((double) (0) );
			}
			
		}
		
		//line 39 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
	public static boolean[] mallocBool(int a)
	{
		//line 42 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		boolean[] this1 = new boolean[a];
		//line 42 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		boolean[] arr = ((boolean[]) (this1) );
		//line 43 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		{
			//line 43 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			int _g1 = 0;
			//line 43 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
			while (( _g1 < a ))
			{
				//line 43 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				int i = _g1++;
				//line 44 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
				((boolean[]) (arr) )[i] = false;
			}
			
		}
		
		//line 45 "C:\\Users\\Dominik\\Brotli\\src\\FunctionMalloc.hx"
		return arr;
	}
	
	
}


