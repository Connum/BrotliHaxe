// Generated by Haxe 3.4.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Main extends decode.Decode
{
	public static void main(String[] args)
	{
		Sys._args = args;
		{
			//line 1 "C:\\Users\\Dominik\\Brotli\\?"
			haxe.root.Main.main();
		}
	}
	
	public Main(haxe.lang.EmptyObject empty)
	{
		//line 37 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		super(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public Main()
	{
		//line 375 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Main.__hx_ctor__Main(this);
	}
	
	
	public static void __hx_ctor__Main(haxe.root.Main __hx_this)
	{
	}
	
	
	public static boolean ParseQuality(java.lang.String s, haxe.root.Array<java.lang.Object> quality)
	{
		//line 42 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		java.lang.Object i = haxe.root.Std.parseInt(s);
		//line 43 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (( ( haxe.lang.Runtime.compare(i, 0) >= 0 ) && ( haxe.lang.Runtime.compare(i, 11) <= 0 ) )) 
		{
			//line 44 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			quality.__set(0, i);
			//line 45 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			return true;
		}
		else
		{
			//line 47 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			return false;
		}
		
	}
	
	
	public static boolean ParseArgv(int argc, haxe.root.Array<java.lang.String> argv, haxe.root.Array<java.lang.String> input_path, haxe.root.Array<java.lang.String> output_path, haxe.root.Array<java.lang.Object> force, haxe.root.Array<java.lang.Object> quality, haxe.root.Array<java.lang.Object> decompress)
	{
		//line 56 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		boolean error = false;
		//line 57 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		force.__set(0, 0);
		//line 58 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		input_path.__set(0, "");
		//line 59 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		output_path.__set(0, "");
		//line 60 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (( argc > 0 )) 
		{
			//line 62 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			int argv0_len = argv.__get(0).length();
			//line 63 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			decompress.__set(0, ( (( ( argv0_len >= 5 ) && haxe.lang.Runtime.valEq(argv.__get(0), "unbro") )) ? (1) : (0) ));
		}
		else
		{
			//line 65 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			error = true;
		}
		
		//line 66 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		int k = 0;
		//line 67 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		int i = 0;
		//line 68 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if ( ! (error) ) 
		{
			//line 69 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			while (( i < argc ))
			{
				//line 70 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				k = i++;
				//line 71 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				if (( haxe.lang.Runtime.valEq("--force", argv.__get(k)) || haxe.lang.Runtime.valEq("-f", argv.__get(k)) )) 
				{
					//line 73 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					if (( ((int) (haxe.lang.Runtime.toInt(force.__get(0))) ) != 0 )) 
					{
						//line 74 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						error = true;
						//line 75 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						break;
					}
					
					//line 77 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					force.__set(0, 1);
					//line 78 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					continue;
				}
				else
				{
					//line 79 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					if (( ( haxe.lang.Runtime.valEq("--decompress", argv.__get(k)) || haxe.lang.Runtime.valEq("--uncompress", argv.__get(k)) ) || haxe.lang.Runtime.valEq("-d", argv.__get(k)) )) 
					{
						//line 82 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						decompress.__set(0, 1);
						//line 83 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						continue;
					}
					
				}
				
				//line 85 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				if (( k < ( argc - 1 ) )) 
				{
					//line 86 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					if (( ( haxe.lang.Runtime.valEq("--input", argv.__get(k)) || haxe.lang.Runtime.valEq("--in", argv.__get(k)) ) || haxe.lang.Runtime.valEq("-i", argv.__get(k)) )) 
					{
						//line 89 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						if ( ! (haxe.lang.Runtime.valEq(input_path.__get(0), "")) ) 
						{
							//line 90 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							error = true;
							//line 91 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							break;
						}
						
						//line 93 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						input_path.__set(0, argv.__get(( k + 1 )));
						//line 94 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						 ++ i;
						//line 95 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						continue;
					}
					else
					{
						//line 96 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
						if (( ( haxe.lang.Runtime.valEq("--output", argv.__get(k)) || haxe.lang.Runtime.valEq("--out", argv.__get(k)) ) || haxe.lang.Runtime.valEq("-o", argv.__get(k)) )) 
						{
							//line 99 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							if ( ! (haxe.lang.Runtime.valEq(output_path.__get(0), "")) ) 
							{
								//line 100 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
								error = true;
								//line 101 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
								break;
							}
							
							//line 103 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							output_path.__set(0, argv.__get(( k + 1 )));
							//line 104 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							 ++ i;
							//line 105 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							continue;
						}
						else
						{
							//line 106 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
							if (( haxe.lang.Runtime.valEq("--quality", argv.__get(k)) || haxe.lang.Runtime.valEq("-q", argv.__get(k)) )) 
							{
								//line 108 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
								if ( ! (haxe.root.Main.ParseQuality(argv.__get(( k + 1 )), quality)) ) 
								{
									//line 109 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
									error = true;
									//line 110 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
									break;
								}
								
								//line 112 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
								 ++ i;
								//line 113 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
								continue;
							}
							
						}
						
					}
					
				}
				
				//line 116 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				error = true;
				//line 117 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				break;
			}
			
		}
		
		//line 119 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (error) 
		{
			//line 120 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			java.lang.System.out.print(((java.lang.Object) ("Usage: [--force] [--quality n] [--decompress] [--input filename] [--output filename]\n") ));
			//line 123 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			return false;
		}
		
		//line 125 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		return true;
	}
	
	
	public static void main()
	{
		//line 141 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Array<java.lang.String> argv = haxe.root.Sys.args();
		//line 142 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		int argc = argv.length;
		//line 143 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Array<java.lang.String> input_path = new haxe.root.Array<java.lang.String>(new java.lang.String[]{""});
		//line 144 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Array<java.lang.String> output_path = new haxe.root.Array<java.lang.String>(new java.lang.String[]{""});
		//line 145 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Array<java.lang.Object> force = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
		//line 146 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Array<java.lang.Object> quality = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{11});
		//line 147 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		haxe.root.Array<java.lang.Object> decompress = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
		//line 148 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if ( ! (haxe.root.Main.ParseArgv(argc, argv, input_path, output_path, force, quality, decompress)) ) 
		{
			//line 150 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			return ;
		}
		
		//line 151 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if ( ! (sys.FileSystem.exists(input_path.__get(0))) ) 
		{
			//line 152 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			java.lang.System.out.print(((java.lang.Object) ("Input Filename doesn\'t exists") ));
			//line 153 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			return ;
		}
		
		//line 155 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (( sys.FileSystem.exists(output_path.__get(0)) && ( ((int) (haxe.lang.Runtime.toInt(force.__get(0))) ) == 0 ) )) 
		{
			//line 156 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			java.lang.System.out.print(((java.lang.Object) ("Output Filename can\'t overwrite") ));
			//line 157 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			return ;
		}
		
		//line 160 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		int[] dictionary = haxe.root.Brotli.OpenInputBinary("dictionary.txt");
		//line 161 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		double clock_start = ((double) (haxe.root.Date.now().date.getTime()) );
		//line 163 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		sys.io.FileInput fin = haxe.root.Brotli.OpenInputFile(input_path.__get(0));
		//line 167 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		sys.io.FileOutput fout = haxe.root.Brotli.OpenOutputFile(output_path.__get(0), ((int) (haxe.lang.Runtime.toInt(force.__get(0))) ));
		//line 168 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (( ((int) (haxe.lang.Runtime.toInt(decompress.__get(0))) ) > 0 )) 
		{
			//line 169 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			decode.Dictionary.kBrotliDictionary = dictionary;
			//line 170 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			haxe.root.Date.now().date.getTime();
			//line 172 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			decode.streams.BrotliInput input = decode.Streams.BrotliFileInput(fin);
			//line 179 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			decode.streams.BrotliOutput output = decode.Streams.BrotliFileOutput(fout);
			//line 180 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			if (( decode.Decode.BrotliDecompress(input, output) <= 0 )) 
			{
				//line 181 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				java.lang.System.out.print(((java.lang.Object) ("Error while decoding") ));
				//line 182 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				return ;
			}
			
		}
		else
		{
			//line 185 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			encode.Dictionary.kBrotliDictionary = dictionary;
			//line 186 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			int[] DictionaryHash = haxe.root.Brotli.OpenInputBinary("DictionaryHash.txt");
			//line 187 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			int[] DictionaryWords = haxe.root.Brotli.OpenInputBinary("DictionaryWords.txt");
			//line 188 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			int[] DictionaryBuckets = haxe.root.Brotli.OpenInputBinary("DictionaryBuckets.txt");
			//line 189 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			haxe.root.Array<java.lang.Object> kStaticDictionaryHash = encode.Dictionary_hash.kStaticDictionaryHash;
			//line 190 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			haxe.root.Array<java.lang.Object> kStaticDictionaryBuckets = encode.Static_dict_lut.kStaticDictionaryBuckets;
			//line 191 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			{
				//line 191 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				int _g = 0;
				//line 191 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				while (( _g < 32768 ))
				{
					//line 191 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					int i = _g++;
					//line 192 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					kStaticDictionaryHash.push(((int) (( ((int) (( ((int) (((int[]) (DictionaryHash) )[( ( i * 2 ) + 1 )]) ) << 8 )) ) | ((int) (((int[]) (DictionaryHash) )[( i * 2 )]) ) )) ));
					//line 193 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					kStaticDictionaryBuckets.push(((int) (( ((int) (( ((int) (( ((int) (((int[]) (DictionaryBuckets) )[( ( i * 3 ) + 2 )]) ) << 16 )) ) | ((int) (( ((int) (((int[]) (DictionaryBuckets) )[( ( i * 3 ) + 1 )]) ) << 8 )) ) )) ) | ((int) (((int[]) (DictionaryBuckets) )[( i * 3 )]) ) )) ));
				}
				
			}
			
			//line 196 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			haxe.root.Array<encode.static_dict_lut.DictWord> kStaticDictionaryWords = encode.Static_dict_lut.kStaticDictionaryWords;
			//line 197 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			{
				//line 197 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				int _g1 = 0;
				//line 197 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				while (( _g1 < 31704 ))
				{
					//line 197 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					int i1 = _g1++;
					//line 198 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					int len = ((int) (( ((int) (((int[]) (DictionaryWords) )[( ( i1 * 3 ) + 1 )]) ) >>> 3 )) );
					//line 199 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					int idx = ((int) (( ((int) (( (((int) (( ((int) (((int[]) (DictionaryWords) )[( ( i1 * 3 ) + 1 )]) ) & ((int) (7) ) )) )) << 8 )) ) | ((int) (((int[]) (DictionaryWords) )[( i1 * 3 )]) ) )) );
					//line 200 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					int transform = ((int) (((int[]) (DictionaryWords) )[( ( i1 * 3 ) + 2 )]) );
					//line 201 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
					kStaticDictionaryWords.push(new encode.static_dict_lut.DictWord(len, transform, idx));
				}
				
			}
			
			//line 203 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			encode.encode.BrotliParams params = new encode.encode.BrotliParams();
			//line 204 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			params.quality = ((int) (haxe.lang.Runtime.toInt(quality.__get(0))) );
			//line 205 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			haxe.root.Date.now().date.getTime();
			//line 207 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			encode.streams.BrotliIn input1 = new encode.streams.BrotliIn(fin, 65536);
			//line 214 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			encode.streams.BrotliOut output1 = new encode.streams.BrotliOut(((sys.io.FileOutput) (fout) ));
			//line 215 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			if ( ! (encode.Encode.BrotliCompress(params, input1, output1)) ) 
			{
				//line 216 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				java.lang.System.out.print(((java.lang.Object) ("Error while encoding") ));
				//line 217 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
				return ;
			}
			
		}
		
		//line 220 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		double clock_end = ((double) (haxe.root.Date.now().date.getTime()) );
		//line 221 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		double duration = ( (( clock_end - clock_start )) / 1000 );
		//line 223 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (( duration < 1e-9 )) 
		{
			//line 224 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			duration = 1e-9;
		}
		
		//line 226 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		double uncompressed_bytes = ( (( ((int) (haxe.lang.Runtime.toInt(decompress.__get(0))) ) > 0 )) ? (((double) (fout.tell()) )) : (((double) (fin.tell()) )) );
		//line 227 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		double uncompressed_bytes_in_MB = ( uncompressed_bytes / 1048576. );
		//line 228 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		java.lang.String log = ( ( ( ( ( ( ( ( ( ( "Filename:" + output_path.__get(0) ) + " " ) + (( (( ((int) (haxe.lang.Runtime.toInt(decompress.__get(0))) ) > 0 )) ? ("de") : ("") )) ) + "compressed size:" ) + fout.tell() ) + " " ) + (( (( ((int) (haxe.lang.Runtime.toInt(decompress.__get(0))) ) > 0 )) ? ("de") : ("") )) ) + "coding time (ms):" ) + haxe.lang.Runtime.toString((( clock_end - clock_start ))) ) + " " );
		//line 229 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		if (( ((int) (haxe.lang.Runtime.toInt(decompress.__get(0))) ) > 0 )) 
		{
			//line 230 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			log += "Brotli decompression speed: ";
		}
		else
		{
			//line 232 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
			log += "Brotli compression speed: ";
		}
		
		//line 234 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		log += ( haxe.lang.Runtime.toString(( ((double) (((int) (( ( uncompressed_bytes_in_MB / duration ) * 100 )) )) ) / 100 )) + " MB/s" );
		//line 235 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		java.lang.System.out.print(((java.lang.Object) (log) ));
		//line 262 "C:\\Users\\Dominik\\Brotli\\src\\Main.hx"
		return ;
	}
	
	
}


