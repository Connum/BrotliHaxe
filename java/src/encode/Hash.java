// Generated by Haxe 3.4.0
package encode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Hash extends haxe.lang.HxObject
{
	static
	{
		//line 12 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		encode.Hash.kDistanceCacheIndex = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1});
		//line 15 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		encode.Hash.kDistanceCacheOffset = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3});
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		encode.Hash.kHashMul32 = 506832829;
		//line 68 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		encode.Hash.kMaxZopfliLen = 325;
	}
	
	public Hash(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Hash()
	{
		//line 71 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		encode.Hash.__hx_ctor_encode_Hash(this);
	}
	
	
	public static void __hx_ctor_encode_Hash(encode.Hash __hx_this)
	{
	}
	
	
	public static haxe.root.Array<java.lang.Object> kDistanceCacheIndex;
	
	public static haxe.root.Array<java.lang.Object> kDistanceCacheOffset;
	
	public static int kHashMul32;
	
	public static int Hash_(int kShiftBits, int[] data, int data_off)
	{
		//line 29 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		int h = ( ((int) (( (((int) (( ((int) (( ((int) (( ((int) (( ((int) (((int[]) (data) )[( data_off + 3 )]) ) << 24 )) ) | ((int) (( ((int) (((int[]) (data) )[( data_off + 2 )]) ) << 16 )) ) )) ) | ((int) (( ((int) (((int[]) (data) )[( data_off + 1 )]) ) << 8 )) ) )) ) | ((int) (((int[]) (data) )[data_off]) ) )) )) * ((int) (encode.Hash.kHashMul32) ) )) ) & ((int) (-1) ) );
		//line 35 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		return ((int) (( ((int) (h) ) >>> ( 32 - kShiftBits ) )) );
	}
	
	
	public static double BackwardReferenceScore(int copy_length, int backward_reference_offset)
	{
		//line 54 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		return ( ( 5.4 * copy_length ) - ( 1.20 * encode.Fast_log.Log2Floor(backward_reference_offset) ) );
	}
	
	
	public static double BackwardReferenceScoreUsingLastDistance(int copy_length, int distance_short_code)
	{
		//line 59 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		haxe.root.Array<java.lang.Object> kDistanceShortCodeBitCost = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.6) ), ((java.lang.Object) (0.95) ), ((java.lang.Object) (1.17) ), ((java.lang.Object) (1.27) ), ((java.lang.Object) (0.93) ), ((java.lang.Object) (0.93) ), ((java.lang.Object) (0.96) ), ((java.lang.Object) (0.96) ), ((java.lang.Object) (0.99) ), ((java.lang.Object) (0.99) ), ((java.lang.Object) (1.05) ), ((java.lang.Object) (1.05) ), ((java.lang.Object) (1.15) ), ((java.lang.Object) (1.15) ), ((java.lang.Object) (1.25) ), ((java.lang.Object) (1.25) )});
		//line 64 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Hash.hx"
		return ( ( 5.4 * copy_length ) - ((double) (haxe.lang.Runtime.toDouble(kDistanceShortCodeBitCost.__get(distance_short_code))) ) );
	}
	
	
	public static int kMaxZopfliLen;
	
}


