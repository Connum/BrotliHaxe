// Generated by Haxe 3.4.0
package encode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Bit_cost extends haxe.lang.HxObject
{
	public Bit_cost(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Bit_cost()
	{
		//line 127 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		encode.Bit_cost.__hx_ctor_encode_Bit_cost(this);
	}
	
	
	public static void __hx_ctor_encode_Bit_cost(encode.Bit_cost __hx_this)
	{
	}
	
	
	public static double BitsEntropy(int[] population, int population_off, int size)
	{
		//line 15 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int sum = 0;
		//line 16 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		double retval = ((double) (0) );
		//line 18 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int population_end_off = ( population_off + size );
		//line 19 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int p = 0;
		//line 20 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( (( size & 1 )) > 0 )) 
		{
			//line 21 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			p = ((int[]) (population) )[population_off++];
			//line 22 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			sum = p;
			//line 23 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			retval -= ( p * encode.Fast_log.FastLog2(p) );
		}
		
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		while (( population_off < population_end_off ))
		{
			//line 26 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			p = ((int[]) (population) )[population_off++];
			//line 27 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			sum += p;
			//line 28 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			retval -= ( p * encode.Fast_log.FastLog2(p) );
			//line 29 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			p = ((int[]) (population) )[population_off++];
			//line 30 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			sum += p;
			//line 31 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			retval -= ( p * encode.Fast_log.FastLog2(p) );
		}
		
		//line 33 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( sum > 0 )) 
		{
			//line 33 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			retval += ( sum * encode.Fast_log.FastLog2(sum) );
		}
		
		//line 34 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( retval < sum )) 
		{
			//line 36 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			retval = ((double) (sum) );
		}
		
		//line 38 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		return retval;
	}
	
	
	public static double PopulationCost(encode.histogram.Histogram histogram)
	{
		//line 42 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int kSize = ((int[]) (histogram.data_) ).length;
		//line 43 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( histogram.total_count_ == 0 )) 
		{
			//line 44 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			return ((double) (12) );
		}
		
		//line 46 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int count = 0;
		//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		{
			//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			int _g1 = 0;
			//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			while (( _g1 < kSize ))
			{
				//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				int i = _g1++;
				//line 48 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				if (( ((int[]) (histogram.data_) )[i] > 0 )) 
				{
					//line 49 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					 ++ count;
				}
				
			}
			
		}
		
		//line 52 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( count == 1 )) 
		{
			//line 53 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			return ((double) (12) );
		}
		
		//line 55 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( count == 2 )) 
		{
			//line 56 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			return ((double) (( 20 + histogram.total_count_ )) );
		}
		
		//line 58 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		double bits = ((double) (0) );
		//line 59 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int[] depth = haxe.root.FunctionMalloc.mallocUInt(kSize);
		//line 60 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		if (( count <= 4 )) 
		{
			//line 62 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			encode.Entropy_encode.CreateHuffmanTree(histogram.data_, 0, kSize, 15, depth, 0);
			//line 63 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			{
				//line 63 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				int _g11 = 0;
				//line 63 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				while (( _g11 < kSize ))
				{
					//line 63 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					int i1 = _g11++;
					//line 64 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					int _int = ((int) (( ((int) (((int[]) (histogram.data_) )[i1]) ) * ((int) (((int[]) (depth) )[i1]) ) )) );
					//line 64 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					bits = ( (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) + bits );
				}
				
			}
			
			//line 66 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			if (( count == 3 )) 
			{
				//line 66 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				return ( bits + 28 );
			}
			else
			{
				//line 66 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				return ( bits + 37 );
			}
			
		}
		
		//line 72 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int max_depth = 1;
		//line 73 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int[] depth_histo = haxe.root.FunctionMalloc.mallocInt(18);
		//line 74 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		double log2total = encode.Fast_log.FastLog2(histogram.total_count_);
		//line 75 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		int i2 = 0;
		//line 76 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		while (( i2 < kSize ))
		{
			//line 77 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
			if (( ((int[]) (histogram.data_) )[i2] > 0 )) 
			{
				//line 80 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				double log2p = ( log2total - encode.Fast_log.FastLog2(((int[]) (histogram.data_) )[i2]) );
				//line 82 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				int depth1 = ((int) (( log2p + 0.5 )) );
				//line 83 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				bits += ( ((int[]) (histogram.data_) )[i2] * log2p );
				//line 84 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				if (( depth1 > 15 )) 
				{
					//line 85 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					depth1 = 15;
				}
				
				//line 87 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				if (( depth1 > max_depth )) 
				{
					//line 88 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					max_depth = depth1;
				}
				
				//line 90 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				{
					//line 90 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					int _g = depth1;
					//line 90 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					((int[]) (depth_histo) )[_g] = ( ((int) (((int[]) (depth_histo) )[_g]) ) + 1 );
				}
				
				//line 91 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				 ++ i2;
			}
			else
			{
				//line 95 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				int reps = 1;
				//line 96 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				int k = ( i2 + 1 );
				//line 97 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				while (( ( k < kSize ) && ( ((int[]) (histogram.data_) )[k] == 0 ) ))
				{
					//line 98 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					 ++ reps;
					//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					 ++ k;
				}
				
				//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				i2 += reps;
				//line 102 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				if (( i2 == kSize )) 
				{
					//line 105 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					break;
				}
				
				//line 107 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
				if (( reps < 3 )) 
				{
					//line 108 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					((int[]) (depth_histo) )[0] = ( ((int) (((int[]) (depth_histo) )[0]) ) + reps );
				}
				else
				{
					//line 110 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					reps -= 2;
					//line 111 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
					while (( reps > 0 ))
					{
						//line 112 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
						((int[]) (depth_histo) )[17] = ( ((int) (((int[]) (depth_histo) )[17]) ) + 1 );
						//line 114 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
						bits += ((double) (3) );
						//line 115 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
						reps >>= 3;
					}
					
				}
				
			}
			
		}
		
		//line 121 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		bits += ((double) (( 18 + ( 2 * max_depth ) )) );
		//line 123 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		bits += encode.Bit_cost.BitsEntropy(depth_histo, 0, 18);
		//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Bit_cost.hx"
		return bits;
	}
	
	
}


