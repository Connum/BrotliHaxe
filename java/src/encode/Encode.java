// Generated by Haxe 3.4.0
package encode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Encode extends haxe.lang.HxObject
{
	static
	{
		//line 17 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMaxWindowBits = 24;
		//line 18 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMinWindowBits = 16;
		//line 19 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMinInputBlockBits = 16;
		//line 20 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMaxInputBlockBits = 24;
		//line 22 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMinUTF8Ratio = 0.75;
		//line 23 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMinQualityForBlockSplit = 4;
		//line 24 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMinQualityForContextModeling = 5;
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.kMinQualityForOptimizeHistograms = 4;
	}
	
	public Encode(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Encode()
	{
		//line 221 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.Encode.__hx_ctor_encode_Encode(this);
	}
	
	
	public static void __hx_ctor_encode_Encode(encode.Encode __hx_this)
	{
	}
	
	
	public static int kMaxWindowBits;
	
	public static int kMinWindowBits;
	
	public static int kMinInputBlockBits;
	
	public static int kMaxInputBlockBits;
	
	public static double kMinUTF8Ratio;
	
	public static int kMinQualityForBlockSplit;
	
	public static int kMinQualityForContextModeling;
	
	public static int kMinQualityForOptimizeHistograms;
	
	public static int ParseAsUTF8(haxe.root.Array<java.lang.Object> symbol, int[] input, int input_off, int size)
	{
		//line 30 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (128) ) )) )) == 0 )) 
		{
			//line 31 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			symbol.__set(0, ((int) (((int[]) (input) )[input_off]) ));
			//line 32 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(symbol.__get(0))) ) > 0 )) 
			{
				//line 33 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				return 1;
			}
			
		}
		
		//line 37 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( ( ( size > 1 ) && ( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (224) ) )) )) == 192 ) ) && ( (((int) (( ((int) (((int[]) (input) )[( input_off + 1 )]) ) & ((int) (192) ) )) )) == 128 ) )) 
		{
			//line 40 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			symbol.__set(0, ((int) (( ((int) (( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (31) ) )) )) << 6 )) ) | ((int) (( ((int) (((int[]) (input) )[( input_off + 1 )]) ) & ((int) (63) ) )) ) )) ));
			//line 42 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(symbol.__get(0))) ) > 127 )) 
			{
				//line 43 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				return 2;
			}
			
		}
		
		//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( ( ( ( size > 2 ) && ( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (240) ) )) )) == 224 ) ) && ( (((int) (( ((int) (((int[]) (input) )[( input_off + 1 )]) ) & ((int) (192) ) )) )) == 128 ) ) && ( (((int) (( ((int) (((int[]) (input) )[( input_off + 2 )]) ) & ((int) (192) ) )) )) == 128 ) )) 
		{
			//line 51 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			symbol.__set(0, ((int) (( ((int) (( ((int) (( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (15) ) )) )) << 12 )) ) | ((int) (( (((int) (( ((int) (((int[]) (input) )[( input_off + 1 )]) ) & ((int) (63) ) )) )) << 6 )) ) )) ) | ((int) (( ((int) (((int[]) (input) )[( input_off + 2 )]) ) & ((int) (63) ) )) ) )) ));
			//line 54 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(symbol.__get(0))) ) > 2047 )) 
			{
				//line 55 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				return 3;
			}
			
		}
		
		//line 59 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( ( ( ( ( size > 3 ) && ( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (248) ) )) )) == 240 ) ) && ( (((int) (( ((int) (((int[]) (input) )[( input_off + 1 )]) ) & ((int) (192) ) )) )) == 128 ) ) && ( (((int) (( ((int) (((int[]) (input) )[( input_off + 2 )]) ) & ((int) (192) ) )) )) == 128 ) ) && ( (((int) (( ((int) (((int[]) (input) )[( input_off + 3 )]) ) & ((int) (192) ) )) )) == 128 ) )) 
		{
			//line 64 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			symbol.__set(0, ((int) (( ((int) (( ((int) (( ((int) (( (((int) (( ((int) (((int[]) (input) )[input_off]) ) & ((int) (7) ) )) )) << 18 )) ) | ((int) (( (((int) (( ((int) (((int[]) (input) )[( input_off + 1 )]) ) & ((int) (63) ) )) )) << 12 )) ) )) ) | ((int) (( (((int) (( ((int) (((int[]) (input) )[( input_off + 2 )]) ) & ((int) (63) ) )) )) << 6 )) ) )) ) | ((int) (( ((int) (((int[]) (input) )[( input_off + 3 )]) ) & ((int) (63) ) )) ) )) ));
			//line 68 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( ( ((int) (haxe.lang.Runtime.toInt(symbol.__get(0))) ) > 65535 ) && ( ((int) (haxe.lang.Runtime.toInt(symbol.__get(0))) ) <= 1114111 ) )) 
			{
				//line 69 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				return 4;
			}
			
		}
		
		//line 73 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		symbol.__set(0, ((int) (( ((int) (1114112) ) | ((int) (((int[]) (input) )[input_off]) ) )) ));
		//line 74 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		return 1;
	}
	
	
	public static boolean IsMostlyUTF8(int[] data, int data_off, int length, double min_fraction)
	{
		//line 80 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int size_utf8 = 0;
		//line 81 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int pos = 0;
		//line 82 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		while (( pos < length ))
		{
			//line 83 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			haxe.root.Array<java.lang.Object> symbol = new haxe.root.Array<java.lang.Object>();
			//line 84 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			int bytes_read = encode.Encode.ParseAsUTF8(symbol, data, ( data_off + pos ), ( length - pos ));
			//line 85 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			pos += bytes_read;
			//line 86 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(symbol.__get(0))) ) < 1114112 )) 
			{
				//line 86 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				size_utf8 += bytes_read;
			}
			
		}
		
		//line 88 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		return ( size_utf8 > ( min_fraction * length ) );
	}
	
	
	public static void RecomputeDistancePrefixes(haxe.root.Array<encode.command.Command> cmds, int num_commands, int num_direct_distance_codes, int distance_postfix_bits)
	{
		//line 95 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( ( num_direct_distance_codes == 0 ) && ( distance_postfix_bits == 0 ) )) 
		{
			//line 97 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			return ;
		}
		
		//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		{
			//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			int _g1 = 0;
			//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			while (( _g1 < num_commands ))
			{
				//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				int i = _g1++;
				//line 100 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				encode.command.Command cmd = cmds.__get(i);
				//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				boolean tmp = false;
				//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				if (( cmd.copy_len_ > 0 )) 
				{
					//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					int a = ((int) (haxe.lang.Runtime.toInt(cmd.cmd_prefix_.__get(0))) );
					//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					boolean aNeg = ( ((int) (a) ) < 0 );
					//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					if (( aNeg != false )) 
					{
						//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						tmp = aNeg;
					}
					else
					{
						//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						tmp = ( ((int) (a) ) >= ((int) (128) ) );
					}
					
				}
				else
				{
					//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					tmp = false;
				}
				
				//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				if (tmp) 
				{
					//line 102 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					encode.Prefix.PrefixEncodeCopyDistance(cmd.DistanceCode(), num_direct_distance_codes, distance_postfix_bits, cmd.dist_prefix_, cmd.dist_extra_);
				}
				
			}
			
		}
		
	}
	
	
	public static void DecideOverLiteralContextModeling(int[] input, int start_pos, int length, int mask, int quality, haxe.root.Array<java.lang.Object> literal_context_mode, haxe.root.Array<java.lang.Object> num_literal_contexts, haxe.root.Array<haxe.root.Array<java.lang.Object>> literal_context_map)
	{
		//line 119 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( ( quality < encode.Encode.kMinQualityForContextModeling ) || ( length < 64 ) )) 
		{
			//line 120 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			return ;
		}
		
		//line 129 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int end_pos = ( start_pos + length );
		//line 130 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		while (( ( start_pos + 64 ) < end_pos ))
		{
			//line 131 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			int stride_end_pos = ( start_pos + 64 );
			//line 132 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			int prev = ((int) (((int[]) (input) )[( start_pos & mask )]) );
			//line 133 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			{
				//line 133 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				int _g1 = ( start_pos + 1 );
				//line 133 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				while (( _g1 < stride_end_pos ))
				{
					//line 133 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					int pos = _g1++;
					//line 134 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					int literal = ((int) (((int[]) (input) )[( pos & mask )]) );
					//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					boolean tmp = false;
					//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					boolean tmp1 = false;
					//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					boolean bNeg = ( ((int) (prev) ) < 0 );
					//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					if (( (( false != bNeg )) ? (false) : (( ((int) (128) ) > ((int) (prev) ) )) )) 
					{
						//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						tmp1 = ( (((int) (( ((int) (literal) ) & ((int) (192) ) )) )) == 128 );
					}
					else
					{
						//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						tmp1 = false;
					}
					
					//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					if ( ! (tmp1) ) 
					{
						//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						boolean aNeg = ( ((int) (prev) ) < 0 );
						//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						if (( (( aNeg != false )) ? (aNeg) : (( ((int) (prev) ) >= ((int) (192) ) )) )) 
						{
							//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
							tmp = ( (((int) (( ((int) (literal) ) & ((int) (192) ) )) )) != 128 );
						}
						else
						{
							//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
							tmp = false;
						}
						
					}
					else
					{
						//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						tmp = true;
					}
					
					//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					if (tmp) 
					{
						//line 137 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
						return ;
					}
					
					//line 139 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
					prev = literal;
				}
				
			}
			
			//line 141 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			start_pos += 4096;
		}
		
		//line 143 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		literal_context_mode.__set(0, 2);
		//line 148 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		haxe.root.Array<java.lang.Object> kStaticContextMap = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
		//line 155 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		num_literal_contexts.__set(0, 2);
		//line 156 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		literal_context_map.__set(0, kStaticContextMap);
	}
	
	
	public static int CopyOneBlockToRingBuffer(java.lang.Object r, encode.encode.BrotliCompressor compressor)
	{
		//line 161 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int block_size = compressor.input_block_size();
		//line 162 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		haxe.root.Array<java.lang.Object> bytes_read = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
		//line 163 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int[] data = ((int[]) (((java.lang.Object) (haxe.lang.Runtime.callField(r, "Read", new haxe.root.Array(new java.lang.Object[]{block_size, bytes_read}))) )) );
		//line 164 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( data == null )) 
		{
			//line 165 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			return 0;
		}
		
		//line 167 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		compressor.CopyInputToRingBuffer(((int) (haxe.lang.Runtime.toInt(bytes_read.__get(0))) ), data);
		//line 172 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int remaining = ((int) (( ((int) (block_size) ) - ((int) (haxe.lang.Runtime.toInt(bytes_read.__get(0))) ) )) );
		//line 173 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		while (( remaining > 0 ))
		{
			//line 174 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			haxe.root.Array<java.lang.Object> more_bytes_read = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 175 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			data = ((int[]) (((java.lang.Object) (haxe.lang.Runtime.callField(r, "Read", new haxe.root.Array(new java.lang.Object[]{remaining, more_bytes_read}))) )) );
			//line 176 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( data == null )) 
			{
				//line 177 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				break;
			}
			
			//line 179 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			compressor.CopyInputToRingBuffer(((int) (haxe.lang.Runtime.toInt(more_bytes_read.__get(0))) ), data);
			//line 180 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			bytes_read.__set(0, ((int) (( ((int) (haxe.lang.Runtime.toInt(bytes_read.__get(0))) ) + ((int) (haxe.lang.Runtime.toInt(more_bytes_read.__get(0))) ) )) ));
			//line 181 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			remaining = ((int) (( ((int) (remaining) ) - ((int) (haxe.lang.Runtime.toInt(more_bytes_read.__get(0))) ) )) );
		}
		
		//line 183 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		return ((int) (haxe.lang.Runtime.toInt(bytes_read.__get(0))) );
	}
	
	
	public static boolean BrotliInIsFinished(java.lang.Object r)
	{
		//line 187 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		haxe.root.Array<java.lang.Object> read_bytes = new haxe.root.Array<java.lang.Object>();
		//line 188 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		return ( ((java.lang.Object) (haxe.lang.Runtime.callField(r, "Read", new haxe.root.Array(new java.lang.Object[]{0, read_bytes}))) ) == null );
	}
	
	
	public static boolean BrotliCompress(encode.encode.BrotliParams params, java.lang.Object input, java.lang.Object output)
	{
		//line 193 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		return encode.Encode.BrotliCompressWithCustomDictionary(0, null, params, input, output);
	}
	
	
	public static boolean BrotliCompressWithCustomDictionary(int dictsize, int[] dict, encode.encode.BrotliParams params, java.lang.Object input, java.lang.Object output)
	{
		//line 199 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		int in_bytes = 0;
		//line 200 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		haxe.root.Array<java.lang.Object> out_bytes = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
		//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		haxe.root.Array<int[]> out = new haxe.root.Array<int[]>();
		//line 202 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		boolean final_block = false;
		//line 203 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		encode.encode.BrotliCompressor compressor = new encode.encode.BrotliCompressor(((encode.encode.BrotliParams) (params) ));
		//line 204 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		if (( dictsize != 0 )) 
		{
			//line 204 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			compressor.BrotliSetCustomDictionary(dictsize, dict);
		}
		
		//line 205 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		while ( ! (final_block) )
		{
			//line 206 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			in_bytes = encode.Encode.CopyOneBlockToRingBuffer(input, compressor);
			//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( in_bytes != 0 )) 
			{
				//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				final_block = encode.Encode.BrotliInIsFinished(input);
			}
			else
			{
				//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				final_block = true;
			}
			
			//line 208 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			out_bytes.__set(0, 0);
			//line 209 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if ( ! (compressor.WriteBrotliData(final_block, false, out_bytes, out)) ) 
			{
				//line 212 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				return false;
			}
			
			//line 214 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
			if (( ( ((int) (haxe.lang.Runtime.toInt(out_bytes.__get(0))) ) > 0 ) && ( ! (haxe.lang.Runtime.toBool(((java.lang.Object) (haxe.lang.Runtime.callField(output, "Write", new haxe.root.Array(new java.lang.Object[]{out.__get(0), ((int) (haxe.lang.Runtime.toInt(out_bytes.__get(0))) )}))) ))) ) )) 
			{
				//line 215 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
				return false;
			}
			
		}
		
		//line 218 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Encode.hx"
		return true;
	}
	
	
}


