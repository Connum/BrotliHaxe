// Generated by Haxe 3.4.0
package encode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Entropy_encode extends haxe.lang.HxObject
{
	static
	{
		//line 14 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		encode.Entropy_encode.kCodeLengthCodes = 18;
	}
	
	public Entropy_encode(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Entropy_encode()
	{
		//line 491 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		encode.Entropy_encode.__hx_ctor_encode_Entropy_encode(this);
	}
	
	
	public static void __hx_ctor_encode_Entropy_encode(encode.Entropy_encode __hx_this)
	{
	}
	
	
	public static int kCodeLengthCodes;
	
	public static encode.entropy_encode.EntropyCode EntropyCodeLiteral()
	{
		//line 17 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return new encode.entropy_encode.EntropyCode(((int) (256) ));
	}
	
	
	public static encode.entropy_encode.EntropyCode EntropyCodeCommand()
	{
		//line 19 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return new encode.entropy_encode.EntropyCode(((int) (704) ));
	}
	
	
	public static encode.entropy_encode.EntropyCode EntropyCodeDistance()
	{
		//line 20 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return new encode.entropy_encode.EntropyCode(((int) (520) ));
	}
	
	
	public static encode.entropy_encode.EntropyCode EntropyCodeBlockLength()
	{
		//line 21 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return new encode.entropy_encode.EntropyCode(((int) (26) ));
	}
	
	
	public static encode.entropy_encode.EntropyCode EntropyCodeContextMap()
	{
		//line 23 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return new encode.entropy_encode.EntropyCode(((int) (272) ));
	}
	
	
	public static encode.entropy_encode.EntropyCode EntropyCodeBlockType()
	{
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return new encode.entropy_encode.EntropyCode(((int) (258) ));
	}
	
	
	public static int SortHuffmanTree(encode.entropy_encode.HuffmanTree v0, encode.entropy_encode.HuffmanTree v1)
	{
		//line 28 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( v0.total_count_ == v1.total_count_ )) 
		{
			//line 29 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			return ( v1.index_right_or_value_ - v0.index_right_or_value_ );
		}
		
		//line 30 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( v0.total_count_ < v1.total_count_ )) 
		{
			//line 31 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			return -1;
		}
		
		//line 32 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return 1;
	}
	
	
	public static void SetDepth(encode.entropy_encode.HuffmanTree p, haxe.root.Array<encode.entropy_encode.HuffmanTree> pool, int pool_off, int[] depth, int depth_off, int level)
	{
		//line 41 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( p.index_left_ >= 0 )) 
		{
			//line 42 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 ++ level;
			//line 43 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.SetDepth(pool.__get(( pool_off + p.index_left_ )), pool, pool_off, depth, depth_off, level);
			//line 44 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.SetDepth(pool.__get(( pool_off + p.index_right_or_value_ )), pool, pool_off, depth, depth_off, level);
		}
		else
		{
			//line 46 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			((int[]) (depth) )[( depth_off + p.index_right_or_value_ )] = level;
		}
		
	}
	
	
	public static void CreateHuffmanTree(int[] data, int data_off, int length, int tree_limit, int[] depth, int depth_off)
	{
		//line 60 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int count_limit = 1;
		//line 61 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		while (true)
		{
			//line 62 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			haxe.root.Array<encode.entropy_encode.HuffmanTree> tree = new haxe.root.Array<encode.entropy_encode.HuffmanTree>();
			//line 64 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int tree_off = 0;
			//line 66 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int i = ( length - 1 );
			//line 67 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( i >= 0 ))
			{
				//line 68 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( ((int) (((int[]) (data) )[i]) ) > 0 )) 
				{
					//line 69 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int count = ((int) (java.lang.Math.max(((double) (((int) (((int[]) (data) )[i]) )) ), ((double) (count_limit) ))) );
					//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					encode.entropy_encode.HuffmanTree huffmantree = new encode.entropy_encode.HuffmanTree();
					//line 71 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					huffmantree.HuffmanTree3(count, -1, i);
					//line 72 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					tree.__set(tree_off++, huffmantree);
				}
				
				//line 74 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 -- i;
			}
			
			//line 77 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int n = tree.length;
			//line 78 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( n == 1 )) 
			{
				//line 79 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				((int[]) (depth) )[( depth_off + tree.__get(0).index_right_or_value_ )] = 1;
				//line 80 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				break;
			}
			
			//line 83 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			tree.sort(((haxe.lang.Function) (new haxe.lang.Closure(encode.Entropy_encode.class, "SortHuffmanTree")) ));
			//line 92 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.entropy_encode.HuffmanTree huffmantree1 = new encode.entropy_encode.HuffmanTree();
			//line 93 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			huffmantree1.HuffmanTree3(2147483647, -1, -1);
			//line 95 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			tree.__set(tree_off++, huffmantree1);
			//line 96 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.entropy_encode.HuffmanTree huffmantree2 = new encode.entropy_encode.HuffmanTree();
			//line 97 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			huffmantree2.HuffmanTree3(2147483647, -1, -1);
			//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			tree.__set(tree_off++, huffmantree2);
			//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int i1 = 0;
			//line 102 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int j = ( n + 1 );
			//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int k = ( n - 1 );
			//line 104 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( k > 0 ))
			{
				//line 105 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int left = 0;
				//line 105 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int right = 0;
				//line 106 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( tree.__get(i1).total_count_ <= tree.__get(j).total_count_ )) 
				{
					//line 107 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					left = i1;
					//line 108 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ i1;
				}
				else
				{
					//line 110 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					left = j;
					//line 111 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ j;
				}
				
				//line 113 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( tree.__get(i1).total_count_ <= tree.__get(j).total_count_ )) 
				{
					//line 114 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					right = i1;
					//line 115 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ i1;
				}
				else
				{
					//line 117 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					right = j;
					//line 118 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ j;
				}
				
				//line 122 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int j_end = ( tree.length - 1 );
				//line 123 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.__get(j_end).total_count_ = ( tree.__get(left).total_count_ + tree.__get(right).total_count_ );
				//line 125 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.__get(j_end).index_left_ = left;
				//line 126 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.__get(j_end).index_right_or_value_ = right;
				//line 129 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				encode.entropy_encode.HuffmanTree huffmantree3 = new encode.entropy_encode.HuffmanTree();
				//line 130 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				huffmantree3.HuffmanTree3(2147483647, -1, -1);
				//line 132 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.__set(tree_off++, huffmantree3);
				//line 133 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 -- k;
			}
			
			//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.SetDepth(tree.__get(( ( 2 * n ) - 1 )), tree, 0, depth, depth_off, 0);
			//line 140 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int max_element = 0;
			//line 141 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			{
				//line 141 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g1 = depth_off;
				//line 141 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g = ( depth_off + length );
				//line 141 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				while (( _g1 < _g ))
				{
					//line 141 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int i2 = _g1++;
					//line 142 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int a = ((int) (((int[]) (depth) )[i2]) );
					//line 142 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					boolean aNeg = ( ((int) (a) ) < 0 );
					//line 142 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					boolean bNeg = ( ((int) (max_element) ) < 0 );
					//line 142 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( (( aNeg != bNeg )) ? (aNeg) : (( ((int) (a) ) > ((int) (max_element) ) )) )) 
					{
						//line 143 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						max_element = ((int) (((int[]) (depth) )[i2]) );
					}
					
				}
				
			}
			
			//line 144 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( max_element <= tree_limit )) 
			{
				//line 145 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				break;
			}
			
			//line 147 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			count_limit *= 2;
		}
		
	}
	
	
	public static void Reverse(haxe.root.Array<java.lang.Object> v, int start, int end)
	{
		//line 152 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		 -- end;
		//line 153 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		while (( start < end ))
		{
			//line 154 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int tmp = ((int) (haxe.lang.Runtime.toInt(v.__get(start))) );
			//line 155 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			v.__set(start, ((int) (haxe.lang.Runtime.toInt(v.__get(end))) ));
			//line 156 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			v.__set(end, tmp);
			//line 157 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 ++ start;
			//line 158 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 -- end;
		}
		
	}
	
	
	public static void WriteHuffmanTreeRepetitions(int previous_value, int value, int repetitions, haxe.root.Array<java.lang.Object> tree, haxe.root.Array<java.lang.Object> extra_bits_data)
	{
		//line 168 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( previous_value != value )) 
		{
			//line 169 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			tree.push(value);
			//line 170 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			extra_bits_data.push(0);
			//line 171 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 -- repetitions;
		}
		
		//line 173 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( repetitions == 7 )) 
		{
			//line 174 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			tree.push(value);
			//line 175 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			extra_bits_data.push(0);
			//line 176 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 -- repetitions;
		}
		
		//line 178 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( repetitions < 3 )) 
		{
			//line 179 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g1 = 0;
			//line 179 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g = repetitions;
			//line 179 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( _g1 < _g ))
			{
				//line 179 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ _g1;
				//line 180 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.push(value);
				//line 181 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				extra_bits_data.push(0);
			}
			
		}
		else
		{
			//line 184 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			repetitions -= 3;
			//line 185 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int start = tree.length;
			//line 186 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( repetitions >= 0 ))
			{
				//line 187 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.push(16);
				//line 188 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				extra_bits_data.push(( repetitions & 3 ));
				//line 189 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				repetitions >>= 2;
				//line 190 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 -- repetitions;
			}
			
			//line 192 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.Reverse(tree, start, tree.length);
			//line 193 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.Reverse(extra_bits_data, start, tree.length);
		}
		
	}
	
	
	public static void WriteHuffmanTreeRepetitionsZeros(int repetitions, haxe.root.Array<java.lang.Object> tree, haxe.root.Array<java.lang.Object> extra_bits_data)
	{
		//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( repetitions == 11 )) 
		{
			//line 202 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			tree.push(0);
			//line 203 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			extra_bits_data.push(0);
			//line 204 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 -- repetitions;
		}
		
		//line 206 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( repetitions < 3 )) 
		{
			//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g1 = 0;
			//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g = repetitions;
			//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( _g1 < _g ))
			{
				//line 207 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ _g1;
				//line 208 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.push(0);
				//line 209 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				extra_bits_data.push(0);
			}
			
		}
		else
		{
			//line 212 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			repetitions -= 3;
			//line 213 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int start = tree.length;
			//line 214 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( repetitions >= 0 ))
			{
				//line 215 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				tree.push(17);
				//line 216 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				extra_bits_data.push(( repetitions & 7 ));
				//line 217 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				repetitions >>= 3;
				//line 218 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 -- repetitions;
			}
			
			//line 220 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.Reverse(tree, start, tree.length);
			//line 221 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.Reverse(extra_bits_data, start, tree.length);
		}
		
	}
	
	
	public static int OptimizeHuffmanCountsForRle(int length, int[] counts)
	{
		//line 226 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int nonzero_count = 0;
		//line 227 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int stride = 0;
		//line 228 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int limit = 0;
		//line 229 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int sum = 0;
		//line 230 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int[] good_for_rle = null;
		//line 233 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 233 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g1 = 0;
			//line 233 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g = length;
			//line 233 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( _g1 < _g ))
			{
				//line 233 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int i = _g1++;
				//line 234 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( ((int) (((int[]) (counts) )[i]) ) > 0 )) 
				{
					//line 235 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ nonzero_count;
				}
				
			}
			
		}
		
		//line 238 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( nonzero_count < 16 )) 
		{
			//line 239 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			return 1;
		}
		
		//line 241 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		while (( length >= 0 ))
		{
			//line 242 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( length == 0 )) 
			{
				//line 243 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				return 1;
			}
			
			//line 245 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( ((int) (((int[]) (counts) )[( length - 1 )]) ) != 0 )) 
			{
				//line 247 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				break;
			}
			
			//line 249 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			 -- length;
		}
		
		//line 251 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 252 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int nonzeros = 0;
			//line 253 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int smallest_nonzero = 1073741824;
			//line 254 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			{
				//line 254 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g11 = 0;
				//line 254 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g2 = length;
				//line 254 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				while (( _g11 < _g2 ))
				{
					//line 254 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int i1 = _g11++;
					//line 255 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( ((int) (((int[]) (counts) )[i1]) ) != 0 )) 
					{
						//line 256 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						 ++ nonzeros;
						//line 257 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( smallest_nonzero > ((int) (((int[]) (counts) )[i1]) ) )) 
						{
							//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							smallest_nonzero = ((int) (((int[]) (counts) )[i1]) );
						}
						
					}
					
				}
				
			}
			
			//line 262 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( nonzeros < 5 )) 
			{
				//line 264 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				return 1;
			}
			
			//line 266 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int zeros = ( length - nonzeros );
			//line 267 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( smallest_nonzero < 4 )) 
			{
				//line 268 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( zeros < 6 )) 
				{
					//line 269 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int _g12 = 1;
					//line 269 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int _g3 = ( length - 1 );
					//line 269 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					while (( _g12 < _g3 ))
					{
						//line 269 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						int i2 = _g12++;
						//line 270 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( ( ( ((int) (((int[]) (counts) )[( i2 - 1 )]) ) != 0 ) && ( ((int) (((int[]) (counts) )[i2]) ) == 0 ) ) && ( ((int) (((int[]) (counts) )[( i2 + 1 )]) ) != 0 ) )) 
						{
							//line 271 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							((int[]) (counts) )[i2] = 1;
						}
						
					}
					
				}
				
			}
			
			//line 276 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( nonzeros < 28 )) 
			{
				//line 277 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				return 1;
			}
			
		}
		
		//line 282 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		good_for_rle = haxe.root.FunctionMalloc.mallocUInt(length);
		//line 283 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( good_for_rle == null )) 
		{
			//line 284 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			return 0;
		}
		
		//line 286 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 290 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int symbol = ((int) (((int[]) (counts) )[0]) );
			//line 291 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int stride1 = 0;
			//line 292 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			{
				//line 292 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g13 = 0;
				//line 292 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g4 = ( length + 1 );
				//line 292 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				while (( _g13 < _g4 ))
				{
					//line 292 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int i3 = _g13++;
					//line 293 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( ( i3 == length ) || ( ((int) (((int[]) (counts) )[i3]) ) != symbol ) )) 
					{
						//line 294 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( ( ( symbol == 0 ) && ( stride1 >= 5 ) ) || ( ( symbol != 0 ) && ( stride1 >= 7 ) ) )) 
						{
							//line 297 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							int _g31 = 0;
							//line 297 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							int _g21 = stride1;
							//line 297 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							while (( _g31 < _g21 ))
							{
								//line 297 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
								int k = _g31++;
								//line 298 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
								((int[]) (good_for_rle) )[( ( i3 - k ) - 1 )] = 1;
							}
							
						}
						
						//line 301 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						stride1 = 1;
						//line 302 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( i3 != length )) 
						{
							//line 303 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							symbol = ((int) (((int[]) (counts) )[i3]) );
						}
						
					}
					else
					{
						//line 306 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						 ++ stride1;
					}
					
				}
				
			}
			
		}
		
		//line 313 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		stride = 0;
		//line 314 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		limit = ( ((int) (( ( 256 * (( ( ((int) (((int[]) (counts) )[0]) ) + ((int) (((int[]) (counts) )[1]) ) ) + ((int) (((int[]) (counts) )[2]) ) )) ) / 3 )) ) + 420 );
		//line 315 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		sum = 0;
		//line 316 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 316 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g14 = 0;
			//line 316 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g5 = ( length + 1 );
			//line 316 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( _g14 < _g5 ))
			{
				//line 316 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int i4 = _g14++;
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				boolean tmp = false;
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				boolean tmp1 = false;
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				boolean tmp2 = false;
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( i4 != length )) 
				{
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int a = ((int) (((int[]) (good_for_rle) )[i4]) );
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					boolean aNeg = ( ((int) (a) ) < 0 );
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( aNeg != false )) 
					{
						//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						tmp2 = aNeg;
					}
					else
					{
						//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						tmp2 = ( ((int) (a) ) > ((int) (0) ) );
					}
					
				}
				else
				{
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					tmp2 = true;
				}
				
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if ( ! (tmp2) ) 
				{
					//line 318 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( i4 != 0 )) 
					{
						//line 318 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						int a1 = ((int) (((int[]) (good_for_rle) )[( i4 - 1 )]) );
						//line 318 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						boolean aNeg1 = ( ((int) (a1) ) < 0 );
						//line 318 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( aNeg1 != false )) 
						{
							//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							tmp1 = aNeg1;
						}
						else
						{
							//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							tmp1 = ( ((int) (a1) ) > ((int) (0) ) );
						}
						
					}
					else
					{
						//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						tmp1 = false;
					}
					
				}
				else
				{
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					tmp1 = true;
				}
				
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if ( ! (tmp1) ) 
				{
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					tmp = ( java.lang.Math.abs(((double) (( ( 256 * ((int) (((int[]) (counts) )[i4]) ) ) - limit )) )) >= 1240 );
				}
				else
				{
					//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					tmp = true;
				}
				
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (tmp) 
				{
					//line 320 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( ( stride >= 4 ) || ( ( stride >= 3 ) && ( sum == 0 ) ) )) 
					{
						//line 323 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						int count = ((int) (( (( sum + ((int) (( stride / 2 )) ) )) / stride )) );
						//line 324 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( count < 1 )) 
						{
							//line 325 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							count = 1;
						}
						
						//line 327 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( sum == 0 )) 
						{
							//line 329 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							count = 0;
						}
						
						//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						{
							//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							int _g32 = 0;
							//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							int _g22 = stride;
							//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							while (( _g32 < _g22 ))
							{
								//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
								int k1 = _g32++;
								//line 334 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
								((int[]) (counts) )[( ( i4 - k1 ) - 1 )] = count;
							}
							
						}
						
					}
					
					//line 337 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					stride = 0;
					//line 338 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					sum = 0;
					//line 339 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( i4 < ( length - 2 ) )) 
					{
						//line 342 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						limit = ( ((int) (( ( 256 * (( ( ((int) (((int[]) (counts) )[i4]) ) + ((int) (((int[]) (counts) )[( i4 + 1 )]) ) ) + ((int) (((int[]) (counts) )[( i4 + 2 )]) ) )) ) / 3 )) ) + 420 );
					}
					else
					{
						//line 343 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						if (( i4 < length )) 
						{
							//line 344 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							limit = ( 256 * ((int) (((int[]) (counts) )[i4]) ) );
						}
						else
						{
							//line 346 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
							limit = 0;
						}
						
					}
					
				}
				
				//line 349 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ stride;
				//line 350 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( i4 != length )) 
				{
					//line 351 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					sum += ((int) (((int[]) (counts) )[i4]) );
					//line 352 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( stride >= 4 )) 
					{
						//line 353 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						limit = ((int) (( (( ( 256 * sum ) + ((int) (( stride / 2 )) ) )) / stride )) );
					}
					
					//line 355 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					if (( stride == 4 )) 
					{
						//line 356 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						limit += 120;
					}
					
				}
				
			}
			
		}
		
		//line 361 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return 1;
	}
	
	
	public static void DecideOverRleUse(int[] depth, int depth_off, int length, haxe.root.Array<java.lang.Object> use_rle_for_non_zero, haxe.root.Array<java.lang.Object> use_rle_for_zero)
	{
		//line 367 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int total_reps_zero = 0;
		//line 368 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int total_reps_non_zero = 0;
		//line 369 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int count_reps_zero = 0;
		//line 370 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int count_reps_non_zero = 0;
		//line 371 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int i = 0;
		//line 372 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		while (( i < length ))
		{
			//line 373 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int value = ((int) (((int[]) (depth) )[( depth_off + i )]) );
			//line 374 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int reps = 1;
			//line 375 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int k = ( i + 1 );
			//line 376 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( ( k < length ) && ( ((int) (((int[]) (depth) )[( depth_off + k )]) ) == value ) ))
			{
				//line 377 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ reps;
				//line 378 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ k;
			}
			
			//line 380 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( ( reps >= 3 ) && ( value == 0 ) )) 
			{
				//line 381 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				total_reps_zero += reps;
				//line 382 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ count_reps_zero;
			}
			
			//line 384 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( ( reps >= 4 ) && ( value != 0 ) )) 
			{
				//line 385 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				total_reps_non_zero += reps;
				//line 386 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				 ++ count_reps_non_zero;
			}
			
			//line 388 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			i += reps;
		}
		
		//line 390 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		total_reps_non_zero -= ( count_reps_non_zero * 2 );
		//line 391 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		total_reps_zero -= ( count_reps_zero * 2 );
		//line 392 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		use_rle_for_non_zero.__set(0, ( total_reps_non_zero > 2 ));
		//line 393 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		use_rle_for_zero.__set(0, ( total_reps_zero > 2 ));
	}
	
	
	public static void WriteHuffmanTree(int[] depth, int depth_off, int length, haxe.root.Array<java.lang.Object> tree, haxe.root.Array<java.lang.Object> extra_bits_data)
	{
		//line 400 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int previous_value = 8;
		//line 403 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int new_length = length;
		//line 404 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 404 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g1 = 0;
			//line 404 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g = ((int) (length) );
			//line 404 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( _g1 < _g ))
			{
				//line 404 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int i = _g1++;
				//line 405 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( ((int) (((int[]) (depth) )[((int) (( ((int) (( ((int) (( ((int) (depth_off) ) + ((int) (length) ) )) ) - ((int) (i) ) )) ) - ((int) (1) ) )) )]) ) == 0 )) 
				{
					//line 406 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 -- new_length;
				}
				else
				{
					//line 408 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					break;
				}
				
			}
			
		}
		
		//line 413 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		haxe.root.Array<java.lang.Object> use_rle_for_non_zero = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{false});
		//line 414 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		haxe.root.Array<java.lang.Object> use_rle_for_zero = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{false});
		//line 415 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		boolean aNeg = ( ((int) (length) ) < 0 );
		//line 415 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		if (( (( aNeg != false )) ? (aNeg) : (( ((int) (length) ) > ((int) (50) ) )) )) 
		{
			//line 418 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			encode.Entropy_encode.DecideOverRleUse(depth, depth_off, new_length, use_rle_for_non_zero, use_rle_for_zero);
		}
		
		//line 423 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int i1 = 0;
		//line 424 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		while (( i1 < new_length ))
		{
			//line 425 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int value = ((int) (((int[]) (depth) )[( depth_off + i1 )]) );
			//line 426 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int reps = 1;
			//line 427 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( ( ( value != 0 ) && haxe.lang.Runtime.toBool(use_rle_for_non_zero.__get(0)) ) || ( ( value == 0 ) && haxe.lang.Runtime.toBool(use_rle_for_zero.__get(0)) ) )) 
			{
				//line 429 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int k = ( i1 + 1 );
				//line 430 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				while (( ( k < new_length ) && ( ((int) (((int[]) (depth) )[( depth_off + k )]) ) == value ) ))
				{
					//line 431 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ reps;
					//line 432 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					 ++ k;
				}
				
			}
			
			//line 435 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			if (( value == 0 )) 
			{
				//line 436 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				encode.Entropy_encode.WriteHuffmanTreeRepetitionsZeros(reps, tree, extra_bits_data);
			}
			else
			{
				//line 438 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				encode.Entropy_encode.WriteHuffmanTreeRepetitions(previous_value, value, reps, tree, extra_bits_data);
				//line 440 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				previous_value = value;
			}
			
			//line 442 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			i1 += reps;
		}
		
	}
	
	
	public static int ReverseBits(int num_bits, int bits)
	{
		//line 447 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		haxe.root.Array<java.lang.Object> kLut = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15});
		//line 451 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int retval = ((int) (haxe.lang.Runtime.toInt(kLut.__get(((int) (( ((int) (bits) ) & ((int) (15) ) )) )))) );
		//line 452 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int i = 4;
		//line 453 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		while (( i < num_bits ))
		{
			//line 454 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			retval <<= 4;
			//line 455 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			bits = ((int) (( ((int) (bits) ) >>> 4 )) );
			//line 456 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			retval |= ((int) (haxe.lang.Runtime.toInt(kLut.__get(((int) (( ((int) (bits) ) & ((int) (15) ) )) )))) );
			//line 457 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			i += 4;
		}
		
		//line 459 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		retval >>= (  - (num_bits)  & 3 );
		//line 460 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		return retval;
	}
	
	
	public static void ConvertBitDepthsToSymbols(int[] depth, int depth_off, int len, int[] bits, int bits_off)
	{
		//line 467 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int[] bl_count = haxe.root.FunctionMalloc.mallocUInt(16);
		//line 468 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 469 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			{
				//line 469 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g1 = 0;
				//line 469 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				while (( _g1 < len ))
				{
					//line 469 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int i = _g1++;
					//line 470 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					{
						//line 470 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						int _g2 = ((int) (((int[]) (depth) )[( depth_off + i )]) );
						//line 470 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						((int[]) (bl_count) )[_g2] = ((int) (( ((int) (((int[]) (bl_count) )[_g2]) ) + ((int) (1) ) )) );
					}
					
				}
				
			}
			
			//line 472 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			((int[]) (bl_count) )[0] = 0;
		}
		
		//line 474 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int[] this1 = new int[16];
		//line 474 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		int[] next_code = ((int[]) (this1) );
		//line 475 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		((int[]) (next_code) )[0] = 0;
		//line 476 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 477 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int code = 0;
			//line 478 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			{
				//line 478 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int _g11 = 1;
				//line 478 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				while (( _g11 < 16 ))
				{
					//line 478 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					int _bits = _g11++;
					//line 479 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					code = ((int) (( ((int) (( ((int) (code) ) + ((int) (((int[]) (bl_count) )[( _bits - 1 )]) ) )) ) << 1 )) );
					//line 480 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					((int[]) (next_code) )[_bits] = code;
				}
				
			}
			
		}
		
		//line 483 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
		{
			//line 483 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			int _g12 = 0;
			//line 483 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
			while (( _g12 < len ))
			{
				//line 483 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int i1 = _g12++;
				//line 484 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				int a = ((int) (((int[]) (depth) )[( depth_off + i1 )]) );
				//line 484 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				boolean aNeg = ( ((int) (a) ) < 0 );
				//line 484 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
				if (( (( aNeg != false )) ? (aNeg) : (( ((int) (a) ) > ((int) (0) ) )) )) 
				{
					//line 485 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					((int[]) (bits) )[( bits_off + i1 )] = encode.Entropy_encode.ReverseBits(((int) (((int[]) (depth) )[( depth_off + i1 )]) ), ((int) (((int[]) (next_code) )[((int) (((int[]) (depth) )[( depth_off + i1 )]) )]) ));
					//line 486 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
					{
						//line 486 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						int _g21 = ((int) (((int[]) (depth) )[( depth_off + i1 )]) );
						//line 486 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Entropy_encode.hx"
						((int[]) (next_code) )[_g21] = ((int) (( ((int) (((int[]) (next_code) )[_g21]) ) + ((int) (1) ) )) );
					}
					
				}
				
			}
			
		}
		
	}
	
	
}


