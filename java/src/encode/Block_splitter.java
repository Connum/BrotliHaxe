// Generated by Haxe 3.4.0
package encode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Block_splitter extends haxe.lang.HxObject
{
	static
	{
		//line 19 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kMaxLiteralHistograms = 100;
		//line 20 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kMaxCommandHistograms = 50;
		//line 21 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kLiteralBlockSwitchCost = 28.1;
		//line 22 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kCommandBlockSwitchCost = 13.5;
		//line 23 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kDistanceBlockSwitchCost = 14.6;
		//line 24 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kLiteralStrideLength = 70;
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kCommandStrideLength = 40;
		//line 26 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kSymbolsPerLiteralHistogram = 544;
		//line 27 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kSymbolsPerCommandHistogram = 530;
		//line 28 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kSymbolsPerDistanceHistogram = 544;
		//line 29 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kMinLengthForBlockSplitting = 128;
		//line 30 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kIterMulForRefining = 2;
		//line 31 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.kMinItersForRefining = 100;
	}
	
	public Block_splitter(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Block_splitter()
	{
		//line 378 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.__hx_ctor_encode_Block_splitter(this);
	}
	
	
	public static void __hx_ctor_encode_Block_splitter(encode.Block_splitter __hx_this)
	{
	}
	
	
	public static int kMaxLiteralHistograms;
	
	public static int kMaxCommandHistograms;
	
	public static double kLiteralBlockSwitchCost;
	
	public static double kCommandBlockSwitchCost;
	
	public static double kDistanceBlockSwitchCost;
	
	public static int kLiteralStrideLength;
	
	public static int kCommandStrideLength;
	
	public static int kSymbolsPerLiteralHistogram;
	
	public static int kSymbolsPerCommandHistogram;
	
	public static int kSymbolsPerDistanceHistogram;
	
	public static int kMinLengthForBlockSplitting;
	
	public static int kIterMulForRefining;
	
	public static int kMinItersForRefining;
	
	public static void CopyLiteralsToByteArray(haxe.root.Array<encode.command.Command> cmds, int num_commands, int[] data, int data_off, haxe.root.Array<java.lang.Object> literals)
	{
		//line 39 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int total_length = 0;
		//line 40 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 40 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 0;
			//line 40 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < num_commands ))
			{
				//line 40 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i = _g1++;
				//line 41 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				total_length += cmds.__get(i).insert_len_;
			}
			
		}
		
		//line 43 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( total_length == 0 )) 
		{
			//line 44 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			return ;
		}
		
		//line 49 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		while (( literals.length > total_length ))
		{
			//line 49 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			literals.pop();
		}
		
		//line 52 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int pos = 0;
		//line 53 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int from_pos = 0;
		//line 54 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int i1 = 0;
		//line 55 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		while (( ( i1 < num_commands ) && ( pos < total_length ) ))
		{
			//line 56 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			haxe.root.DefaultFunctions.memcpyArrayVector(literals, pos, data, ( data_off + from_pos ), cmds.__get(i1).insert_len_);
			//line 57 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			pos += cmds.__get(i1).insert_len_;
			//line 58 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			from_pos += ( cmds.__get(i1).insert_len_ + cmds.__get(i1).copy_len_ );
			//line 59 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			 ++ i1;
		}
		
	}
	
	
	public static void CopyCommandsToByteArray(haxe.root.Array<encode.command.Command> cmds, int num_commands, haxe.root.Array<java.lang.Object> insert_and_copy_codes, haxe.root.Array<java.lang.Object> distance_prefixes)
	{
		//line 67 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int _g1 = 0;
		//line 67 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		while (( _g1 < num_commands ))
		{
			//line 67 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int i = _g1++;
			//line 68 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			encode.command.Command cmd = cmds.__get(i);
			//line 69 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			insert_and_copy_codes.push(((int) (haxe.lang.Runtime.toInt(cmd.cmd_prefix_.__get(0))) ));
			//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			boolean tmp = false;
			//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			if (( cmd.copy_len_ > 0 )) 
			{
				//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int a = ((int) (haxe.lang.Runtime.toInt(cmd.cmd_prefix_.__get(0))) );
				//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				boolean aNeg = ( ((int) (a) ) < 0 );
				//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (( aNeg != false )) 
				{
					//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					tmp = aNeg;
				}
				else
				{
					//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					tmp = ( ((int) (a) ) >= ((int) (128) ) );
				}
				
			}
			else
			{
				//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				tmp = false;
			}
			
			//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			if (tmp) 
			{
				//line 71 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				distance_prefixes.push(((int) (haxe.lang.Runtime.toInt(cmd.dist_prefix_.__get(0))) ));
			}
			
		}
		
	}
	
	
	public static int MyRand(haxe.root.Array<java.lang.Object> seed)
	{
		//line 77 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		seed.__set(0, ((int) (( ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) ) * ((int) (16807) ) )) ));
		//line 79 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		seed.__set(0, ((int) (( ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) ) >>> 0 )) ));
		//line 83 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) ) == 0 )) 
		{
			//line 84 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			seed.__set(0, 1);
		}
		
		//line 86 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		return ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) );
	}
	
	
	public static void InitialEntropyCodes(int HistogramTypeInt, haxe.root.Array<java.lang.Object> data, int length, int literals_per_histogram, int max_histograms, int stride, haxe.root.Array<encode.histogram.Histogram> vec)
	{
		//line 94 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int total_histograms = ( ((int) (( length / literals_per_histogram )) ) + 1 );
		//line 95 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( total_histograms > max_histograms )) 
		{
			//line 96 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			total_histograms = max_histograms;
		}
		
		//line 89 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int seed_0 = 7;
		//line 99 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int block_length = ((int) (( length / total_histograms )) );
		//line 100 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 100 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 0;
			//line 100 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g = total_histograms;
			//line 100 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < _g ))
			{
				//line 100 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i = _g1++;
				//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int pos = ((int) (( ( length * i ) / total_histograms )) );
				//line 102 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (( i != 0 )) 
				{
					//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					seed_0 = ((int) (( ((int) (seed_0) ) * ((int) (16807) ) )) );
					//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					seed_0 = ((int) (( ((int) (seed_0) ) >>> 0 )) );
					//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					if (( ((int) (seed_0) ) == 0 )) 
					{
						//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						seed_0 = 1;
					}
					
					//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					int _int = ((int) (seed_0) );
					//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					pos = ( ((int) (pos) ) + ((int) (((int) (( (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) % (( (( block_length < 0 )) ? (( 4294967296.0 + block_length )) : (( block_length + 0.0 )) )) )) )) ) );
				}
				
				//line 105 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (( ( pos + stride ) >= length )) 
				{
					//line 106 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					pos = ( ( length - stride ) - 1 );
				}
				
				//line 108 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				encode.histogram.Histogram histo = new encode.histogram.Histogram(((int) (HistogramTypeInt) ));
				//line 109 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				histo.Add2(data, pos, stride);
				//line 110 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				vec.push(histo);
			}
			
		}
		
	}
	
	
	public static void RandomSample(haxe.root.Array<java.lang.Object> seed, haxe.root.Array<java.lang.Object> data, int length, int stride, encode.histogram.Histogram sample)
	{
		//line 119 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int pos = 0;
		//line 120 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( stride >= length )) 
		{
			//line 121 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			pos = 0;
			//line 122 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			stride = length;
		}
		else
		{
			//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			seed.__set(0, ((int) (( ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) ) * ((int) (16807) ) )) ));
			//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			seed.__set(0, ((int) (( ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) ) >>> 0 )) ));
			//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			if (( ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) ) == 0 )) 
			{
				//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				seed.__set(0, 1);
			}
			
			//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _int = ((int) (haxe.lang.Runtime.toInt(seed.__get(0))) );
			//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int int1 = ((int) (( ( length - stride ) + 1 )) );
			//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			pos = ((int) (( (( (( _int < 0 )) ? (( 4294967296.0 + _int )) : (( _int + 0.0 )) )) % (( (( int1 < 0 )) ? (( 4294967296.0 + int1 )) : (( int1 + 0.0 )) )) )) );
		}
		
		//line 126 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		sample.Add2(data, pos, stride);
	}
	
	
	public static void RefineEntropyCodes(int HistogramTypeInt, haxe.root.Array<java.lang.Object> data, int length, int stride, haxe.root.Array<encode.histogram.Histogram> vec)
	{
		//line 132 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int iters = ( ((int) (( ( 2 * length ) / stride )) ) + 100 );
		//line 134 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<java.lang.Object> seed = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{7});
		//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		iters = ( ((int) (( (( ( iters + vec.length ) - 1 )) / vec.length )) ) * vec.length );
		//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 0;
			//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g = iters;
			//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < _g ))
			{
				//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int iter = _g1++;
				//line 137 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				encode.histogram.Histogram sample = new encode.histogram.Histogram(((int) (HistogramTypeInt) ));
				//line 138 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				encode.Block_splitter.RandomSample(seed, data, length, stride, sample);
				//line 139 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int ix = ( iter % vec.length );
				//line 140 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				vec.__get(ix).AddHistogram(sample);
			}
			
		}
		
	}
	
	
	public static double BitCost(int count)
	{
		//line 145 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( count == 0 )) 
		{
			//line 145 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			return ((double) (-2) );
		}
		else
		{
			//line 145 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			return encode.Fast_log.FastLog2(count);
		}
		
	}
	
	
	public static void FindBlocks(int kSize, haxe.root.Array<java.lang.Object> data, int length, double block_switch_bitcost, haxe.root.Array<encode.histogram.Histogram> vec, int[] block_id, int block_id_off)
	{
		//line 153 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( vec.length <= 1 )) 
		{
			//line 154 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			{
				//line 154 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int _g1 = 0;
				//line 154 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				while (( _g1 < length ))
				{
					//line 154 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					int i = _g1++;
					//line 155 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					((int[]) (block_id) )[i] = 0;
				}
				
			}
			
			//line 157 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			return ;
		}
		
		//line 159 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int vecsize = vec.length;
		//line 160 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		double[] insert_cost = haxe.root.FunctionMalloc.mallocFloat(( kSize * vecsize ));
		//line 164 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 164 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g11 = 0;
			//line 164 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g11 < vecsize ))
			{
				//line 164 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int j = _g11++;
				//line 165 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				((double[]) (insert_cost) )[j] = encode.Fast_log.FastLog2(vec.__get(j).total_count_);
			}
			
		}
		
		//line 167 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int i1 = ( kSize - 1 );
		//line 168 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		while (( i1 >= 0 ))
		{
			//line 169 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			{
				//line 169 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int _g12 = 0;
				//line 169 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				while (( _g12 < vecsize ))
				{
					//line 169 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					int j1 = _g12++;
					//line 170 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					{
						//line 170 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						int count = ((int[]) (vec.__get(j1).data_) )[i1];
						//line 170 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						double val = ( (( count == 0 )) ? (((double) (-2) )) : (encode.Fast_log.FastLog2(count)) );
						//line 170 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						((double[]) (insert_cost) )[( ( i1 * vecsize ) + j1 )] = ( ((double) (((double[]) (insert_cost) )[j1]) ) - val );
					}
					
				}
				
			}
			
			//line 172 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			 -- i1;
		}
		
		//line 174 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		double[] cost = haxe.root.FunctionMalloc.mallocFloat(vecsize);
		//line 176 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		boolean[] switch_signal = haxe.root.FunctionMalloc.mallocBool(( length * vecsize ));
		//line 184 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 184 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g13 = 0;
			//line 184 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g13 < length ))
			{
				//line 184 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int byte_ix = _g13++;
				//line 185 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int ix = ( byte_ix * vecsize );
				//line 186 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int insert_cost_ix = ((int) (( ((int) (haxe.lang.Runtime.toInt(data.__get(byte_ix))) ) * ((int) (vecsize) ) )) );
				//line 187 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				double min_cost = 1e99;
				//line 188 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				{
					//line 188 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					int _g3 = 0;
					//line 188 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					while (( _g3 < vecsize ))
					{
						//line 188 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						int k = _g3++;
						//line 190 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						((double[]) (cost) )[k] = ( ((double) (((double[]) (cost) )[k]) ) + ((double) (((double[]) (insert_cost) )[( insert_cost_ix + k )]) ) );
						//line 191 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						if (( ((double) (((double[]) (cost) )[k]) ) < min_cost )) 
						{
							//line 192 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
							min_cost = ((double) (((double[]) (cost) )[k]) );
							//line 193 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
							((int[]) (block_id) )[byte_ix] = k;
						}
						
					}
					
				}
				
				//line 196 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				double block_switch_cost = block_switch_bitcost;
				//line 198 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (( byte_ix < 2000 )) 
				{
					//line 199 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					block_switch_cost = ( block_switch_bitcost * (( 0.77 + ( ( 0.07 * byte_ix ) / 2000 ) )) );
				}
				
				//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				{
					//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					int _g31 = 0;
					//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					while (( _g31 < vecsize ))
					{
						//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						int k1 = _g31++;
						//line 202 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						((double[]) (cost) )[k1] = ( ((double) (((double[]) (cost) )[k1]) ) - min_cost );
						//line 203 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
						if (( ((double) (((double[]) (cost) )[k1]) ) >= block_switch_cost )) 
						{
							//line 204 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
							((double[]) (cost) )[k1] = block_switch_cost;
							//line 205 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
							((boolean[]) (switch_signal) )[( ix + k1 )] = true;
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 210 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int byte_ix1 = ( length - 1 );
		//line 211 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int ix1 = ( byte_ix1 * vecsize );
		//line 212 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int cur_id = ((int) (((int[]) (block_id) )[byte_ix1]) );
		//line 213 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		while (( byte_ix1 > 0 ))
		{
			//line 214 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			 -- byte_ix1;
			//line 215 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			ix1 -= vecsize;
			//line 216 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			if (((boolean) (((boolean[]) (switch_signal) )[( ix1 + cur_id )]) )) 
			{
				//line 217 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				cur_id = ((int) (((int[]) (block_id) )[byte_ix1]) );
			}
			
			//line 219 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			((int[]) (block_id) )[byte_ix1] = cur_id;
		}
		
	}
	
	
	public static int RemapBlockIds(int[] block_ids, int length)
	{
		//line 227 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.ds.IntMap<java.lang.Object> new_id = new haxe.ds.IntMap<java.lang.Object>();
		//line 228 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int next_id = 0;
		//line 229 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 229 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 0;
			//line 229 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < length ))
			{
				//line 229 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i = _g1++;
				//line 230 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (( new_id.exists(((int) (((int[]) (block_ids) )[i]) )) == false )) 
				{
					//line 231 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					new_id.set(((int) (((int[]) (block_ids) )[i]) ), next_id);
					//line 232 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					 ++ next_id;
				}
				
			}
			
		}
		
		//line 235 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 235 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g11 = 0;
			//line 235 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g11 < length ))
			{
				//line 235 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i1 = _g11++;
				//line 236 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				((int[]) (block_ids) )[i1] = ((int) (haxe.lang.Runtime.toInt(new_id.get(((int) (((int[]) (block_ids) )[i1]) )))) );
			}
			
		}
		
		//line 238 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		return next_id;
	}
	
	
	public static void BuildBlockHistograms(int HistogramTypeInt, haxe.root.Array<java.lang.Object> data, int length, int[] block_ids, int block_ids_off, haxe.root.Array<encode.histogram.Histogram> histograms)
	{
		//line 245 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int num_types = encode.Block_splitter.RemapBlockIds(block_ids, length);
		//line 246 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		while (( histograms.length > 0 ))
		{
			//line 246 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			histograms.pop();
		}
		
		//line 248 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 248 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 0;
			//line 248 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < num_types ))
			{
				//line 248 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				 ++ _g1;
				//line 249 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				histograms.push(new encode.histogram.Histogram(((int) (HistogramTypeInt) )));
			}
			
		}
		
		//line 250 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 250 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g11 = 0;
			//line 250 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g11 < length ))
			{
				//line 250 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i = _g11++;
				//line 251 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				histograms.__get(((int) (((int[]) (block_ids) )[i]) )).Add1(((int) (haxe.lang.Runtime.toInt(data.__get(i))) ));
			}
			
		}
		
	}
	
	
	public static void ClusterBlocks(int HistogramTypeInt, haxe.root.Array<java.lang.Object> data, int length, int[] block_ids)
	{
		//line 257 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<encode.histogram.Histogram> histograms = new haxe.root.Array<encode.histogram.Histogram>();
		//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int[] block_index = haxe.root.FunctionMalloc.mallocInt(length);
		//line 259 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int cur_idx = 0;
		//line 260 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.histogram.Histogram cur_histogram = new encode.histogram.Histogram(((int) (HistogramTypeInt) ));
		//line 261 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 261 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 0;
			//line 261 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < length ))
			{
				//line 261 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i = _g1++;
				//line 262 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				boolean block_boundary = ( ( ( i + 1 ) == length ) || ( ((int) (((int[]) (block_ids) )[i]) ) != ((int) (((int[]) (block_ids) )[( i + 1 )]) ) ) );
				//line 263 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				((int[]) (block_index) )[i] = cur_idx;
				//line 264 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				cur_histogram.Add1(((int) (haxe.lang.Runtime.toInt(data.__get(i))) ));
				//line 265 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (block_boundary) 
				{
					//line 266 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					histograms.push(cur_histogram);
					//line 268 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					cur_histogram = new encode.histogram.Histogram(((int) (HistogramTypeInt) ));
					//line 269 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					 ++ cur_idx;
				}
				
			}
			
		}
		
		//line 272 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<encode.histogram.Histogram> clustered_histograms = new haxe.root.Array<encode.histogram.Histogram>();
		//line 273 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int[] this1 = new int[histograms.length];
		//line 273 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int[] histogram_symbols = ((int[]) (this1) );
		//line 276 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Cluster.ClusterHistograms(histograms, 1, histograms.length, 256, clustered_histograms, HistogramTypeInt, histogram_symbols);
		//line 280 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 280 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g11 = 0;
			//line 280 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g11 < length ))
			{
				//line 280 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i1 = _g11++;
				//line 281 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				((int[]) (block_ids) )[i1] = ((int) (((int[]) (histogram_symbols) )[((int) (((int[]) (block_index) )[i1]) )]) );
			}
			
		}
		
	}
	
	
	public static void BuildBlockSplit(int[] block_ids, encode.metablock.BlockSplit split)
	{
		//line 286 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int cur_id = ((int) (((int[]) (block_ids) )[0]) );
		//line 287 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int cur_length = 1;
		//line 288 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		split.num_types = -1;
		//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g1 = 1;
			//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g = ((int[]) (block_ids) ).length;
			//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g1 < _g ))
			{
				//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				int i = _g1++;
				//line 290 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				if (( ((int) (((int[]) (block_ids) )[i]) ) != cur_id )) 
				{
					//line 291 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					split.types.push(cur_id);
					//line 292 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					split.lengths.push(cur_length);
					//line 293 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					split.num_types = ((int) (java.lang.Math.max(((double) (split.num_types) ), ((double) (cur_id) ))) );
					//line 294 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					cur_id = ((int) (((int[]) (block_ids) )[i]) );
					//line 295 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
					cur_length = 0;
				}
				
				//line 297 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				 ++ cur_length;
			}
			
		}
		
		//line 299 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		split.types.push(cur_id);
		//line 300 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		split.lengths.push(cur_length);
		//line 301 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		split.num_types = ((int) (java.lang.Math.max(((double) (split.num_types) ), ((double) (cur_id) ))) );
		//line 302 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		 ++ split.num_types;
	}
	
	
	public static void SplitByteVector(int HistogramTypeInt, haxe.root.Array<java.lang.Object> data, int literals_per_histogram, int max_histograms, int sampling_stride_length, double block_switch_cost, encode.metablock.BlockSplit split)
	{
		//line 311 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		if (( data.length == 0 )) 
		{
			//line 312 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			split.num_types = 1;
			//line 313 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			return ;
		}
		else
		{
			//line 314 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			if (( data.length < 128 )) 
			{
				//line 315 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				split.num_types = 1;
				//line 316 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				split.types.push(0);
				//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				split.lengths.push(data.length);
				//line 318 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				return ;
			}
			
		}
		
		//line 320 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<encode.histogram.Histogram> histograms = new haxe.root.Array<encode.histogram.Histogram>();
		//line 322 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.InitialEntropyCodes(HistogramTypeInt, data, data.length, literals_per_histogram, max_histograms, sampling_stride_length, histograms);
		//line 327 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.RefineEntropyCodes(HistogramTypeInt, data, data.length, sampling_stride_length, histograms);
		//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		int[] block_ids = haxe.root.FunctionMalloc.mallocUInt(data.length);
		//line 332 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		{
			//line 332 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			int _g = 0;
			//line 332 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
			while (( _g < 10 ))
			{
				//line 332 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				 ++ _g;
				//line 333 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				encode.Block_splitter.FindBlocks(HistogramTypeInt, data, data.length, block_switch_cost, histograms, block_ids, 0);
				//line 337 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
				encode.Block_splitter.BuildBlockHistograms(HistogramTypeInt, data, data.length, block_ids, 0, histograms);
			}
			
		}
		
		//line 339 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.ClusterBlocks(HistogramTypeInt, data, data.length, block_ids);
		//line 340 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.BuildBlockSplit(block_ids, split);
	}
	
	
	public static void SplitBlock(haxe.root.Array<encode.command.Command> cmds, int num_commands, int[] data, int data_off, encode.metablock.BlockSplit literal_split, encode.metablock.BlockSplit insert_and_copy_split, encode.metablock.BlockSplit dist_split)
	{
		//line 351 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<java.lang.Object> literals = new haxe.root.Array<java.lang.Object>();
		//line 352 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.CopyLiteralsToByteArray(cmds, num_commands, data, data_off, literals);
		//line 355 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<java.lang.Object> insert_and_copy_codes = new haxe.root.Array<java.lang.Object>();
		//line 356 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		haxe.root.Array<java.lang.Object> distance_prefixes = new haxe.root.Array<java.lang.Object>();
		//line 357 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.CopyCommandsToByteArray(cmds, num_commands, insert_and_copy_codes, distance_prefixes);
		//line 361 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.SplitByteVector(encode.Histogram_functions.HistogramLiteralInt, literals, 544, 100, 70, 28.1, literal_split);
		//line 366 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.SplitByteVector(encode.Histogram_functions.HistogramCommandInt, insert_and_copy_codes, 530, 50, 40, 13.5, insert_and_copy_split);
		//line 371 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Block_splitter.hx"
		encode.Block_splitter.SplitByteVector(encode.Histogram_functions.HistogramDistanceInt, distance_prefixes, 544, 50, 40, 14.6, dist_split);
	}
	
	
}


