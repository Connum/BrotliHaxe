// Generated by Haxe 3.4.0
package encode;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Backward_references extends haxe.lang.HxObject
{
	static
	{
		//line 18 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		encode.Backward_references.kInfinity = java.lang.Double.POSITIVE_INFINITY;
	}
	
	public Backward_references(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Backward_references()
	{
		//line 717 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		encode.Backward_references.__hx_ctor_encode_Backward_references(this);
	}
	
	
	public static void __hx_ctor_encode_Backward_references(encode.Backward_references __hx_this)
	{
	}
	
	
	public static double kInfinity;
	
	public static void SetDistanceCache(int distance, int distance_code, int max_distance, int[] dist_cache, int[] result_dist_cache, int result_dist_cache_off)
	{
		//line 25 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		if (( ( distance <= max_distance ) && ( distance_code > 0 ) )) 
		{
			//line 26 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			((int[]) (result_dist_cache) )[0] = distance;
			//line 27 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.DefaultFunctions.memcpy_Int(result_dist_cache, ( result_dist_cache_off + 1 ), dist_cache, 0, 3);
		}
		else
		{
			//line 29 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.DefaultFunctions.memcpy_Int(result_dist_cache, result_dist_cache_off, dist_cache, 0, 4);
		}
		
	}
	
	
	public static int ComputeDistanceCode(int distance, int max_distance, int quality, int[] dist_cache)
	{
		//line 37 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		if (( distance <= max_distance )) 
		{
			//line 38 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			if (( distance == ((int) (((int[]) (dist_cache) )[0]) ) )) 
			{
				//line 39 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				return 0;
			}
			else
			{
				//line 40 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( distance == ((int) (((int[]) (dist_cache) )[1]) ) )) 
				{
					//line 41 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					return 1;
				}
				else
				{
					//line 42 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( distance == ((int) (((int[]) (dist_cache) )[2]) ) )) 
					{
						//line 43 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						return 2;
					}
					else
					{
						//line 44 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if (( distance == ((int) (((int[]) (dist_cache) )[3]) ) )) 
						{
							//line 45 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							return 3;
						}
						else
						{
							//line 46 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							if (( ( quality > 3 ) && ( distance >= 6 ) )) 
							{
								//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								int _g = 4;
								//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								while (( _g < 16 ))
								{
									//line 47 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
									int k = _g++;
									//line 48 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
									int idx = ((int) (haxe.lang.Runtime.toInt(encode.Hash.kDistanceCacheIndex.__get(k))) );
									//line 49 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
									int candidate = ( ((int) (((int[]) (dist_cache) )[idx]) ) + ((int) (haxe.lang.Runtime.toInt(encode.Hash.kDistanceCacheOffset.__get(k))) ) );
									//line 50 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
									haxe.root.Array<java.lang.Object> kLimits = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 0, 0, 0, 6, 6, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12});
									//line 54 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
									if (( ( distance == candidate ) && ( distance >= ((int) (haxe.lang.Runtime.toInt(kLimits.__get(k))) ) ) )) 
									{
										//line 55 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
										return k;
									}
									
								}
								
							}
							
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 60 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		return ( distance + 15 );
	}
	
	
	public static void UpdateZopfliNode(encode.backward_references.ZopfliNode[] nodes, int nodes_off, int pos, int start_pos, int len, int len_code, int dist, int dist_code, int max_dist, int[] dist_cache, double cost)
	{
		//line 67 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		encode.backward_references.ZopfliNode next = ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[( ( nodes_off + pos ) + len )]) );
		//line 68 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		next.length = len;
		//line 69 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		next.length_code = len_code;
		//line 70 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		next.distance = dist;
		//line 71 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		next.distance_code = dist_code;
		//line 72 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		next.insert_length = ( pos - start_pos );
		//line 73 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		next.cost = cost;
		//line 74 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		encode.Backward_references.SetDistanceCache(dist, dist_code, max_dist, dist_cache, next.distance_cache, 0);
	}
	
	
	public static int ComputeMinimumCopyLength(encode.backward_references.StartPosQueue queue, encode.backward_references.ZopfliNode[] nodes, encode.backward_references.ZopfliCostModel model, int pos, double min_cost_cmd)
	{
		//line 86 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int start0 = queue.GetStartPos(0);
		//line 87 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		double min_cost = ( ( ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[start0]) ).cost + model.GetLiteralCosts(start0, pos) ) + min_cost_cmd );
		//line 90 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int len = 2;
		//line 91 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int next_len_bucket = 4;
		//line 92 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int next_len_offset = 10;
		//line 93 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( ( ( pos + len ) < ((encode.backward_references.ZopfliNode[]) (nodes) ).length ) && ( ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[( pos + len )]) ).cost <= min_cost ) ))
		{
			//line 97 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			 ++ len;
			//line 98 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			if (( len == next_len_offset )) 
			{
				//line 101 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				min_cost += 1.0;
				//line 102 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				next_len_offset += next_len_bucket;
				//line 103 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				next_len_bucket *= 2;
			}
			
		}
		
		//line 106 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		return len;
	}
	
	
	public static void ZopfliIterate(int num_bytes, int position, int[] ringbuffer, int ringbuffer_mask, int max_backward_limit, encode.backward_references.ZopfliCostModel model, int[] num_matches, haxe.root.Array<encode.hash.BackwardMatch> matches, int[] dist_cache, haxe.root.Array<java.lang.Object> last_insert_len, haxe.root.Array<encode.command.Command> commands, int commands_off, haxe.root.Array<java.lang.Object> num_commands, haxe.root.Array<java.lang.Object> num_literals)
	{
		//line 124 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int orig_commands_off = commands_off;
		//line 126 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		encode.backward_references.ZopfliNode[] nodes = haxe.root.FunctionMalloc.malloc_encode_backward_references_ZopfliNode(encode.backward_references.ZopfliNode.class, ( num_bytes + 1 ));
		//line 127 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[0]) ).length = 0;
		//line 128 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[0]) ).cost = ((double) (0) );
		//line 129 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		haxe.root.DefaultFunctions.memcpy_Int(((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[0]) ).distance_cache, 0, dist_cache, 0, 4);
		//line 131 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		encode.backward_references.StartPosQueue queue = new encode.backward_references.StartPosQueue(((int) (3) ));
		//line 132 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		double min_cost_cmd = model.GetMinCostCmd();
		//line 134 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int cur_match_pos = 0;
		//line 135 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i = 0;
		//line 136 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( ( i + 3 ) < num_bytes ))
		{
			//line 137 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int cur_ix = ( position + i );
			//line 138 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int cur_ix_masked = ( cur_ix & ringbuffer_mask );
			//line 139 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int max_distance = ((int) (java.lang.Math.min(((double) (cur_ix) ), ((double) (max_backward_limit) ))) );
			//line 140 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int max_length = ( num_bytes - i );
			//line 142 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			queue.Push(i, ( ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[i]) ).cost - model.GetLiteralCosts(0, i) ));
			//line 144 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int min_len = encode.Backward_references.ComputeMinimumCopyLength(queue, nodes, model, i, min_cost_cmd);
			//line 149 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int k = 0;
			//line 150 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			while (( ( k < 5 ) && ( k < queue.size() ) ))
			{
				//line 151 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int start = queue.GetStartPos(k);
				//line 152 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				double start_costdiff = ( ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[start]) ).cost - model.GetLiteralCosts(0, start) );
				//line 154 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int[] dist_cache2 = ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[start]) ).distance_cache;
				//line 159 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int best_len = ( min_len - 1 );
				//line 160 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 160 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g = 0;
					//line 160 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					while (( _g < 16 ))
					{
						//line 160 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int j = _g++;
						//line 161 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int idx = ((int) (haxe.lang.Runtime.toInt(encode.Hash.kDistanceCacheIndex.__get(j))) );
						//line 162 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int backward = ( ((int) (((int[]) (dist_cache2) )[idx]) ) + ((int) (haxe.lang.Runtime.toInt(encode.Hash.kDistanceCacheOffset.__get(j))) ) );
						//line 163 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int prev_ix = ( cur_ix - backward );
						//line 164 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if (( prev_ix >= cur_ix )) 
						{
							//line 165 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							continue;
						}
						
						//line 167 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if (( backward > max_distance )) 
						{
							//line 168 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							continue;
						}
						
						//line 170 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						prev_ix &= ringbuffer_mask;
						//line 172 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if (( ( ( ( cur_ix_masked + best_len ) > ringbuffer_mask ) || ( ( prev_ix + best_len ) > ringbuffer_mask ) ) || ( ((int) (((int[]) (ringbuffer) )[( cur_ix_masked + best_len )]) ) != ((int) (((int[]) (ringbuffer) )[( prev_ix + best_len )]) ) ) )) 
						{
							//line 176 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							continue;
						}
						
						//line 178 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int len = encode.Find_match_length.FindMatchLengthWithLimit(ringbuffer, prev_ix, ringbuffer, cur_ix_masked, max_length);
						//line 182 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						{
							//line 182 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							int _g2 = ( best_len + 1 );
							//line 182 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							int _g1 = ( len + 1 );
							//line 182 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							while (( _g2 < _g1 ))
							{
								//line 182 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								int l = _g2++;
								//line 183 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								double cmd_cost = model.GetCommandCost(j, l, ( i - start ));
								//line 184 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								double cost = ( ( start_costdiff + cmd_cost ) + model.GetLiteralCosts(0, i) );
								//line 185 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								if (( cost < ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[( i + l )]) ).cost )) 
								{
									//line 186 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
									encode.Backward_references.UpdateZopfliNode(nodes, 0, i, start, l, l, backward, j, max_distance, dist_cache2, cost);
								}
								
								//line 189 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								best_len = l;
							}
							
						}
						
					}
					
				}
				
				//line 196 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( k >= 2 )) 
				{
					//line 196 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					 ++ k;
					//line 196 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					continue;
				}
				
				//line 199 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int len1 = min_len;
				//line 200 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 200 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g11 = 0;
					//line 200 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g3 = ((int) (((int[]) (num_matches) )[i]) );
					//line 200 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					while (( _g11 < _g3 ))
					{
						//line 200 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int j1 = _g11++;
						//line 201 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						encode.hash.BackwardMatch match = matches.__get(( cur_match_pos + j1 ));
						//line 202 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int dist = match.distance;
						//line 203 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						boolean is_dictionary_match = ( dist > max_distance );
						//line 206 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int dist_code = ( dist + 15 );
						//line 210 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int max_len = match.length();
						//line 211 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if (( ( len1 < max_len ) && (( is_dictionary_match || ( max_len > 325 ) )) )) 
						{
							//line 212 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							len1 = max_len;
						}
						
						//line 214 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						while (( len1 <= max_len ))
						{
							//line 215 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							int len_code = ( (is_dictionary_match) ? (match.length_code()) : (len1) );
							//line 216 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							double cmd_cost1 = model.GetCommandCost(dist_code, len_code, ( i - start ));
							//line 218 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							double cost1 = ( ( start_costdiff + cmd_cost1 ) + model.GetLiteralCosts(0, i) );
							//line 219 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							if (( cost1 < ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[( i + len1 )]) ).cost )) 
							{
								//line 220 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
								encode.Backward_references.UpdateZopfliNode(nodes, 0, i, start, len1, len_code, dist, dist_code, max_distance, dist_cache2, cost1);
							}
							
							//line 223 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							 ++ len1;
						}
						
					}
					
				}
				
				//line 226 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				 ++ k;
			}
			
			//line 229 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			cur_match_pos += ((int) (((int[]) (num_matches) )[i]) );
			//line 233 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			if (( ( ((int) (((int[]) (num_matches) )[i]) ) == 1 ) && ( matches.__get(( cur_match_pos - 1 )).length() > 325 ) )) 
			{
				//line 235 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				i += ( matches.__get(( cur_match_pos - 1 )).length() - 1 );
				//line 236 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				queue.Clear();
			}
			
			//line 238 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			 ++ i;
		}
		
		//line 241 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		haxe.root.Array<java.lang.Object> backwards = new haxe.root.Array<java.lang.Object>();
		//line 242 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int index = num_bytes;
		//line 243 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[index]) ).cost == encode.Backward_references.kInfinity ))
		{
			//line 243 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			 -- index;
		}
		
		//line 244 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( index > 0 ))
		{
			//line 245 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int len2 = ( ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[index]) ).length + ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[index]) ).insert_length );
			//line 246 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			backwards.push(len2);
			//line 247 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			index -= len2;
		}
		
		//line 250 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		haxe.root.Array<java.lang.Object> path = new haxe.root.Array<java.lang.Object>();
		//line 251 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i1 = backwards.length;
		//line 252 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( i1 > 0 ))
		{
			//line 253 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			path.push(((int) (haxe.lang.Runtime.toInt(backwards.__get(( i1 - 1 )))) ));
			//line 254 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			 -- i1;
		}
		
		//line 257 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int pos = 0;
		//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		{
			//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int _g12 = 0;
			//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int _g4 = path.length;
			//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			while (( _g12 < _g4 ))
			{
				//line 258 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int i2 = _g12++;
				//line 259 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.backward_references.ZopfliNode next = ((encode.backward_references.ZopfliNode) (((encode.backward_references.ZopfliNode[]) (nodes) )[( pos + ((int) (haxe.lang.Runtime.toInt(path.__get(i2))) ) )]) );
				//line 260 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int copy_length = next.length;
				//line 261 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int insert_length = next.insert_length;
				//line 262 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				pos += insert_length;
				//line 263 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( i2 == 0 )) 
				{
					//line 264 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					insert_length += ((int) (haxe.lang.Runtime.toInt(last_insert_len.__get(0))) );
				}
				
				//line 266 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int distance = next.distance;
				//line 267 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int len_code1 = next.length_code;
				//line 268 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int max_distance1 = ((int) (java.lang.Math.min(((double) (( position + pos )) ), ((double) (max_backward_limit) ))) );
				//line 269 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				boolean is_dictionary = ( distance > max_distance1 );
				//line 270 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int dist_code1 = next.distance_code;
				//line 272 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.command.Command command = new encode.command.Command();
				//line 273 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				command.Command4(insert_length, copy_length, len_code1, dist_code1);
				//line 275 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				commands.__set(commands_off++, command);
				//line 277 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if ((  ! (is_dictionary)  && ( dist_code1 > 0 ) )) 
				{
					//line 278 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[3] = ((int) (((int[]) (dist_cache) )[2]) );
					//line 279 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[2] = ((int) (((int[]) (dist_cache) )[1]) );
					//line 280 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[1] = ((int) (((int[]) (dist_cache) )[0]) );
					//line 281 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[0] = distance;
				}
				
				//line 284 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 284 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int __temp_index1 = 0;
					//line 284 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					num_literals.__set(__temp_index1, ( ((int) (haxe.lang.Runtime.toInt(num_literals.__get(__temp_index1))) ) + insert_length ));
				}
				
				//line 285 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				insert_length = 0;
				//line 286 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				pos += copy_length;
			}
			
		}
		
		//line 288 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		last_insert_len.__set(0, ( num_bytes - pos ));
		//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		{
			//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int __temp_index2 = 0;
			//line 289 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			num_commands.__set(__temp_index2, ( ((int) (haxe.lang.Runtime.toInt(num_commands.__get(__temp_index2))) ) + ( commands_off - orig_commands_off ) ));
		}
		
	}
	
	
	public static void CreateBackwardReferences_HashLongestMatch(int num_bytes, int position, int[] ringbuffer, int ringbuffer_mask, int max_backward_limit, int quality, encode.hash.HashLongestMatch hasher, int[] dist_cache, haxe.root.Array<java.lang.Object> last_insert_len, haxe.root.Array<encode.command.Command> commands, int commands_off, haxe.root.Array<java.lang.Object> num_commands, haxe.root.Array<java.lang.Object> num_literals)
	{
		//line 305 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		if (( ( num_bytes >= 3 ) && ( position >= 3 ) )) 
		{
			//line 309 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			hasher.Store(ringbuffer, ( ( position - 3 ) & ringbuffer_mask ), ( position - 3 ));
			//line 311 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			hasher.Store(ringbuffer, ( ( position - 2 ) & ringbuffer_mask ), ( position - 2 ));
			//line 313 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			hasher.Store(ringbuffer, ( ( position - 1 ) & ringbuffer_mask ), ( position - 1 ));
		}
		
		//line 317 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int orig_commands_off = commands_off;
		//line 318 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int insert_length = ((int) (haxe.lang.Runtime.toInt(last_insert_len.__get(0))) );
		//line 319 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i = ( position & ringbuffer_mask );
		//line 320 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i_diff = ( position - i );
		//line 321 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i_end = ( i + num_bytes );
		//line 324 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int random_heuristics_window_size = ( (( quality < 9 )) ? (64) : (512) );
		//line 325 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int apply_random_heuristics = ( i + random_heuristics_window_size );
		//line 330 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( ( i + 3 ) < i_end ))
		{
			//line 331 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int max_length = ( i_end - i );
			//line 332 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int max_distance = ((int) (java.lang.Math.min(((double) (( i + i_diff )) ), ((double) (max_backward_limit) ))) );
			//line 333 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_len = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 334 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_len_code = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 335 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_dist = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 336 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_score = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (4.0) )});
			//line 337 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			boolean match_found = hasher.FindLongestMatch(ringbuffer, ringbuffer_mask, dist_cache, ( i + i_diff ), max_length, max_distance, best_len, best_len_code, best_dist, best_score);
			//line 341 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			if (match_found) 
			{
				//line 343 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int delayed_backward_references_in_row = 0;
				//line 344 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				while (true)
				{
					//line 345 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					 -- max_length;
					//line 346 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_len_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{( (( quality < 5 )) ? (((int) (java.lang.Math.min(((double) (( ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) ) - 1 )) ), ((double) (max_length) ))) )) : (0) )});
					//line 347 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_len_code_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
					//line 348 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_dist_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
					//line 349 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_score_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (4.0) )});
					//line 350 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					max_distance = ((int) (java.lang.Math.min(((double) (( ( i + i_diff ) + 1 )) ), ((double) (max_backward_limit) ))) );
					//line 351 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					hasher.Store(ringbuffer, i, ( i + i_diff ));
					//line 352 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					match_found = hasher.FindLongestMatch(ringbuffer, ringbuffer_mask, dist_cache, ( ( i + i_diff ) + 1 ), max_length, max_distance, best_len_2, best_len_code_2, best_dist_2, best_score_2);
					//line 357 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( match_found && ( ((double) (haxe.lang.Runtime.toDouble(best_score_2.__get(0))) ) >= ( ((double) (haxe.lang.Runtime.toDouble(best_score.__get(0))) ) + 7.0 ) ) )) 
					{
						//line 360 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						 ++ i;
						//line 361 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						 ++ insert_length;
						//line 362 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_len.__set(0, ((int) (haxe.lang.Runtime.toInt(best_len_2.__get(0))) ));
						//line 363 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_len_code.__set(0, ((int) (haxe.lang.Runtime.toInt(best_len_code_2.__get(0))) ));
						//line 364 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_dist.__set(0, ((int) (haxe.lang.Runtime.toInt(best_dist_2.__get(0))) ));
						//line 365 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_score.__set(0, ((double) (haxe.lang.Runtime.toDouble(best_score_2.__get(0))) ));
						//line 366 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if ((  ++ delayed_backward_references_in_row < 4 )) 
						{
							//line 367 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							continue;
						}
						
					}
					
					//line 370 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					break;
				}
				
				//line 372 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				apply_random_heuristics = ( ( i + ( 2 * ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) ) ) ) + random_heuristics_window_size );
				//line 374 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				max_distance = ((int) (java.lang.Math.min(((double) (( i + i_diff )) ), ((double) (max_backward_limit) ))) );
				//line 376 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int distance_code = encode.Backward_references.ComputeDistanceCode(((int) (haxe.lang.Runtime.toInt(best_dist.__get(0))) ), max_distance, quality, dist_cache);
				//line 378 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( ( ((int) (haxe.lang.Runtime.toInt(best_dist.__get(0))) ) <= max_distance ) && ( distance_code > 0 ) )) 
				{
					//line 379 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[3] = ((int) (((int[]) (dist_cache) )[2]) );
					//line 380 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[2] = ((int) (((int[]) (dist_cache) )[1]) );
					//line 381 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[1] = ((int) (((int[]) (dist_cache) )[0]) );
					//line 382 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[0] = ((int) (haxe.lang.Runtime.toInt(best_dist.__get(0))) );
				}
				
				//line 384 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.command.Command command = new encode.command.Command();
				//line 385 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				command.Command4(insert_length, ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(best_len_code.__get(0))) ), distance_code);
				//line 387 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				commands.__set(commands_off++, command);
				//line 388 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 388 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int __temp_index1 = 0;
					//line 388 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					num_literals.__set(__temp_index1, ( ((int) (haxe.lang.Runtime.toInt(num_literals.__get(__temp_index1))) ) + insert_length ));
				}
				
				//line 389 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				insert_length = 0;
				//line 392 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 392 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g1 = 1;
					//line 392 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g = ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) );
					//line 392 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					while (( _g1 < _g ))
					{
						//line 392 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int j = _g1++;
						//line 393 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						hasher.Store(ringbuffer, ( i + j ), ( ( i + i_diff ) + j ));
					}
					
				}
				
				//line 395 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				i += ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) );
			}
			else
			{
				//line 397 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				 ++ insert_length;
				//line 398 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.Store(ringbuffer, i, ( i + i_diff ));
				//line 399 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				 ++ i;
				//line 404 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( i > apply_random_heuristics )) 
				{
					//line 406 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( i > ( apply_random_heuristics + ( 4 * random_heuristics_window_size ) ) )) 
					{
						//line 413 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int i_jump = ((int) (java.lang.Math.min(((double) (( i + 16 )) ), ((double) (( i_end - 4 )) ))) );
						//line 414 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						while (( i < i_jump ))
						{
							//line 415 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							hasher.Store(ringbuffer, i, ( i + i_diff ));
							//line 416 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							insert_length += 4;
							//line 417 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							i += 4;
						}
						
					}
					else
					{
						//line 420 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int i_jump1 = ((int) (java.lang.Math.min(((double) (( i + 8 )) ), ((double) (( i_end - 3 )) ))) );
						//line 421 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						while (( i < i_jump1 ))
						{
							//line 422 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							hasher.Store(ringbuffer, i, ( i + i_diff ));
							//line 423 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							insert_length += 2;
							//line 424 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							i += 2;
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 430 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		insert_length += ( i_end - i );
		//line 431 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		last_insert_len.__set(0, insert_length);
		//line 432 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		{
			//line 432 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int __temp_index2 = 0;
			//line 432 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			num_commands.__set(__temp_index2, ( ((int) (haxe.lang.Runtime.toInt(num_commands.__get(__temp_index2))) ) + ( commands_off - orig_commands_off ) ));
		}
		
	}
	
	
	public static void CreateBackwardReferences_HashLongestMatchQuickly(int num_bytes, int position, int[] ringbuffer, int ringbuffer_mask, int max_backward_limit, int quality, encode.hash.HashLongestMatchQuickly hasher, int[] dist_cache, haxe.root.Array<java.lang.Object> last_insert_len, haxe.root.Array<encode.command.Command> commands, int commands_off, haxe.root.Array<java.lang.Object> num_commands, haxe.root.Array<java.lang.Object> num_literals)
	{
		//line 448 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		if (( ( num_bytes >= 3 ) && ( position >= 3 ) )) 
		{
			//line 452 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			hasher.Store(ringbuffer, ( ( position - 3 ) & ringbuffer_mask ), ( position - 3 ));
			//line 454 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			hasher.Store(ringbuffer, ( ( position - 2 ) & ringbuffer_mask ), ( position - 2 ));
			//line 456 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			hasher.Store(ringbuffer, ( ( position - 1 ) & ringbuffer_mask ), ( position - 1 ));
		}
		
		//line 460 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int orig_commands_off = commands_off;
		//line 461 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int insert_length = ((int) (haxe.lang.Runtime.toInt(last_insert_len.__get(0))) );
		//line 462 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i = ( position & ringbuffer_mask );
		//line 463 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i_diff = ( position - i );
		//line 464 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int i_end = ( i + num_bytes );
		//line 467 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int random_heuristics_window_size = ( (( quality < 9 )) ? (64) : (512) );
		//line 468 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		int apply_random_heuristics = ( i + random_heuristics_window_size );
		//line 473 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		while (( ( i + 3 ) < i_end ))
		{
			//line 474 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int max_length = ( i_end - i );
			//line 475 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int max_distance = ((int) (java.lang.Math.min(((double) (( i + i_diff )) ), ((double) (max_backward_limit) ))) );
			//line 476 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_len = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 477 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_len_code = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 478 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_dist = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
			//line 479 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<java.lang.Object> best_score = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (4.0) )});
			//line 480 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			boolean match_found = hasher.FindLongestMatch(ringbuffer, ringbuffer_mask, dist_cache, ( i + i_diff ), max_length, max_distance, best_len, best_len_code, best_dist, best_score);
			//line 484 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			if (match_found) 
			{
				//line 486 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int delayed_backward_references_in_row = 0;
				//line 487 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				while (true)
				{
					//line 488 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					 -- max_length;
					//line 489 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_len_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{( (( quality < 5 )) ? (((int) (java.lang.Math.min(((double) (( ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) ) - 1 )) ), ((double) (max_length) ))) )) : (0) )});
					//line 490 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_len_code_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
					//line 491 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_dist_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0});
					//line 492 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.Array<java.lang.Object> best_score_2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (4.0) )});
					//line 493 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					max_distance = ((int) (java.lang.Math.min(((double) (( ( i + i_diff ) + 1 )) ), ((double) (max_backward_limit) ))) );
					//line 494 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					hasher.Store(ringbuffer, i, ( i + i_diff ));
					//line 495 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					match_found = hasher.FindLongestMatch(ringbuffer, ringbuffer_mask, dist_cache, ( ( i + i_diff ) + 1 ), max_length, max_distance, best_len_2, best_len_code_2, best_dist_2, best_score_2);
					//line 500 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( match_found && ( ((double) (haxe.lang.Runtime.toDouble(best_score_2.__get(0))) ) >= ( ((double) (haxe.lang.Runtime.toDouble(best_score.__get(0))) ) + 7.0 ) ) )) 
					{
						//line 503 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						 ++ i;
						//line 504 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						 ++ insert_length;
						//line 505 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_len.__set(0, ((int) (haxe.lang.Runtime.toInt(best_len_2.__get(0))) ));
						//line 506 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_len_code.__set(0, ((int) (haxe.lang.Runtime.toInt(best_len_code_2.__get(0))) ));
						//line 507 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_dist.__set(0, ((int) (haxe.lang.Runtime.toInt(best_dist_2.__get(0))) ));
						//line 508 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						best_score.__set(0, ((double) (haxe.lang.Runtime.toDouble(best_score_2.__get(0))) ));
						//line 509 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						if ((  ++ delayed_backward_references_in_row < 4 )) 
						{
							//line 510 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							continue;
						}
						
					}
					
					//line 513 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					break;
				}
				
				//line 515 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				apply_random_heuristics = ( ( i + ( 2 * ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) ) ) ) + random_heuristics_window_size );
				//line 517 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				max_distance = ((int) (java.lang.Math.min(((double) (( i + i_diff )) ), ((double) (max_backward_limit) ))) );
				//line 519 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int distance_code = encode.Backward_references.ComputeDistanceCode(((int) (haxe.lang.Runtime.toInt(best_dist.__get(0))) ), max_distance, quality, dist_cache);
				//line 521 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( ( ((int) (haxe.lang.Runtime.toInt(best_dist.__get(0))) ) <= max_distance ) && ( distance_code > 0 ) )) 
				{
					//line 522 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[3] = ((int) (((int[]) (dist_cache) )[2]) );
					//line 523 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[2] = ((int) (((int[]) (dist_cache) )[1]) );
					//line 524 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[1] = ((int) (((int[]) (dist_cache) )[0]) );
					//line 525 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					((int[]) (dist_cache) )[0] = ((int) (haxe.lang.Runtime.toInt(best_dist.__get(0))) );
				}
				
				//line 527 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.command.Command command = new encode.command.Command();
				//line 528 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				command.Command4(insert_length, ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) ), ((int) (haxe.lang.Runtime.toInt(best_len_code.__get(0))) ), distance_code);
				//line 530 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				commands.__set(commands_off++, command);
				//line 531 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 531 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int __temp_index1 = 0;
					//line 531 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					num_literals.__set(__temp_index1, ( ((int) (haxe.lang.Runtime.toInt(num_literals.__get(__temp_index1))) ) + insert_length ));
				}
				
				//line 532 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				insert_length = 0;
				//line 535 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				{
					//line 535 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g1 = 1;
					//line 535 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int _g = ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) );
					//line 535 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					while (( _g1 < _g ))
					{
						//line 535 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int j = _g1++;
						//line 536 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						hasher.Store(ringbuffer, ( i + j ), ( ( i + i_diff ) + j ));
					}
					
				}
				
				//line 538 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				i += ((int) (haxe.lang.Runtime.toInt(best_len.__get(0))) );
			}
			else
			{
				//line 540 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				 ++ insert_length;
				//line 541 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.Store(ringbuffer, i, ( i + i_diff ));
				//line 542 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				 ++ i;
				//line 547 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( i > apply_random_heuristics )) 
				{
					//line 549 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( i > ( apply_random_heuristics + ( 4 * random_heuristics_window_size ) ) )) 
					{
						//line 556 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int i_jump = ((int) (java.lang.Math.min(((double) (( i + 16 )) ), ((double) (( i_end - 4 )) ))) );
						//line 557 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						while (( i < i_jump ))
						{
							//line 558 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							hasher.Store(ringbuffer, i, ( i + i_diff ));
							//line 559 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							insert_length += 4;
							//line 560 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							i += 4;
						}
						
					}
					else
					{
						//line 563 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int i_jump1 = ((int) (java.lang.Math.min(((double) (( i + 8 )) ), ((double) (( i_end - 3 )) ))) );
						//line 564 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						while (( i < i_jump1 ))
						{
							//line 565 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							hasher.Store(ringbuffer, i, ( i + i_diff ));
							//line 566 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							insert_length += 2;
							//line 567 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							i += 2;
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 573 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		insert_length += ( i_end - i );
		//line 574 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		last_insert_len.__set(0, insert_length);
		//line 575 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		{
			//line 575 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int __temp_index2 = 0;
			//line 575 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			num_commands.__set(__temp_index2, ( ((int) (haxe.lang.Runtime.toInt(num_commands.__get(__temp_index2))) ) + ( commands_off - orig_commands_off ) ));
		}
		
	}
	
	
	public static void CreateBackwardReferences(int num_bytes, int position, int[] ringbuffer, int ringbuffer_mask, double[] literal_cost, int literal_cost_mask, int max_backward_limit, int quality, encode.hash.Hashers hashers, int hash_type, int[] dist_cache, haxe.root.Array<java.lang.Object> last_insert_len, haxe.root.Array<encode.command.Command> commands, int commands_off, haxe.root.Array<java.lang.Object> num_commands, haxe.root.Array<java.lang.Object> num_literals)
	{
		//line 594 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		boolean zopflify = ( quality > 9 );
		//line 595 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		if (zopflify) 
		{
			//line 596 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			encode.hash.HashLongestMatch hasher = hashers.hash_h9;
			//line 597 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			if (( ( num_bytes >= 3 ) && ( position >= 3 ) )) 
			{
				//line 601 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.Store(ringbuffer, ( ( position - 3 ) & ringbuffer_mask ), ( position - 3 ));
				//line 603 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.Store(ringbuffer, ( ( position - 2 ) & ringbuffer_mask ), ( position - 2 ));
				//line 605 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.Store(ringbuffer, ( ( position - 1 ) & ringbuffer_mask ), ( position - 1 ));
			}
			
			//line 608 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int[] num_matches = haxe.root.FunctionMalloc.mallocInt(num_bytes);
			//line 609 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			haxe.root.Array<encode.hash.BackwardMatch> matches = haxe.root.FunctionMalloc.mallocArray_encode_hash_BackwardMatch(encode.hash.BackwardMatch.class, ( 3 * num_bytes ));
			//line 610 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int cur_match_pos = 0;
			//line 611 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int i = 0;
			//line 612 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			while (( ( i + 3 ) < num_bytes ))
			{
				//line 613 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int max_distance = ((int) (java.lang.Math.min(((double) (( position + i )) ), ((double) (max_backward_limit) ))) );
				//line 614 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int max_length = ( num_bytes - i );
				//line 616 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( matches.length < ( cur_match_pos + 325 ) )) 
				{
					//line 617 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					matches.concat(haxe.root.FunctionMalloc.mallocArray_encode_hash_BackwardMatch(encode.hash.BackwardMatch.class, ( ( cur_match_pos + 325 ) - matches.length )));
				}
				
				//line 619 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.FindAllMatches(ringbuffer, ringbuffer_mask, ( position + i ), max_length, max_distance, num_matches, i, matches, cur_match_pos);
				//line 623 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				hasher.Store(ringbuffer, ( ( position + i ) & ringbuffer_mask ), ( position + i ));
				//line 625 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				cur_match_pos += ((int) (((int[]) (num_matches) )[i]) );
				//line 626 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				if (( ((int) (((int[]) (num_matches) )[i]) ) == 1 )) 
				{
					//line 627 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int match_len = matches.__get(( cur_match_pos - 1 )).length();
					//line 628 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( match_len > 325 )) 
					{
						//line 629 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						int _g1 = 1;
						//line 629 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						while (( _g1 < match_len ))
						{
							//line 629 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							 ++ _g1;
							//line 630 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							 ++ i;
							//line 631 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							hasher.Store(ringbuffer, ( ( position + i ) & ringbuffer_mask ), ( position + i ));
							//line 633 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
							((int[]) (num_matches) )[i] = 0;
						}
						
					}
					
				}
				
				//line 637 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				 ++ i;
			}
			
			//line 639 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int orig_num_literals = ((int) (haxe.lang.Runtime.toInt(num_literals.__get(0))) );
			//line 640 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int orig_last_insert_len = ((int) (haxe.lang.Runtime.toInt(last_insert_len.__get(0))) );
			//line 641 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int[] this1 = new int[4];
			//line 641 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int[] orig_dist_cache = ((int[]) (this1) );
			//line 642 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			((int[]) (orig_dist_cache) )[0] = ((int) (((int[]) (dist_cache) )[0]) );
			//line 642 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			((int[]) (orig_dist_cache) )[1] = ((int) (((int[]) (dist_cache) )[1]) );
			//line 642 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			((int[]) (orig_dist_cache) )[2] = ((int) (((int[]) (dist_cache) )[2]) );
			//line 642 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			((int[]) (orig_dist_cache) )[3] = ((int) (((int[]) (dist_cache) )[3]) );
			//line 643 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			int orig_num_commands = ((int) (haxe.lang.Runtime.toInt(num_commands.__get(0))) );
			//line 645 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			{
				//line 645 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				int _g11 = 0;
				//line 645 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				while (( _g11 < 2 ))
				{
					//line 645 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					int i1 = _g11++;
					//line 646 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					encode.backward_references.ZopfliCostModel model = new encode.backward_references.ZopfliCostModel();
					//line 647 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					if (( i1 == 0 )) 
					{
						//line 648 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						model.SetFromLiteralCosts(num_bytes, position, literal_cost, literal_cost_mask);
					}
					else
					{
						//line 651 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
						model.SetFromCommands(num_bytes, position, ringbuffer, ringbuffer_mask, commands, ( ( commands_off + ((int) (haxe.lang.Runtime.toInt(num_commands.__get(0))) ) ) - orig_num_commands ), orig_last_insert_len);
					}
					
					//line 656 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					num_commands.__set(0, orig_num_commands);
					//line 657 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					num_literals.__set(0, orig_num_literals);
					//line 658 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					last_insert_len.__set(0, orig_last_insert_len);
					//line 659 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					haxe.root.DefaultFunctions.memcpy_Int(dist_cache, 0, orig_dist_cache, 0, 4);
					//line 660 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
					encode.Backward_references.ZopfliIterate(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, model, num_matches, matches, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				}
				
			}
			
			//line 664 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
			return ;
		}
		
		//line 667 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
		switch (hash_type)
		{
			case 1:
			{
				//line 669 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatchQuickly(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h1, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 669 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 2:
			{
				//line 674 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatchQuickly(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h2, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 674 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 3:
			{
				//line 679 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatchQuickly(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h3, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 679 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 4:
			{
				//line 684 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatchQuickly(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h4, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 684 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 5:
			{
				//line 689 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatch(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h5, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 689 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 6:
			{
				//line 694 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatch(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h6, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 694 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 7:
			{
				//line 699 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatch(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h7, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 699 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 8:
			{
				//line 704 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatch(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h8, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 704 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			case 9:
			{
				//line 709 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				encode.Backward_references.CreateBackwardReferences_HashLongestMatch(num_bytes, position, ringbuffer, ringbuffer_mask, max_backward_limit, quality, hashers.hash_h9, dist_cache, last_insert_len, commands, commands_off, num_commands, num_literals);
				//line 709 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
			
			default:
			{
				//line 713 "C:\\Users\\Dominik\\Brotli\\src\\encode\\Backward_references.hx"
				break;
			}
			
		}
		
	}
	
	
}


