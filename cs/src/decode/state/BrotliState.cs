// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace decode.state {
	public class BrotliState : global::haxe.lang.HxObject {
		
		public BrotliState(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public BrotliState() {
			global::decode.state.BrotliState.__hx_ctor_decode_state_BrotliState(this);
		}
		
		
		public static void __hx_ctor_decode_state_BrotliState(global::decode.state.BrotliState __hx_this) {
			unchecked {
				{
					uint[] this1 = null;
					this1 = new uint[18];
					__hx_this.code_length_code_lengths = ((uint[]) (this1) );
				}
				
				{
					global::decode.huffman.HuffmanCode[] this1 = null;
					this1 = new global::decode.huffman.HuffmanCode[32];
					__hx_this.table = ((global::decode.huffman.HuffmanCode[]) (this1) );
				}
				
				{
					int[] this1 = null;
					this1 = new int[3];
					__hx_this.block_type_rb_index = ((int[]) (this1) );
				}
				
				{
					int[] this1 = null;
					this1 = new int[6];
					__hx_this.block_type_rb = ((int[]) (this1) );
				}
				
				{
					int[] this1 = null;
					this1 = new int[3];
					__hx_this.num_block_types = ((int[]) (this1) );
				}
				
				{
					int[] this1 = null;
					this1 = new int[3];
					__hx_this.block_type = ((int[]) (this1) );
				}
				
				{
					int[] this1 = null;
					this1 = new int[3];
					__hx_this.block_length = ((int[]) (this1) );
				}
				
				__hx_this.br = new global::decode.bit_reader.BrotliBitReader();
				__hx_this.hgroup = global::FunctionMalloc.malloc_decode_huffman_HuffmanTreeGroup(typeof(global::decode.huffman.HuffmanTreeGroup), 3);
				{
					int[] this1 = null;
					this1 = new int[4];
					__hx_this.dist_rb = ((int[]) (this1) );
				}
				
				{
					int[] this1 = null;
					this1 = new int[2];
					__hx_this.sub_state = ((int[]) (this1) );
				}
				
			}
		}
		
		
		public int state;
		
		public int[] sub_state;
		
		public int pos;
		
		public int input_end;
		
		public int window_bits;
		
		public int max_backward_distance;
		
		public int max_distance;
		
		public int ringbuffer_size;
		
		public int ringbuffer_mask;
		
		public uint[] ringbuffer;
		
		public int ringbuffer_off;
		
		public uint[] ringbuffer_end;
		
		public int ringbuffer_end_off;
		
		public int[] dist_rb;
		
		public int dist_rb_idx;
		
		public uint prev_byte1;
		
		public uint prev_byte2;
		
		public global::decode.huffman.HuffmanTreeGroup[] hgroup;
		
		public global::decode.huffman.HuffmanCode[] block_type_trees;
		
		public global::decode.huffman.HuffmanCode[] block_len_trees;
		
		public global::decode.bit_reader.BrotliBitReader br;
		
		public int loop_counter;
		
		public int trivial_literal_context;
		
		public int meta_block_remaining_len;
		
		public int is_metadata;
		
		public int is_uncompressed;
		
		public int[] block_length;
		
		public int[] block_type;
		
		public int[] num_block_types;
		
		public int[] block_type_rb;
		
		public int[] block_type_rb_index;
		
		public int distance_postfix_bits;
		
		public int num_direct_distance_codes;
		
		public int distance_postfix_mask;
		
		public int num_distance_codes;
		
		public uint[] context_map;
		
		public int context_map_off;
		
		public uint[] context_modes;
		
		public int context_modes_off;
		
		public int num_literal_htrees;
		
		public uint[] dist_context_map;
		
		public int dist_context_map_off;
		
		public int num_dist_htrees;
		
		public int context_offset;
		
		public uint[] context_map_slice;
		
		public int context_map_slice_off;
		
		public uint literal_htree_index;
		
		public int dist_context_offset;
		
		public uint[] dist_context_map_slice;
		
		public int dist_context_map_slice_off;
		
		public uint dist_htree_index;
		
		public int context_lookup_offset1;
		
		public int context_lookup_offset2;
		
		public uint context_mode;
		
		public global::decode.huffman.HuffmanCode[] htree_command;
		
		public int htree_command_off;
		
		public int cmd_code;
		
		public int range_idx;
		
		public int insert_code;
		
		public int copy_code;
		
		public int insert_length;
		
		public int copy_length;
		
		public int distance_code;
		
		public int distance;
		
		public uint[] copy_src;
		
		public int copy_src_off;
		
		public uint[] copy_dst;
		
		public int copy_dst_off;
		
		public int nbytes;
		
		public int partially_written;
		
		public int htrees_decoded;
		
		public int symbol;
		
		public uint prev_code_len;
		
		public int repeat;
		
		public uint repeat_code_len;
		
		public int space;
		
		public global::decode.huffman.HuffmanCode[] table;
		
		public uint[] code_length_code_lengths;
		
		public int simple_code_or_skip;
		
		public uint[] code_lengths;
		
		public int code_lengths_off;
		
		public int htree_index;
		
		public global::decode.huffman.HuffmanCode[] next;
		
		public int next_off;
		
		public int context_index;
		
		public int max_run_length_prefix;
		
		public global::decode.huffman.HuffmanCode[] context_map_table;
		
		public uint[] custom_dict;
		
		public int custom_dict_off;
		
		public int custom_dict_size;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1000423964:
					{
						this.custom_dict_size = ((int) (@value) );
						return @value;
					}
					
					
					case 1130993268:
					{
						this.custom_dict_off = ((int) (@value) );
						return @value;
					}
					
					
					case 1236167740:
					{
						this.max_run_length_prefix = ((int) (@value) );
						return @value;
					}
					
					
					case 391845250:
					{
						this.context_index = ((int) (@value) );
						return @value;
					}
					
					
					case 1266403:
					{
						this.next_off = ((int) (@value) );
						return @value;
					}
					
					
					case 511010969:
					{
						this.htree_index = ((int) (@value) );
						return @value;
					}
					
					
					case 1555261035:
					{
						this.code_lengths_off = ((int) (@value) );
						return @value;
					}
					
					
					case 991996278:
					{
						this.simple_code_or_skip = ((int) (@value) );
						return @value;
					}
					
					
					case 23497926:
					{
						this.space = ((int) (@value) );
						return @value;
					}
					
					
					case 1633548583:
					{
						this.repeat_code_len = ((uint) (@value) );
						return @value;
					}
					
					
					case 108828507:
					{
						this.repeat = ((int) (@value) );
						return @value;
					}
					
					
					case 364256911:
					{
						this.prev_code_len = ((uint) (@value) );
						return @value;
					}
					
					
					case 1860022104:
					{
						this.symbol = ((int) (@value) );
						return @value;
					}
					
					
					case 351394276:
					{
						this.htrees_decoded = ((int) (@value) );
						return @value;
					}
					
					
					case 1850903718:
					{
						this.partially_written = ((int) (@value) );
						return @value;
					}
					
					
					case 953792829:
					{
						this.nbytes = ((int) (@value) );
						return @value;
					}
					
					
					case 518477611:
					{
						this.copy_dst_off = ((int) (@value) );
						return @value;
					}
					
					
					case 1585320842:
					{
						this.copy_src_off = ((int) (@value) );
						return @value;
					}
					
					
					case 1811518261:
					{
						this.distance = ((int) (@value) );
						return @value;
					}
					
					
					case 691108279:
					{
						this.distance_code = ((int) (@value) );
						return @value;
					}
					
					
					case 373422960:
					{
						this.copy_length = ((int) (@value) );
						return @value;
					}
					
					
					case 89861228:
					{
						this.insert_length = ((int) (@value) );
						return @value;
					}
					
					
					case 1738768695:
					{
						this.copy_code = ((int) (@value) );
						return @value;
					}
					
					
					case 693975859:
					{
						this.insert_code = ((int) (@value) );
						return @value;
					}
					
					
					case 254611835:
					{
						this.range_idx = ((int) (@value) );
						return @value;
					}
					
					
					case 1135318098:
					{
						this.cmd_code = ((int) (@value) );
						return @value;
					}
					
					
					case 2012313602:
					{
						this.htree_command_off = ((int) (@value) );
						return @value;
					}
					
					
					case 1856599795:
					{
						this.context_mode = ((uint) (@value) );
						return @value;
					}
					
					
					case 1728038602:
					{
						this.context_lookup_offset2 = ((int) (@value) );
						return @value;
					}
					
					
					case 1728038601:
					{
						this.context_lookup_offset1 = ((int) (@value) );
						return @value;
					}
					
					
					case 2107178752:
					{
						this.dist_htree_index = ((uint) (@value) );
						return @value;
					}
					
					
					case 562771638:
					{
						this.dist_context_map_slice_off = ((int) (@value) );
						return @value;
					}
					
					
					case 125264668:
					{
						this.dist_context_offset = ((int) (@value) );
						return @value;
					}
					
					
					case 644524681:
					{
						this.literal_htree_index = ((uint) (@value) );
						return @value;
					}
					
					
					case 743635343:
					{
						this.context_map_slice_off = ((int) (@value) );
						return @value;
					}
					
					
					case 614743843:
					{
						this.context_offset = ((int) (@value) );
						return @value;
					}
					
					
					case 315031597:
					{
						this.num_dist_htrees = ((int) (@value) );
						return @value;
					}
					
					
					case 1658629475:
					{
						this.dist_context_map_off = ((int) (@value) );
						return @value;
					}
					
					
					case 41127190:
					{
						this.num_literal_htrees = ((int) (@value) );
						return @value;
					}
					
					
					case 137889424:
					{
						this.context_modes_off = ((int) (@value) );
						return @value;
					}
					
					
					case 1290819452:
					{
						this.context_map_off = ((int) (@value) );
						return @value;
					}
					
					
					case 995782645:
					{
						this.num_distance_codes = ((int) (@value) );
						return @value;
					}
					
					
					case 1832984000:
					{
						this.distance_postfix_mask = ((int) (@value) );
						return @value;
					}
					
					
					case 11327097:
					{
						this.num_direct_distance_codes = ((int) (@value) );
						return @value;
					}
					
					
					case 1711396826:
					{
						this.distance_postfix_bits = ((int) (@value) );
						return @value;
					}
					
					
					case 1164511439:
					{
						this.is_uncompressed = ((int) (@value) );
						return @value;
					}
					
					
					case 1146992036:
					{
						this.is_metadata = ((int) (@value) );
						return @value;
					}
					
					
					case 495353696:
					{
						this.meta_block_remaining_len = ((int) (@value) );
						return @value;
					}
					
					
					case 382782953:
					{
						this.trivial_literal_context = ((int) (@value) );
						return @value;
					}
					
					
					case 506245857:
					{
						this.loop_counter = ((int) (@value) );
						return @value;
					}
					
					
					case 90195614:
					{
						this.prev_byte2 = ((uint) (@value) );
						return @value;
					}
					
					
					case 90195613:
					{
						this.prev_byte1 = ((uint) (@value) );
						return @value;
					}
					
					
					case 306268135:
					{
						this.dist_rb_idx = ((int) (@value) );
						return @value;
					}
					
					
					case 497938428:
					{
						this.ringbuffer_end_off = ((int) (@value) );
						return @value;
					}
					
					
					case 204992800:
					{
						this.ringbuffer_off = ((int) (@value) );
						return @value;
					}
					
					
					case 593813019:
					{
						this.ringbuffer_mask = ((int) (@value) );
						return @value;
					}
					
					
					case 660749808:
					{
						this.ringbuffer_size = ((int) (@value) );
						return @value;
					}
					
					
					case 692063088:
					{
						this.max_distance = ((int) (@value) );
						return @value;
					}
					
					
					case 1130349238:
					{
						this.max_backward_distance = ((int) (@value) );
						return @value;
					}
					
					
					case 1372404981:
					{
						this.window_bits = ((int) (@value) );
						return @value;
					}
					
					
					case 459921894:
					{
						this.input_end = ((int) (@value) );
						return @value;
					}
					
					
					case 5594516:
					{
						this.pos = ((int) (@value) );
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1000423964:
					{
						this.custom_dict_size = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1130993268:
					{
						this.custom_dict_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 2005494788:
					{
						this.custom_dict = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 151148891:
					{
						this.context_map_table = ((global::decode.huffman.HuffmanCode[]) (@value) );
						return @value;
					}
					
					
					case 1236167740:
					{
						this.max_run_length_prefix = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 391845250:
					{
						this.context_index = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1266403:
					{
						this.next_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1224901875:
					{
						this.next = ((global::decode.huffman.HuffmanCode[]) (@value) );
						return @value;
					}
					
					
					case 511010969:
					{
						this.htree_index = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1555261035:
					{
						this.code_lengths_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1696609403:
					{
						this.code_lengths = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 991996278:
					{
						this.simple_code_or_skip = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 607184738:
					{
						this.code_length_code_lengths = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 182695950:
					{
						this.table = ((global::decode.huffman.HuffmanCode[]) (@value) );
						return @value;
					}
					
					
					case 23497926:
					{
						this.space = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1633548583:
					{
						this.repeat_code_len = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 108828507:
					{
						this.repeat = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 364256911:
					{
						this.prev_code_len = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1860022104:
					{
						this.symbol = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 351394276:
					{
						this.htrees_decoded = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1850903718:
					{
						this.partially_written = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 953792829:
					{
						this.nbytes = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 518477611:
					{
						this.copy_dst_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1490863419:
					{
						this.copy_dst = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 1585320842:
					{
						this.copy_src_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1491609114:
					{
						this.copy_src = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 1811518261:
					{
						this.distance = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 691108279:
					{
						this.distance_code = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 373422960:
					{
						this.copy_length = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 89861228:
					{
						this.insert_length = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1738768695:
					{
						this.copy_code = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 693975859:
					{
						this.insert_code = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 254611835:
					{
						this.range_idx = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1135318098:
					{
						this.cmd_code = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 2012313602:
					{
						this.htree_command_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1438772882:
					{
						this.htree_command = ((global::decode.huffman.HuffmanCode[]) (@value) );
						return @value;
					}
					
					
					case 1856599795:
					{
						this.context_mode = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1728038602:
					{
						this.context_lookup_offset2 = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1728038601:
					{
						this.context_lookup_offset1 = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 2107178752:
					{
						this.dist_htree_index = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 562771638:
					{
						this.dist_context_map_slice_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 654394182:
					{
						this.dist_context_map_slice = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 125264668:
					{
						this.dist_context_offset = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 644524681:
					{
						this.literal_htree_index = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 743635343:
					{
						this.context_map_slice_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 2095474079:
					{
						this.context_map_slice = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 614743843:
					{
						this.context_offset = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 315031597:
					{
						this.num_dist_htrees = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1658629475:
					{
						this.dist_context_map_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 275554163:
					{
						this.dist_context_map = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 41127190:
					{
						this.num_literal_htrees = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 137889424:
					{
						this.context_modes_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1704893984:
					{
						this.context_modes = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 1290819452:
					{
						this.context_map_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 826870028:
					{
						this.context_map = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 995782645:
					{
						this.num_distance_codes = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1832984000:
					{
						this.distance_postfix_mask = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 11327097:
					{
						this.num_direct_distance_codes = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1711396826:
					{
						this.distance_postfix_bits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1453603254:
					{
						this.block_type_rb_index = ((int[]) (@value) );
						return @value;
					}
					
					
					case 186833699:
					{
						this.block_type_rb = ((int[]) (@value) );
						return @value;
					}
					
					
					case 406749710:
					{
						this.num_block_types = ((int[]) (@value) );
						return @value;
					}
					
					
					case 1146110508:
					{
						this.block_type = ((int[]) (@value) );
						return @value;
					}
					
					
					case 1918313688:
					{
						this.block_length = ((int[]) (@value) );
						return @value;
					}
					
					
					case 1164511439:
					{
						this.is_uncompressed = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1146992036:
					{
						this.is_metadata = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 495353696:
					{
						this.meta_block_remaining_len = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 382782953:
					{
						this.trivial_literal_context = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 506245857:
					{
						this.loop_counter = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 21968:
					{
						this.br = ((global::decode.bit_reader.BrotliBitReader) (@value) );
						return @value;
					}
					
					
					case 210480505:
					{
						this.block_len_trees = ((global::decode.huffman.HuffmanCode[]) (@value) );
						return @value;
					}
					
					
					case 547883970:
					{
						this.block_type_trees = ((global::decode.huffman.HuffmanCode[]) (@value) );
						return @value;
					}
					
					
					case 789723607:
					{
						this.hgroup = ((global::decode.huffman.HuffmanTreeGroup[]) (@value) );
						return @value;
					}
					
					
					case 90195614:
					{
						this.prev_byte2 = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 90195613:
					{
						this.prev_byte1 = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 306268135:
					{
						this.dist_rb_idx = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1038431785:
					{
						this.dist_rb = ((int[]) (@value) );
						return @value;
					}
					
					
					case 497938428:
					{
						this.ringbuffer_end_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 204497292:
					{
						this.ringbuffer_end = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 204992800:
					{
						this.ringbuffer_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1167196336:
					{
						this.ringbuffer = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 593813019:
					{
						this.ringbuffer_mask = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 660749808:
					{
						this.ringbuffer_size = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 692063088:
					{
						this.max_distance = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1130349238:
					{
						this.max_backward_distance = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1372404981:
					{
						this.window_bits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 459921894:
					{
						this.input_end = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5594516:
					{
						this.pos = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1370130130:
					{
						this.sub_state = ((int[]) (@value) );
						return @value;
					}
					
					
					case 67859985:
					{
						this.state = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1000423964:
					{
						return this.custom_dict_size;
					}
					
					
					case 1130993268:
					{
						return this.custom_dict_off;
					}
					
					
					case 2005494788:
					{
						return this.custom_dict;
					}
					
					
					case 151148891:
					{
						return this.context_map_table;
					}
					
					
					case 1236167740:
					{
						return this.max_run_length_prefix;
					}
					
					
					case 391845250:
					{
						return this.context_index;
					}
					
					
					case 1266403:
					{
						return this.next_off;
					}
					
					
					case 1224901875:
					{
						return this.next;
					}
					
					
					case 511010969:
					{
						return this.htree_index;
					}
					
					
					case 1555261035:
					{
						return this.code_lengths_off;
					}
					
					
					case 1696609403:
					{
						return this.code_lengths;
					}
					
					
					case 991996278:
					{
						return this.simple_code_or_skip;
					}
					
					
					case 607184738:
					{
						return this.code_length_code_lengths;
					}
					
					
					case 182695950:
					{
						return this.table;
					}
					
					
					case 23497926:
					{
						return this.space;
					}
					
					
					case 1633548583:
					{
						return this.repeat_code_len;
					}
					
					
					case 108828507:
					{
						return this.repeat;
					}
					
					
					case 364256911:
					{
						return this.prev_code_len;
					}
					
					
					case 1860022104:
					{
						return this.symbol;
					}
					
					
					case 351394276:
					{
						return this.htrees_decoded;
					}
					
					
					case 1850903718:
					{
						return this.partially_written;
					}
					
					
					case 953792829:
					{
						return this.nbytes;
					}
					
					
					case 518477611:
					{
						return this.copy_dst_off;
					}
					
					
					case 1490863419:
					{
						return this.copy_dst;
					}
					
					
					case 1585320842:
					{
						return this.copy_src_off;
					}
					
					
					case 1491609114:
					{
						return this.copy_src;
					}
					
					
					case 1811518261:
					{
						return this.distance;
					}
					
					
					case 691108279:
					{
						return this.distance_code;
					}
					
					
					case 373422960:
					{
						return this.copy_length;
					}
					
					
					case 89861228:
					{
						return this.insert_length;
					}
					
					
					case 1738768695:
					{
						return this.copy_code;
					}
					
					
					case 693975859:
					{
						return this.insert_code;
					}
					
					
					case 254611835:
					{
						return this.range_idx;
					}
					
					
					case 1135318098:
					{
						return this.cmd_code;
					}
					
					
					case 2012313602:
					{
						return this.htree_command_off;
					}
					
					
					case 1438772882:
					{
						return this.htree_command;
					}
					
					
					case 1856599795:
					{
						return this.context_mode;
					}
					
					
					case 1728038602:
					{
						return this.context_lookup_offset2;
					}
					
					
					case 1728038601:
					{
						return this.context_lookup_offset1;
					}
					
					
					case 2107178752:
					{
						return this.dist_htree_index;
					}
					
					
					case 562771638:
					{
						return this.dist_context_map_slice_off;
					}
					
					
					case 654394182:
					{
						return this.dist_context_map_slice;
					}
					
					
					case 125264668:
					{
						return this.dist_context_offset;
					}
					
					
					case 644524681:
					{
						return this.literal_htree_index;
					}
					
					
					case 743635343:
					{
						return this.context_map_slice_off;
					}
					
					
					case 2095474079:
					{
						return this.context_map_slice;
					}
					
					
					case 614743843:
					{
						return this.context_offset;
					}
					
					
					case 315031597:
					{
						return this.num_dist_htrees;
					}
					
					
					case 1658629475:
					{
						return this.dist_context_map_off;
					}
					
					
					case 275554163:
					{
						return this.dist_context_map;
					}
					
					
					case 41127190:
					{
						return this.num_literal_htrees;
					}
					
					
					case 137889424:
					{
						return this.context_modes_off;
					}
					
					
					case 1704893984:
					{
						return this.context_modes;
					}
					
					
					case 1290819452:
					{
						return this.context_map_off;
					}
					
					
					case 826870028:
					{
						return this.context_map;
					}
					
					
					case 995782645:
					{
						return this.num_distance_codes;
					}
					
					
					case 1832984000:
					{
						return this.distance_postfix_mask;
					}
					
					
					case 11327097:
					{
						return this.num_direct_distance_codes;
					}
					
					
					case 1711396826:
					{
						return this.distance_postfix_bits;
					}
					
					
					case 1453603254:
					{
						return this.block_type_rb_index;
					}
					
					
					case 186833699:
					{
						return this.block_type_rb;
					}
					
					
					case 406749710:
					{
						return this.num_block_types;
					}
					
					
					case 1146110508:
					{
						return this.block_type;
					}
					
					
					case 1918313688:
					{
						return this.block_length;
					}
					
					
					case 1164511439:
					{
						return this.is_uncompressed;
					}
					
					
					case 1146992036:
					{
						return this.is_metadata;
					}
					
					
					case 495353696:
					{
						return this.meta_block_remaining_len;
					}
					
					
					case 382782953:
					{
						return this.trivial_literal_context;
					}
					
					
					case 506245857:
					{
						return this.loop_counter;
					}
					
					
					case 21968:
					{
						return this.br;
					}
					
					
					case 210480505:
					{
						return this.block_len_trees;
					}
					
					
					case 547883970:
					{
						return this.block_type_trees;
					}
					
					
					case 789723607:
					{
						return this.hgroup;
					}
					
					
					case 90195614:
					{
						return this.prev_byte2;
					}
					
					
					case 90195613:
					{
						return this.prev_byte1;
					}
					
					
					case 306268135:
					{
						return this.dist_rb_idx;
					}
					
					
					case 1038431785:
					{
						return this.dist_rb;
					}
					
					
					case 497938428:
					{
						return this.ringbuffer_end_off;
					}
					
					
					case 204497292:
					{
						return this.ringbuffer_end;
					}
					
					
					case 204992800:
					{
						return this.ringbuffer_off;
					}
					
					
					case 1167196336:
					{
						return this.ringbuffer;
					}
					
					
					case 593813019:
					{
						return this.ringbuffer_mask;
					}
					
					
					case 660749808:
					{
						return this.ringbuffer_size;
					}
					
					
					case 692063088:
					{
						return this.max_distance;
					}
					
					
					case 1130349238:
					{
						return this.max_backward_distance;
					}
					
					
					case 1372404981:
					{
						return this.window_bits;
					}
					
					
					case 459921894:
					{
						return this.input_end;
					}
					
					
					case 5594516:
					{
						return this.pos;
					}
					
					
					case 1370130130:
					{
						return this.sub_state;
					}
					
					
					case 67859985:
					{
						return this.state;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1000423964:
					{
						return ((double) (this.custom_dict_size) );
					}
					
					
					case 1130993268:
					{
						return ((double) (this.custom_dict_off) );
					}
					
					
					case 1236167740:
					{
						return ((double) (this.max_run_length_prefix) );
					}
					
					
					case 391845250:
					{
						return ((double) (this.context_index) );
					}
					
					
					case 1266403:
					{
						return ((double) (this.next_off) );
					}
					
					
					case 511010969:
					{
						return ((double) (this.htree_index) );
					}
					
					
					case 1555261035:
					{
						return ((double) (this.code_lengths_off) );
					}
					
					
					case 991996278:
					{
						return ((double) (this.simple_code_or_skip) );
					}
					
					
					case 23497926:
					{
						return ((double) (this.space) );
					}
					
					
					case 1633548583:
					{
						return ((double) (this.repeat_code_len) );
					}
					
					
					case 108828507:
					{
						return ((double) (this.repeat) );
					}
					
					
					case 364256911:
					{
						return ((double) (this.prev_code_len) );
					}
					
					
					case 1860022104:
					{
						return ((double) (this.symbol) );
					}
					
					
					case 351394276:
					{
						return ((double) (this.htrees_decoded) );
					}
					
					
					case 1850903718:
					{
						return ((double) (this.partially_written) );
					}
					
					
					case 953792829:
					{
						return ((double) (this.nbytes) );
					}
					
					
					case 518477611:
					{
						return ((double) (this.copy_dst_off) );
					}
					
					
					case 1585320842:
					{
						return ((double) (this.copy_src_off) );
					}
					
					
					case 1811518261:
					{
						return ((double) (this.distance) );
					}
					
					
					case 691108279:
					{
						return ((double) (this.distance_code) );
					}
					
					
					case 373422960:
					{
						return ((double) (this.copy_length) );
					}
					
					
					case 89861228:
					{
						return ((double) (this.insert_length) );
					}
					
					
					case 1738768695:
					{
						return ((double) (this.copy_code) );
					}
					
					
					case 693975859:
					{
						return ((double) (this.insert_code) );
					}
					
					
					case 254611835:
					{
						return ((double) (this.range_idx) );
					}
					
					
					case 1135318098:
					{
						return ((double) (this.cmd_code) );
					}
					
					
					case 2012313602:
					{
						return ((double) (this.htree_command_off) );
					}
					
					
					case 1856599795:
					{
						return ((double) (this.context_mode) );
					}
					
					
					case 1728038602:
					{
						return ((double) (this.context_lookup_offset2) );
					}
					
					
					case 1728038601:
					{
						return ((double) (this.context_lookup_offset1) );
					}
					
					
					case 2107178752:
					{
						return ((double) (this.dist_htree_index) );
					}
					
					
					case 562771638:
					{
						return ((double) (this.dist_context_map_slice_off) );
					}
					
					
					case 125264668:
					{
						return ((double) (this.dist_context_offset) );
					}
					
					
					case 644524681:
					{
						return ((double) (this.literal_htree_index) );
					}
					
					
					case 743635343:
					{
						return ((double) (this.context_map_slice_off) );
					}
					
					
					case 614743843:
					{
						return ((double) (this.context_offset) );
					}
					
					
					case 315031597:
					{
						return ((double) (this.num_dist_htrees) );
					}
					
					
					case 1658629475:
					{
						return ((double) (this.dist_context_map_off) );
					}
					
					
					case 41127190:
					{
						return ((double) (this.num_literal_htrees) );
					}
					
					
					case 137889424:
					{
						return ((double) (this.context_modes_off) );
					}
					
					
					case 1290819452:
					{
						return ((double) (this.context_map_off) );
					}
					
					
					case 995782645:
					{
						return ((double) (this.num_distance_codes) );
					}
					
					
					case 1832984000:
					{
						return ((double) (this.distance_postfix_mask) );
					}
					
					
					case 11327097:
					{
						return ((double) (this.num_direct_distance_codes) );
					}
					
					
					case 1711396826:
					{
						return ((double) (this.distance_postfix_bits) );
					}
					
					
					case 1164511439:
					{
						return ((double) (this.is_uncompressed) );
					}
					
					
					case 1146992036:
					{
						return ((double) (this.is_metadata) );
					}
					
					
					case 495353696:
					{
						return ((double) (this.meta_block_remaining_len) );
					}
					
					
					case 382782953:
					{
						return ((double) (this.trivial_literal_context) );
					}
					
					
					case 506245857:
					{
						return ((double) (this.loop_counter) );
					}
					
					
					case 90195614:
					{
						return ((double) (this.prev_byte2) );
					}
					
					
					case 90195613:
					{
						return ((double) (this.prev_byte1) );
					}
					
					
					case 306268135:
					{
						return ((double) (this.dist_rb_idx) );
					}
					
					
					case 497938428:
					{
						return ((double) (this.ringbuffer_end_off) );
					}
					
					
					case 204992800:
					{
						return ((double) (this.ringbuffer_off) );
					}
					
					
					case 593813019:
					{
						return ((double) (this.ringbuffer_mask) );
					}
					
					
					case 660749808:
					{
						return ((double) (this.ringbuffer_size) );
					}
					
					
					case 692063088:
					{
						return ((double) (this.max_distance) );
					}
					
					
					case 1130349238:
					{
						return ((double) (this.max_backward_distance) );
					}
					
					
					case 1372404981:
					{
						return ((double) (this.window_bits) );
					}
					
					
					case 459921894:
					{
						return ((double) (this.input_end) );
					}
					
					
					case 5594516:
					{
						return ((double) (this.pos) );
					}
					
					
					case 67859985:
					{
						return ((double) (this.state) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("custom_dict_size");
			baseArr.push("custom_dict_off");
			baseArr.push("custom_dict");
			baseArr.push("context_map_table");
			baseArr.push("max_run_length_prefix");
			baseArr.push("context_index");
			baseArr.push("next_off");
			baseArr.push("next");
			baseArr.push("htree_index");
			baseArr.push("code_lengths_off");
			baseArr.push("code_lengths");
			baseArr.push("simple_code_or_skip");
			baseArr.push("code_length_code_lengths");
			baseArr.push("table");
			baseArr.push("space");
			baseArr.push("repeat_code_len");
			baseArr.push("repeat");
			baseArr.push("prev_code_len");
			baseArr.push("symbol");
			baseArr.push("htrees_decoded");
			baseArr.push("partially_written");
			baseArr.push("nbytes");
			baseArr.push("copy_dst_off");
			baseArr.push("copy_dst");
			baseArr.push("copy_src_off");
			baseArr.push("copy_src");
			baseArr.push("distance");
			baseArr.push("distance_code");
			baseArr.push("copy_length");
			baseArr.push("insert_length");
			baseArr.push("copy_code");
			baseArr.push("insert_code");
			baseArr.push("range_idx");
			baseArr.push("cmd_code");
			baseArr.push("htree_command_off");
			baseArr.push("htree_command");
			baseArr.push("context_mode");
			baseArr.push("context_lookup_offset2");
			baseArr.push("context_lookup_offset1");
			baseArr.push("dist_htree_index");
			baseArr.push("dist_context_map_slice_off");
			baseArr.push("dist_context_map_slice");
			baseArr.push("dist_context_offset");
			baseArr.push("literal_htree_index");
			baseArr.push("context_map_slice_off");
			baseArr.push("context_map_slice");
			baseArr.push("context_offset");
			baseArr.push("num_dist_htrees");
			baseArr.push("dist_context_map_off");
			baseArr.push("dist_context_map");
			baseArr.push("num_literal_htrees");
			baseArr.push("context_modes_off");
			baseArr.push("context_modes");
			baseArr.push("context_map_off");
			baseArr.push("context_map");
			baseArr.push("num_distance_codes");
			baseArr.push("distance_postfix_mask");
			baseArr.push("num_direct_distance_codes");
			baseArr.push("distance_postfix_bits");
			baseArr.push("block_type_rb_index");
			baseArr.push("block_type_rb");
			baseArr.push("num_block_types");
			baseArr.push("block_type");
			baseArr.push("block_length");
			baseArr.push("is_uncompressed");
			baseArr.push("is_metadata");
			baseArr.push("meta_block_remaining_len");
			baseArr.push("trivial_literal_context");
			baseArr.push("loop_counter");
			baseArr.push("br");
			baseArr.push("block_len_trees");
			baseArr.push("block_type_trees");
			baseArr.push("hgroup");
			baseArr.push("prev_byte2");
			baseArr.push("prev_byte1");
			baseArr.push("dist_rb_idx");
			baseArr.push("dist_rb");
			baseArr.push("ringbuffer_end_off");
			baseArr.push("ringbuffer_end");
			baseArr.push("ringbuffer_off");
			baseArr.push("ringbuffer");
			baseArr.push("ringbuffer_mask");
			baseArr.push("ringbuffer_size");
			baseArr.push("max_distance");
			baseArr.push("max_backward_distance");
			baseArr.push("window_bits");
			baseArr.push("input_end");
			baseArr.push("pos");
			baseArr.push("sub_state");
			baseArr.push("state");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


