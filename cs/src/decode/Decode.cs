// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace decode {
	public class Decode : global::haxe.lang.HxObject {
		
		static Decode() {
			unchecked {
				global::decode.Decode.kDefaultCodeLength = 8;
				global::decode.Decode.kCodeLengthRepeatCode = 16;
				global::decode.Decode.kNumLiteralCodes = 256;
				global::decode.Decode.kNumInsertAndCopyCodes = 704;
				global::decode.Decode.kNumBlockLengthCodes = 26;
				global::decode.Decode.kLiteralContextBits = 6;
				global::decode.Decode.kDistanceContextBits = 2;
				global::decode.Decode.HUFFMAN_TABLE_BITS = 8;
				global::decode.Decode.HUFFMAN_TABLE_MASK = 255;
				global::decode.Decode.CODE_LENGTH_CODES = 18;
				global::decode.Decode.kCodeLengthCodeOrder = new global::Array<int>(new int[]{1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15});
				global::decode.Decode.NUM_DISTANCE_SHORT_CODES = 16;
				global::decode.Decode.kDistanceShortCodeIndexOffset = new global::Array<int>(new int[]{3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2});
				global::decode.Decode.kDistanceShortCodeValueOffset = new global::Array<int>(new int[]{0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3});
			}
		}
		
		
		public Decode(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Decode() {
			global::decode.Decode.__hx_ctor_decode_Decode(this);
		}
		
		
		public static void __hx_ctor_decode_Decode(global::decode.Decode __hx_this) {
		}
		
		
		public static int BROTLI_FAILURE() {
			return ((int) (0) );
		}
		
		
		public static void BROTLI_LOG_UINT(int x) {
		}
		
		
		public static void BROTLI_LOG_ARRAY_INDEX(uint[] array_name, int idx) {
		}
		
		
		public static void BROTLI_LOG(string x) {
			unchecked {
				global::haxe.Log.trace.__hx_invoke2_o(default(double), x, default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
			}
		}
		
		
		public static void BROTLI_LOG_UCHAR_VECTOR(uint[] v, int len) {
		}
		
		
		public static int kDefaultCodeLength;
		
		public static int kCodeLengthRepeatCode;
		
		public static int kNumLiteralCodes;
		
		public static int kNumInsertAndCopyCodes;
		
		public static int kNumBlockLengthCodes;
		
		public static int kLiteralContextBits;
		
		public static int kDistanceContextBits;
		
		public static int HUFFMAN_TABLE_BITS;
		
		public static int HUFFMAN_TABLE_MASK;
		
		public static int CODE_LENGTH_CODES;
		
		public static global::Array<int> kCodeLengthCodeOrder;
		
		public static int NUM_DISTANCE_SHORT_CODES;
		
		public static global::Array<int> kDistanceShortCodeIndexOffset;
		
		public static global::Array<int> kDistanceShortCodeValueOffset;
		
		public static int DecodeWindowBits(global::decode.bit_reader.BrotliBitReader br) {
			unchecked {
				int n = default(int);
				if (((bool) (( global::decode.BitReader.BrotliReadBits(br, 1) == 0 )) )) {
					return 16;
				}
				
				n = ((int) (global::decode.BitReader.BrotliReadBits(br, 3)) );
				if (( n > 0 )) {
					return ( 17 + n );
				}
				
				n = ((int) (global::decode.BitReader.BrotliReadBits(br, 3)) );
				if (( n > 0 )) {
					return ( 8 + n );
				}
				
				return 17;
			}
		}
		
		
		public static int DecodeVarLenUint8(global::decode.bit_reader.BrotliBitReader br) {
			unchecked {
				if (((bool) (( global::decode.BitReader.BrotliReadBits(br, 1) == 1 )) )) {
					int nbits = ((int) (global::decode.BitReader.BrotliReadBits(br, 3)) );
					if (( nbits == 0 )) {
						return 1;
					}
					else {
						return ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, nbits) + (( 1 << nbits )) )) )) );
					}
					
				}
				
				return 0;
			}
		}
		
		
		public static bool JumpToByteBoundary(global::decode.bit_reader.BrotliBitReader br) {
			unchecked {
				return ((bool) (( global::decode.BitReader.BrotliReadBits(br, ((int) (((uint) (( (((uint) (( ((uint) (( br.bit_pos_ + 7 )) ) & -8 )) )) - br.bit_pos_ )) )) )) == 0 )) );
			}
		}
		
		
		public static bool DecodeMetaBlockLength(global::decode.bit_reader.BrotliBitReader br, global::Array<int> meta_block_length, global::Array<int> input_end, global::Array<int> is_metadata, global::Array<int> is_uncompressed) {
			unchecked {
				int size_nibbles = default(int);
				int size_bytes = default(int);
				input_end[0] = ((int) (global::decode.BitReader.BrotliReadBits(br, 1)) );
				meta_block_length[0] = 0;
				is_uncompressed[0] = 0;
				is_metadata[0] = 0;
				if (( ( input_end[0] == 1 ) && ((bool) (( global::decode.BitReader.BrotliReadBits(br, 1) == 1 )) ) )) {
					return true;
				}
				
				size_nibbles = ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, 2) + 4 )) )) );
				if (( size_nibbles == 7 )) {
					is_metadata[0] = 1;
					if (((bool) (( global::decode.BitReader.BrotliReadBits(br, 1) != 0 )) )) {
						return false;
					}
					
					size_bytes = ((int) (global::decode.BitReader.BrotliReadBits(br, 2)) );
					if (( size_bytes == 0 )) {
						return true;
					}
					
					{
						int _g1 = 0;
						while (( _g1 < size_bytes )) {
							int i = _g1++;
							int next_byte = ((int) (global::decode.BitReader.BrotliReadBits(br, 8)) );
							if (( ( ( ( i + 1 ) == size_bytes ) && ( size_bytes > 1 ) ) && ( next_byte == 0 ) )) {
								return false;
							}
							
							meta_block_length[0] |= ( next_byte << ( i * 8 ) );
						}
						
					}
					
				}
				else {
					int _g11 = 0;
					while (( _g11 < size_nibbles )) {
						int i1 = _g11++;
						int next_nibble = ((int) (global::decode.BitReader.BrotliReadBits(br, 4)) );
						if (( ( ( ( i1 + 1 ) == size_nibbles ) && ( size_nibbles > 4 ) ) && ( next_nibble == 0 ) )) {
							return false;
						}
						
						meta_block_length[0] |= ( next_nibble << ( i1 * 4 ) );
					}
					
				}
				
				 ++ meta_block_length[0];
				if (( ( input_end[0] != 1 ) && ( is_metadata[0] != 1 ) )) {
					is_uncompressed[0] = ((int) (global::decode.BitReader.BrotliReadBits(br, 1)) );
				}
				
				return true;
			}
		}
		
		
		public static int ReadSymbol(global::decode.huffman.HuffmanCode[] table, int table_off, global::decode.bit_reader.BrotliBitReader br) {
			unchecked {
				int nbits = default(int);
				global::decode.BitReader.BrotliFillBitWindow(br);
				table_off = ((int) (((uint) (( (((uint) (( ((uint) (((uint) (( ((uint) (br.val_) ) >> ((int) (br.bit_pos_) ) )) )) ) & 255 )) )) + table_off )) )) );
				if (((bool) (( ((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (table) )[table_off]) ).bits > 8 )) )) {
					br.bit_pos_ = ((uint) (( br.bit_pos_ + 8 )) );
					nbits = ((int) (((uint) (( ((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (table) )[table_off]) ).bits - 8 )) )) );
					table_off = ((int) (((uint) (( ((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (table) )[table_off]) ).@value + table_off )) )) );
					table_off = ((int) (((uint) (( (((uint) (( ((uint) (((uint) (( ((uint) (br.val_) ) >> ((int) (br.bit_pos_) ) )) )) ) & ( (( 1 << nbits )) - 1 ) )) )) + table_off )) )) );
				}
				
				br.bit_pos_ = ((uint) (( br.bit_pos_ + ((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (table) )[table_off]) ).bits )) );
				return ((int) (((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (table) )[table_off]) ).@value) );
			}
		}
		
		
		public static int ReadHuffmanCodeLengths(uint[] code_length_code_lengths, int num_symbols, uint[] code_lengths, global::decode.state.BrotliState s) {
			unchecked {
				global::decode.bit_reader.BrotliBitReader br = s.br;
				if (( ((int[]) (s.sub_state) )[1] == ((int) (60) ) )) {
					s.symbol = 0;
					s.prev_code_len = ((uint) (8) );
					s.repeat = 0;
					s.repeat_code_len = ((uint) (0) );
					s.space = 32768;
					if (( global::decode.Huffman.BrotliBuildHuffmanTable(s.table, 0, 5, code_length_code_lengths, 18) <= 1 )) {
						global::haxe.Log.trace.__hx_invoke2_o(default(double), "[ReadHuffmanCodeLengths] Building code length tree failed: ", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
						return ((int) (0) );
					}
					
					((int[]) (s.sub_state) )[1] = ((int) (61) );
				}
				
				if (( ((int[]) (s.sub_state) )[1] == ((int) (61) ) )) {
					while (( ( s.symbol < num_symbols ) && ( s.space > 0 ) )) {
						global::decode.huffman.HuffmanCode[] p = s.table;
						int p_off = 0;
						uint code_len = default(uint);
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							return ((int) (2) );
						}
						
						global::decode.BitReader.BrotliFillBitWindow(br);
						p_off = ((int) (((uint) (( (((uint) (( ((uint) (((uint) (( ((uint) (br.val_) ) >> ((int) (br.bit_pos_) ) )) )) ) & 31 )) )) + 0 )) )) );
						br.bit_pos_ = ((uint) (( br.bit_pos_ + ((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (p) )[p_off]) ).bits )) );
						code_len = ((global::decode.huffman.HuffmanCode) (((global::decode.huffman.HuffmanCode[]) (p) )[p_off]) ).@value;
						((uint[]) (code_lengths) )[s.symbol] = code_len;
						if (((bool) (( code_len < 16 )) )) {
							s.repeat = 0;
							if (((bool) (( code_len != 0 )) )) {
								s.prev_code_len = code_len;
								s.space -= ( 32768 >> ((int) (code_len) ) );
							}
							
							s.symbol++;
						}
						else {
							int extra_bits = ((int) (((uint) (( code_len - 14 )) )) );
							int old_repeat = default(int);
							int repeat_delta = default(int);
							uint new_len = ((uint) (0) );
							if (((bool) (( code_len == 16 )) )) {
								new_len = s.prev_code_len;
							}
							
							if (((bool) (( s.repeat_code_len != new_len )) )) {
								s.repeat = 0;
								s.repeat_code_len = new_len;
							}
							
							old_repeat = s.repeat;
							if (( s.repeat > 0 )) {
								s.repeat = ( (s.repeat -= 2) << extra_bits );
							}
							
							int _g1 = s.repeat;
							s.repeat = ((int) (((uint) (( ((uint) (( global::decode.BitReader.BrotliReadBits(br, extra_bits) + 3 )) ) + _g1 )) )) );
							repeat_delta = ( s.repeat - old_repeat );
							if (( ( s.symbol + repeat_delta ) > num_symbols )) {
								return ((int) (0) );
							}
							
							global::DefaultFunctions.memset_UInt(code_lengths, s.symbol, s.repeat_code_len, repeat_delta);
							s.symbol += repeat_delta;
							if (((bool) (( s.repeat_code_len != 0 )) )) {
								s.space -= ( repeat_delta << ((int) (((uint) (( 15 - s.repeat_code_len )) )) ) );
							}
							
						}
						
					}
					
					if (( s.space != 0 )) {
						global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("[ReadHuffmanCodeLengths] s.space = ", global::haxe.lang.Runtime.toString(s.space)), "\n"), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
						return ((int) (0) );
					}
					
					global::DefaultFunctions.memset_UInt(code_lengths, s.symbol, ((uint) (0) ), ( num_symbols - s.symbol ));
					((int[]) (s.sub_state) )[1] = ((int) (50) );
					return ((int) (1) );
				}
				
				return ((int) (0) );
			}
		}
		
		
		public static int ReadHuffmanCode(int alphabet_size, global::decode.huffman.HuffmanCode[] table, int table_off, global::Array<int> opt_table_size, global::decode.state.BrotliState s) {
			unchecked {
				global::decode.bit_reader.BrotliBitReader br = s.br;
				int result = ((int) (1) );
				int table_size = 0;
				while (true) {
					if (( ((int[]) (s.sub_state) )[1] == ((int) (50) ) )) {
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							return ((int) (2) );
						}
						
						s.code_lengths = ((uint[]) (new uint[alphabet_size]) );
						if (( s.code_lengths == null )) {
							return ((int) (0) );
						}
						
						s.simple_code_or_skip = ((int) (global::decode.BitReader.BrotliReadBits(br, 2)) );
						if (( s.simple_code_or_skip == 1 )) {
							int max_bits_counter = ( alphabet_size - 1 );
							int max_bits = 0;
							global::Array<int> symbols = new global::Array<int>(new int[]{0, 0, 0, 0});
							uint num_symbols = ((uint) (( global::decode.BitReader.BrotliReadBits(br, 2) + 1 )) );
							while (( max_bits_counter > 0 )) {
								max_bits_counter >>= 1;
								 ++ max_bits;
							}
							
							global::DefaultFunctions.memset_UInt(s.code_lengths, 0, ((uint) (0) ), alphabet_size);
							{
								int _g1 = 0;
								int _g = ((int) (num_symbols) );
								while (( _g1 < _g )) {
									int i = _g1++;
									symbols[i] = ((int) (global::decode.BitReader.BrotliReadBits(br, max_bits)) );
									if (( symbols[i] >= alphabet_size )) {
										return ((int) (0) );
									}
									
									((uint[]) (s.code_lengths) )[symbols[i]] = ((uint) (2) );
								}
								
							}
							
							((uint[]) (s.code_lengths) )[symbols[0]] = ((uint) (1) );
							{
								uint __temp_switch1 = (num_symbols);
								if (( __temp_switch1 == 1 )) {
								}
								else if (( __temp_switch1 == 2 )) {
									if (( symbols[0] == symbols[1] )) {
										return ((int) (0) );
									}
									
									((uint[]) (s.code_lengths) )[symbols[1]] = ((uint) (1) );
								}
								else if (( __temp_switch1 == 3 )) {
									if (( ( ( symbols[0] == symbols[1] ) || ( symbols[0] == symbols[2] ) ) || ( symbols[1] == symbols[2] ) )) {
										return ((int) (0) );
									}
									
								}
								else if (( __temp_switch1 == 4 )) {
									if (( ( ( ( ( ( symbols[0] == symbols[1] ) || ( symbols[0] == symbols[2] ) ) || ( symbols[0] == symbols[3] ) ) || ( symbols[1] == symbols[2] ) ) || ( symbols[1] == symbols[3] ) ) || ( symbols[2] == symbols[3] ) )) {
										return ((int) (0) );
									}
									
									if (((bool) (( global::decode.BitReader.BrotliReadBits(br, 1) == 1 )) )) {
										((uint[]) (s.code_lengths) )[symbols[2]] = ((uint) (3) );
										((uint[]) (s.code_lengths) )[symbols[3]] = ((uint) (3) );
									}
									else {
										((uint[]) (s.code_lengths) )[symbols[0]] = ((uint) (2) );
									}
									
								}
								
							}
							
							((int[]) (s.sub_state) )[1] = ((int) (62) );
							continue;
						}
						else {
							int space = 32;
							int num_codes = 0;
							global::Array<object> huff = new global::Array<object>(new object[]{new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (0) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (4) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (3) )), new global::decode.huffman.HuffmanCode(((uint) (3) ), ((uint) (2) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (0) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (4) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (3) )), new global::decode.huffman.HuffmanCode(((uint) (4) ), ((uint) (1) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (0) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (4) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (3) )), new global::decode.huffman.HuffmanCode(((uint) (3) ), ((uint) (2) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (0) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (4) )), new global::decode.huffman.HuffmanCode(((uint) (2) ), ((uint) (3) )), new global::decode.huffman.HuffmanCode(((uint) (4) ), ((uint) (5) ))});
							{
								int _g2 = 0;
								while (( _g2 < 18 )) {
									((uint[]) (s.code_length_code_lengths) )[_g2++] = ((uint) (0) );
								}
								
							}
							
							{
								int _g3 = s.simple_code_or_skip;
								while (( _g3 < 18 )) {
									int i1 = _g3++;
									if (( space <= 0 )) {
										break;
									}
									
									int code_len_idx = global::decode.Decode.kCodeLengthCodeOrder[i1];
									int p_off = 0;
									uint v = default(uint);
									global::decode.BitReader.BrotliFillBitWindow(br);
									p_off = ((int) (((uint) (( (((uint) (( ((uint) (((uint) (( ((uint) (br.val_) ) >> ((int) (br.bit_pos_) ) )) )) ) & 15 )) )) + 0 )) )) );
									br.bit_pos_ = ((uint) (( br.bit_pos_ + ((global::decode.huffman.HuffmanCode) (huff[p_off]) ).bits )) );
									v = ((global::decode.huffman.HuffmanCode) (huff[p_off]) ).@value;
									((uint[]) (s.code_length_code_lengths) )[code_len_idx] = v;
									if (((bool) (( v != 0 )) )) {
										space -= ( 32 >> ((int) (v) ) );
										 ++ num_codes;
									}
									
								}
								
							}
							
							if ( ! ((( ( num_codes == 1 ) || ( space == 0 ) ))) ) {
								return ((int) (0) );
							}
							
							((int[]) (s.sub_state) )[1] = ((int) (60) );
						}
						
					}
					
					if (( ( ((int[]) (s.sub_state) )[1] == ((int) (60) ) ) || ( ((int[]) (s.sub_state) )[1] == ((int) (61) ) ) )) {
						result = global::decode.Decode.ReadHuffmanCodeLengths(s.code_length_code_lengths, alphabet_size, s.code_lengths, s);
						if (( result != ((int) (1) ) )) {
							return result;
						}
						
						((int[]) (s.sub_state) )[1] = ((int) (62) );
					}
					
					if (( ((int[]) (s.sub_state) )[1] == ((int) (62) ) )) {
						table_size = global::decode.Huffman.BrotliBuildHuffmanTable(table, table_off, 8, s.code_lengths, alphabet_size);
						if (( table_size == 0 )) {
							global::haxe.Log.trace.__hx_invoke2_o(default(double), "[ReadHuffmanCode] BuildHuffmanTable failed: ", default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
							return ((int) (0) );
						}
						
						s.code_lengths = null;
						if (( opt_table_size != null )) {
							opt_table_size[0] = table_size;
						}
						
						((int[]) (s.sub_state) )[1] = ((int) (50) );
						return result;
					}
					
				}
				
				return default(int);
			}
		}
		
		
		public static int ReadBlockLength(global::decode.huffman.HuffmanCode[] table, int table_off, global::decode.bit_reader.BrotliBitReader br) {
			int code = default(int);
			int nbits = default(int);
			code = global::decode.Decode.ReadSymbol(table, table_off, br);
			nbits = ((global::decode.prefix.PrefixCodeRange) (global::decode.Prefix.kBlockLengthPrefixCode[code]) ).nbits;
			int _g = ((global::decode.prefix.PrefixCodeRange) (global::decode.Prefix.kBlockLengthPrefixCode[code]) ).offset;
			return ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, nbits) + _g )) )) );
		}
		
		
		public static int TranslateShortCodes(int code, int[] ringbuffer, int index) {
			unchecked {
				int val = default(int);
				if (( code < 16 )) {
					index += global::decode.Decode.kDistanceShortCodeIndexOffset[code];
					index &= 3;
					val = ( ((int) (((int[]) (ringbuffer) )[index]) ) + global::decode.Decode.kDistanceShortCodeValueOffset[code] );
				}
				else {
					val = ( ( code - 16 ) + 1 );
				}
				
				return val;
			}
		}
		
		
		public static void InverseMoveToFrontTransform(uint[] v, int v_len) {
			unchecked {
				uint[] mtf = ((uint[]) (new uint[256]) );
				{
					int _g = 0;
					while (( _g < 256 )) {
						int i = _g++;
						((uint[]) (mtf) )[i] = ((uint) (i) );
					}
					
				}
				
				{
					int _g1 = 0;
					while (( _g1 < v_len )) {
						int i1 = _g1++;
						uint index = ((uint) (((uint[]) (v) )[i1]) );
						uint @value = ((uint) (((uint[]) (mtf) )[((int) (index) )]) );
						((uint[]) (v) )[i1] = @value;
						while (((bool) (( index > 0 )) )) {
							((uint[]) (mtf) )[((int) (index) )] = ((uint) (((uint[]) (mtf) )[((int) (((uint) (( index - 1 )) )) )]) );
							 -- index;
						}
						
						((uint[]) (mtf) )[0] = @value;
					}
					
				}
				
			}
		}
		
		
		public static int HuffmanTreeGroupDecode(global::decode.huffman.HuffmanTreeGroup @group, global::decode.state.BrotliState s) {
			unchecked {
				if (( ((int[]) (s.sub_state) )[0] == ((int) (50) ) )) {
					s.next = @group.codes;
					s.htree_index = 0;
					((int[]) (s.sub_state) )[0] = ((int) (70) );
				}
				
				if (( ((int[]) (s.sub_state) )[0] == ((int) (70) ) )) {
					int next_off = 0;
					while (( s.htree_index < @group.num_htrees )) {
						global::Array<int> table_size = new global::Array<int>(new int[]{});
						int result = global::decode.Decode.ReadHuffmanCode(@group.alphabet_size, s.next, next_off, table_size, s);
						if (( result != ((int) (1) ) )) {
							return result;
						}
						
						@group.htrees[s.htree_index] = s.next;
						@group.htrees_off[s.htree_index] = next_off;
						next_off += table_size[0];
						if (( table_size[0] == 0 )) {
							return ((int) (0) );
						}
						
						 ++ s.htree_index;
					}
					
					((int[]) (s.sub_state) )[0] = ((int) (50) );
					return ((int) (1) );
				}
				
				return ((int) (0) );
			}
		}
		
		
		public static int DecodeContextMap(int context_map_size, global::Array<int> num_htrees, global::Array<object> context_map, global::decode.state.BrotliState s) {
			unchecked {
				global::decode.bit_reader.BrotliBitReader br = s.br;
				int result = ((int) (1) );
				int use_rle_for_zeros = default(int);
				if (( ((int[]) (s.sub_state) )[0] == ((int) (50) ) )) {
					if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
						return ((int) (2) );
					}
					
					num_htrees[0] = ( global::decode.Decode.DecodeVarLenUint8(br) + 1 );
					s.context_index = 0;
					context_map[0] = global::FunctionMalloc.mallocUInt(context_map_size);
					if (( ( ((uint[]) (context_map[0]) ) as global::System.Array ).Length == 0 )) {
						return ((int) (0) );
					}
					
					if (( num_htrees[0] <= 1 )) {
						global::DefaultFunctions.memset_UInt(((uint[]) (context_map[0]) ), 0, ((uint) (0) ), context_map_size);
						return ((int) (1) );
					}
					
					use_rle_for_zeros = ((int) (global::decode.BitReader.BrotliReadBits(br, 1)) );
					if (( use_rle_for_zeros == 1 )) {
						s.max_run_length_prefix = ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, 4) + 1 )) )) );
					}
					else {
						s.max_run_length_prefix = 0;
					}
					
					s.context_map_table = global::FunctionMalloc.malloc2_decode_huffman_HuffmanCode(typeof(global::decode.huffman.HuffmanCode), 1080);
					if (( s.context_map_table == null )) {
						return ((int) (0) );
					}
					
					((int[]) (s.sub_state) )[0] = ((int) (80) );
				}
				
				if (( ((int[]) (s.sub_state) )[0] == ((int) (80) ) )) {
					result = global::decode.Decode.ReadHuffmanCode(( num_htrees[0] + s.max_run_length_prefix ), s.context_map_table, 0, null, s);
					if (( result != ((int) (1) ) )) {
						return result;
					}
					
					((int[]) (s.sub_state) )[0] = ((int) (81) );
				}
				
				if (( ((int[]) (s.sub_state) )[0] == ((int) (81) ) )) {
					while (( s.context_index < context_map_size )) {
						int code = default(int);
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							return ((int) (2) );
						}
						
						code = global::decode.Decode.ReadSymbol(s.context_map_table, 0, br);
						if (( code == 0 )) {
							((uint[]) (context_map[0]) )[s.context_index] = ((uint) (0) );
							 ++ s.context_index;
						}
						else if (( code <= s.max_run_length_prefix )) {
							int reps = ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, code) + (( 1 + (( 1 << code )) )) )) )) );
							while ((  -- reps > 0 )) {
								if (( s.context_index >= context_map_size )) {
									return ((int) (0) );
								}
								
								((uint[]) (context_map[0]) )[s.context_index] = ((uint) (0) );
								 ++ s.context_index;
							}
							
						}
						else {
							((uint[]) (context_map[0]) )[s.context_index] = ((uint) (( code - s.max_run_length_prefix )) );
							 ++ s.context_index;
						}
						
					}
					
					if (((bool) (( global::decode.BitReader.BrotliReadBits(br, 1) == 1 )) )) {
						global::decode.Decode.InverseMoveToFrontTransform(((uint[]) (context_map[0]) ), context_map_size);
					}
					
					s.context_map_table = null;
					((int[]) (s.sub_state) )[0] = ((int) (50) );
					return ((int) (1) );
				}
				
				return ((int) (0) );
			}
		}
		
		
		public static void DecodeBlockType(int max_block_type, global::decode.huffman.HuffmanCode[] trees, int tree_type, int[] block_types, int[] ringbuffers, int[] indexes, global::decode.bit_reader.BrotliBitReader br) {
			unchecked {
				int ringbuffer_off = ( tree_type * 2 );
				int type_code = global::decode.Decode.ReadSymbol(trees, ( tree_type * 1080 ), br);
				int block_type = default(int);
				if (( type_code == 0 )) {
					block_type = ((int) (((int[]) (ringbuffers) )[( ringbuffer_off + (( ((int) (((int[]) (indexes) )[tree_type]) ) & 1 )) )]) );
				}
				else if (( type_code == 1 )) {
					block_type = ( ((int) (((int[]) (ringbuffers) )[( ringbuffer_off + (( ( ((int) (((int[]) (indexes) )[tree_type]) ) - 1 ) & 1 )) )]) ) + 1 );
				}
				else {
					block_type = ( type_code - 2 );
				}
				
				if (( block_type >= max_block_type )) {
					block_type -= max_block_type;
				}
				
				((int[]) (block_types) )[tree_type] = block_type;
				((int[]) (ringbuffers) )[( ringbuffer_off + (( ((int) (((int[]) (indexes) )[tree_type]) ) & 1 )) )] = block_type;
				((int[]) (indexes) )[tree_type] = ( ((int) (((int[]) (indexes) )[tree_type]) ) + 1 );
			}
		}
		
		
		public static void DecodeBlockTypeWithContext(global::decode.state.BrotliState s, global::decode.bit_reader.BrotliBitReader br) {
			unchecked {
				global::decode.Decode.DecodeBlockType(((int[]) (s.num_block_types) )[0], s.block_type_trees, 0, s.block_type, s.block_type_rb, s.block_type_rb_index, br);
				((int[]) (s.block_length) )[0] = global::decode.Decode.ReadBlockLength(s.block_len_trees, 0, br);
				s.context_offset = ( ((int[]) (s.block_type) )[0] << 6 );
				s.context_map_slice = s.context_map;
				s.context_map_slice_off = ( s.context_map_off + s.context_offset );
				s.literal_htree_index = ((uint[]) (s.context_map_slice) )[s.context_map_slice_off];
				s.context_mode = ((uint[]) (s.context_modes) )[((int[]) (s.block_type) )[0]];
				s.context_lookup_offset1 = global::decode.Context.kContextLookupOffsets[((int) (s.context_mode) )];
				s.context_lookup_offset2 = global::decode.Context.kContextLookupOffsets[((int) (((uint) (( s.context_mode + 1 )) )) )];
			}
		}
		
		
		public static int CopyUncompressedBlockToOutput(global::decode.streams.BrotliOutput output, int pos, global::decode.state.BrotliState s) {
			unchecked {
				int rb_size = ( s.ringbuffer_mask + 1 );
				uint[] ringbuffer_end = s.ringbuffer;
				int ringbuffer_end_off = ( s.ringbuffer_off + rb_size );
				int rb_pos = ( pos & s.ringbuffer_mask );
				int br_pos = ((int) (((uint) (( s.br.pos_ & 8191 )) )) );
				uint remaining_bits = default(uint);
				int num_read = default(int);
				int num_written = default(int);
				while (true) {
					if (( ((int[]) (s.sub_state) )[0] == ((int) (50) ) )) {
						if (( ( s.meta_block_remaining_len < 8 ) || ((bool) (( ((uint) (( s.br.bit_pos_ + (( s.meta_block_remaining_len << 3 )) )) ) < s.br.bit_end_pos_ )) ) )) {
							((int[]) (s.sub_state) )[0] = ((int) (51) );
							continue;
						}
						
						if (((bool) (( s.br.bit_end_pos_ < 64 )) )) {
							return ((int) (0) );
						}
						
						remaining_bits = ((uint) (32) );
						while (((bool) (( s.br.bit_pos_ < remaining_bits )) )) {
							((uint[]) (s.ringbuffer) )[( s.ringbuffer_off + rb_pos )] = ((uint) (( ((uint) (((uint) (( ((uint) (s.br.val_) ) >> ((int) (s.br.bit_pos_) ) )) )) ) & 255 )) );
							s.br.bit_pos_ = ((uint) (( s.br.bit_pos_ + 8 )) );
							 ++ rb_pos;
							 -- s.meta_block_remaining_len;
						}
						
						s.nbytes = ((int) (((uint) (((uint) (( ((uint) (((uint) (( s.br.bit_end_pos_ - s.br.bit_pos_ )) )) ) >> 3 )) )) )) );
						if (( ( br_pos + s.nbytes ) > 8191 )) {
							int tail = ( 8192 - br_pos );
							global::DefaultFunctions.memcpy_UInt(s.ringbuffer, ( s.ringbuffer_off + rb_pos ), s.br.buf_, ( s.br.buf_off + br_pos ), tail);
							s.nbytes -= tail;
							rb_pos += tail;
							s.meta_block_remaining_len -= tail;
							br_pos = 0;
						}
						
						global::DefaultFunctions.memcpy_UInt(s.ringbuffer, ( s.ringbuffer_off + rb_pos ), s.br.buf_, ( s.br.buf_off + br_pos ), s.nbytes);
						rb_pos += s.nbytes;
						s.meta_block_remaining_len -= s.nbytes;
						s.partially_written = 0;
						((int[]) (s.sub_state) )[0] = ((int) (55) );
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (55) ) )) {
						if (( rb_pos >= rb_size )) {
							num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, ( s.ringbuffer_off + s.partially_written ), ( rb_size - s.partially_written ));
							if (( num_written < 0 )) {
								return ((int) (0) );
							}
							
							s.partially_written += num_written;
							if (( s.partially_written < rb_size )) {
								return ((int) (3) );
							}
							
							rb_pos -= rb_size;
							s.meta_block_remaining_len += rb_size;
							global::DefaultFunctions.memcpy_UInt(s.ringbuffer, s.ringbuffer_off, ringbuffer_end, ringbuffer_end_off, rb_pos);
						}
						
						((int[]) (s.sub_state) )[0] = ((int) (52) );
						continue;
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (51) ) )) {
						while (( s.meta_block_remaining_len > 0 )) {
							if ( ! (global::decode.BitReader.BrotliReadMoreInput(s.br)) ) {
								return ((int) (2) );
							}
							
							((uint[]) (s.ringbuffer) )[rb_pos++] = global::decode.BitReader.BrotliReadBits(s.br, 8);
							if (( rb_pos == rb_size )) {
								s.partially_written = 0;
								((int[]) (s.sub_state) )[0] = ((int) (56) );
								break;
							}
							
							s.meta_block_remaining_len--;
						}
						
						if (( ((int[]) (s.sub_state) )[0] == ((int) (51) ) )) {
							((int[]) (s.sub_state) )[0] = ((int) (50) );
							return ((int) (1) );
						}
						
						((int[]) (s.sub_state) )[0] = ((int) (56) );
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (56) ) )) {
						num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, ( s.ringbuffer_off + s.partially_written ), ( rb_size - s.partially_written ));
						if (( num_written < 0 )) {
							return ((int) (0) );
						}
						
						s.partially_written += num_written;
						if (( s.partially_written < rb_size )) {
							return ((int) (3) );
						}
						
						rb_pos = 0;
						s.meta_block_remaining_len--;
						((int[]) (s.sub_state) )[0] = ((int) (51) );
						continue;
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (52) ) )) {
						if (( ( rb_pos + s.meta_block_remaining_len ) >= rb_size )) {
							s.nbytes = ( rb_size - rb_pos );
							if (( global::decode.Streams.BrotliRead(s.br.input_, s.ringbuffer, ( s.ringbuffer_off + rb_pos ), s.nbytes) < s.nbytes )) {
								return ((int) (2) );
							}
							
							s.partially_written = 0;
							((int[]) (s.sub_state) )[0] = ((int) (57) );
						}
						else {
							((int[]) (s.sub_state) )[0] = ((int) (53) );
							continue;
						}
						
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (57) ) )) {
						num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, ( s.ringbuffer_off + s.partially_written ), ( rb_size - s.partially_written ));
						if (( num_written < 0 )) {
							return ((int) (0) );
						}
						
						s.partially_written += num_written;
						if (( s.partially_written < rb_size )) {
							return ((int) (3) );
						}
						
						s.meta_block_remaining_len -= s.nbytes;
						rb_pos = 0;
						((int[]) (s.sub_state) )[0] = ((int) (52) );
						continue;
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (53) ) )) {
						num_read = global::decode.Streams.BrotliRead(s.br.input_, s.ringbuffer, ( s.ringbuffer_off + rb_pos ), s.meta_block_remaining_len);
						s.meta_block_remaining_len -= num_read;
						if (( s.meta_block_remaining_len > 0 )) {
							return ((int) (2) );
						}
						
						global::decode.BitReader.BrotliInitBitReader(s.br, s.br.input_, s.br.finish_);
						((int[]) (s.sub_state) )[0] = ((int) (54) );
					}
					
					if (( ((int[]) (s.sub_state) )[0] == ((int) (54) ) )) {
						if ( ! (global::decode.BitReader.BrotliWarmupBitReader(s.br)) ) {
							return ((int) (2) );
						}
						
						((int[]) (s.sub_state) )[0] = ((int) (50) );
						return ((int) (1) );
					}
					
				}
				
				return default(int);
			}
		}
		
		
		public static int BrotliDecompressedSize(int encoded_size, uint[] encoded_buffer, int encoded_buffer_off, global::Array<int> decoded_size) {
			unchecked {
				uint val = ((uint) (0) );
				int bit_pos = 0;
				int is_last = default(int);
				int is_uncompressed = 0;
				int size_nibbles = default(int);
				int meta_block_len = 0;
				if (( encoded_size == 0 )) {
					return ((int) (0) );
				}
				
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						if (( i >= encoded_size )) {
							break;
						}
						
						val = ((uint) (( val | ((uint) (( ((uint) (((uint[]) (encoded_buffer) )[i]) ) << ( 8 * i ) )) ) )) );
					}
					
				}
				
				bit_pos = 1;
				if (((bool) (( (((uint) (( val & 1 )) )) == 1 )) )) {
					bit_pos = 4;
					if (((bool) (( (((uint) (( ((uint) (((uint) (( ((uint) (val) ) >> 1 )) )) ) & 7 )) )) == 0 )) )) {
						bit_pos = 7;
					}
					
				}
				
				is_last = ((int) (((uint) (( ((uint) (((uint) (( ((uint) (val) ) >> bit_pos )) )) ) & 1 )) )) );
				 ++ bit_pos;
				if (( is_last == 1 )) {
					if (((bool) (( (((uint) (( ((uint) (((uint) (( ((uint) (val) ) >> bit_pos )) )) ) & 1 )) )) == 1 )) )) {
						decoded_size[0] = 0;
						return ((int) (1) );
					}
					
					 ++ bit_pos;
				}
				
				size_nibbles = ((int) (((uint) (( (((uint) (( ((uint) (((uint) (( ((uint) (val) ) >> bit_pos )) )) ) & 3 )) )) + 4 )) )) );
				if (( size_nibbles == 7 )) {
					return ((int) (0) );
				}
				
				bit_pos += 2;
				{
					int _g1 = 0;
					while (( _g1 < size_nibbles )) {
						meta_block_len = ((int) (((uint) (( ((uint) (( (((uint) (( ((uint) (((uint) (( ((uint) (val) ) >> bit_pos )) )) ) & 15 )) )) << ( 4 * _g1++ ) )) ) | meta_block_len )) )) );
						bit_pos += 4;
					}
					
				}
				
				 ++ meta_block_len;
				if (( is_last == 1 )) {
					decoded_size[0] = meta_block_len;
					return ((int) (1) );
				}
				
				is_uncompressed = ((int) (((uint) (( ((uint) (((uint) (( ((uint) (val) ) >> bit_pos )) )) ) & 1 )) )) );
				 ++ bit_pos;
				if (( is_uncompressed == 1 )) {
					int offset = ( (( ( bit_pos + 7 ) >> 3 )) + meta_block_len );
					if (( ( offset < encoded_size ) && ((bool) (( (((uint) (( ((uint) (((uint[]) (encoded_buffer) )[offset]) ) & 3 )) )) == 3 )) ) )) {
						decoded_size[0] = meta_block_len;
						return ((int) (1) );
					}
					
				}
				
				return ((int) (0) );
			}
		}
		
		
		public static int BrotliDecompressStreaming(global::decode.streams.BrotliInput input, global::decode.streams.BrotliOutput output, int finish, global::decode.state.BrotliState s) {
			unchecked {
				uint context = default(uint);
				int pos = s.pos;
				int i = s.loop_counter;
				int result = ((int) (1) );
				global::decode.bit_reader.BrotliBitReader br = s.br;
				int initial_remaining_len = default(int);
				int bytes_copied = default(int);
				int num_written = default(int);
				s.br.input_ = input;
				s.br.finish_ = finish;
				while (true) {
					if (( result != ((int) (1) ) )) {
						if (( ( result == ((int) (2) ) ) && ( finish == 1 ) )) {
							global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Unexpected end of input. State: ", global::haxe.lang.Runtime.toString(s.state)), "\n"), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
							result = ((int) (0) );
						}
						
						break;
					}
					
					if (( s.state == ((int) (0) ) )) {
						pos = 0;
						s.input_end = 0;
						s.window_bits = 0;
						s.max_distance = 0;
						((int[]) (s.dist_rb) )[0] = 16;
						((int[]) (s.dist_rb) )[1] = 15;
						((int[]) (s.dist_rb) )[2] = 11;
						((int[]) (s.dist_rb) )[3] = 4;
						s.dist_rb_idx = 0;
						s.prev_byte1 = ((uint) (0) );
						s.prev_byte2 = ((uint) (0) );
						s.block_type_trees = null;
						s.block_len_trees = null;
						global::decode.BitReader.BrotliInitBitReader(br, input, finish);
						s.state = ((int) (1) );
					}
					
					if (( s.state == ((int) (1) ) )) {
						if ( ! (global::decode.BitReader.BrotliWarmupBitReader(br)) ) {
							result = ((int) (2) );
							continue;
						}
						
						s.window_bits = global::decode.Decode.DecodeWindowBits(br);
						if (( s.window_bits == 9 )) {
							result = ((int) (0) );
							continue;
						}
						
						s.max_backward_distance = ( (( 1 << s.window_bits )) - 16 );
						s.block_type_trees = global::FunctionMalloc.malloc2_decode_huffman_HuffmanCode(typeof(global::decode.huffman.HuffmanCode), 3240);
						s.block_len_trees = global::FunctionMalloc.malloc2_decode_huffman_HuffmanCode(typeof(global::decode.huffman.HuffmanCode), 3240);
						if (( ( s.block_type_trees == null ) || ( s.block_len_trees == null ) )) {
							result = ((int) (0) );
							continue;
						}
						
						s.state = ((int) (10) );
					}
					
					if (( s.state == ((int) (10) ) )) {
						if (( s.input_end != 0 )) {
							s.partially_written = 0;
							s.state = ((int) (100) );
							continue;
						}
						
						s.meta_block_remaining_len = 0;
						((int[]) (s.block_length) )[0] = 268435456;
						((int[]) (s.block_length) )[1] = 268435456;
						((int[]) (s.block_length) )[2] = 268435456;
						((int[]) (s.block_type) )[0] = 0;
						((int[]) (s.num_block_types) )[0] = 1;
						((int[]) (s.num_block_types) )[1] = 1;
						((int[]) (s.num_block_types) )[2] = 1;
						((int[]) (s.block_type_rb) )[0] = 0;
						((int[]) (s.block_type_rb) )[1] = 1;
						((int[]) (s.block_type_rb) )[2] = 0;
						((int[]) (s.block_type_rb) )[3] = 1;
						((int[]) (s.block_type_rb) )[4] = 0;
						((int[]) (s.block_type_rb) )[5] = 1;
						((int[]) (s.block_type_rb_index) )[0] = 0;
						s.context_map = null;
						s.context_modes = null;
						s.dist_context_map = null;
						s.context_offset = 0;
						s.context_map_slice = null;
						s.context_map_slice_off = 0;
						s.literal_htree_index = ((uint) (0) );
						s.dist_context_offset = 0;
						s.dist_context_map_slice = null;
						s.dist_context_map_slice_off = 0;
						s.dist_htree_index = ((uint) (0) );
						s.context_lookup_offset1 = 0;
						s.context_lookup_offset2 = 0;
						{
							int _g = 0;
							while (( _g < 3 )) {
								int i1 = _g++;
								((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[i1].codes = null;
								((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[i1].htrees = null;
							}
							
						}
						
						s.state = ((int) (11) );
					}
					
					if (( s.state == ((int) (11) ) )) {
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							result = ((int) (2) );
							continue;
						}
						
						global::Array<int> meta_block_remaining_len = new global::Array<int>(new int[]{s.meta_block_remaining_len});
						global::Array<int> input_end = new global::Array<int>(new int[]{s.input_end});
						global::Array<int> is_metadata = new global::Array<int>(new int[]{s.is_metadata});
						global::Array<int> is_uncompressed = new global::Array<int>(new int[]{s.is_uncompressed});
						if ( ! (global::decode.Decode.DecodeMetaBlockLength(br, meta_block_remaining_len, input_end, is_metadata, is_uncompressed)) ) {
							result = ((int) (0) );
							continue;
						}
						
						s.meta_block_remaining_len = meta_block_remaining_len[0];
						s.input_end = input_end[0];
						s.is_metadata = is_metadata[0];
						s.is_uncompressed = is_uncompressed[0];
						if (( s.ringbuffer == null )) {
							global::Array<int> known_size = new global::Array<int>(new int[]{0});
							s.ringbuffer_size = ( 1 << s.window_bits );
							if (( global::decode.Decode.BrotliDecompressedSize(4096, br.buf_, br.buf_off, known_size) == ((int) (1) ) )) {
								while (( ( s.ringbuffer_size >= ( known_size[0] * 2 ) ) && ( s.ringbuffer_size > 1 ) )) {
									s.ringbuffer_size = ( s.ringbuffer_size / 2 );
								}
								
							}
							
							while (( s.ringbuffer_size < s.custom_dict_size )) {
								s.ringbuffer_size *= 2;
							}
							
							s.ringbuffer_mask = ( s.ringbuffer_size - 1 );
							s.ringbuffer = ((uint[]) (new uint[( ( s.ringbuffer_size + 4224 ) + 24 )]) );
							s.ringbuffer_off = 0;
							if (( ( ((uint[]) (s.ringbuffer) ) as global::System.Array ).Length == 0 )) {
								result = ((int) (0) );
								continue;
							}
							
							s.ringbuffer_end = s.ringbuffer;
							s.ringbuffer_end_off = ( s.ringbuffer_off + s.ringbuffer_size );
							if (( s.custom_dict_off != -1 )) {
								global::DefaultFunctions.memcpy_UInt(s.ringbuffer, ( s.ringbuffer_off + ((  - (s.custom_dict_size)  & s.ringbuffer_mask )) ), s.custom_dict, s.custom_dict_off, s.custom_dict_size);
								if (( s.custom_dict_size > 0 )) {
									s.prev_byte1 = ((uint[]) (s.custom_dict) )[( s.custom_dict_size - 1 )];
								}
								
								if (( s.custom_dict_size > 1 )) {
									s.prev_byte2 = ((uint[]) (s.custom_dict) )[( s.custom_dict_size - 2 )];
								}
								
							}
							
						}
						
						if (( s.is_metadata == 1 )) {
							if ( ! (global::decode.Decode.JumpToByteBoundary(s.br)) ) {
								result = ((int) (0) );
								continue;
							}
							
							s.state = ((int) (18) );
							continue;
						}
						
						if (( s.meta_block_remaining_len == 0 )) {
							s.state = ((int) (20) );
							continue;
						}
						
						if (( s.is_uncompressed == 1 )) {
							if ( ! (global::decode.Decode.JumpToByteBoundary(s.br)) ) {
								result = ((int) (0) );
								continue;
							}
							
							s.state = ((int) (17) );
							continue;
						}
						
						i = 0;
						s.state = ((int) (30) );
						continue;
					}
					
					if (( s.state == ((int) (17) ) )) {
						initial_remaining_len = s.meta_block_remaining_len;
						result = global::decode.Decode.CopyUncompressedBlockToOutput(output, pos, s);
						if (( result == ((int) (3) ) )) {
							continue;
						}
						
						bytes_copied = ( initial_remaining_len - s.meta_block_remaining_len );
						pos += bytes_copied;
						if (( bytes_copied > 0 )) {
							s.prev_byte2 = ( (( bytes_copied == 1 )) ? (s.prev_byte1) : (((uint[]) (s.ringbuffer) )[( ( pos - 2 ) & s.ringbuffer_mask )]) );
							s.prev_byte1 = ((uint[]) (s.ringbuffer) )[( ( pos - 1 ) & s.ringbuffer_mask )];
						}
						
						if (( result != ((int) (1) ) )) {
							continue;
						}
						
						s.state = ((int) (20) );
						continue;
					}
					
					if (( s.state == ((int) (18) ) )) {
						while (( s.meta_block_remaining_len > 0 )) {
							if ( ! (global::decode.BitReader.BrotliReadMoreInput(s.br)) ) {
								result = ((int) (2) );
								continue;
							}
							
							global::decode.BitReader.BrotliReadBits(s.br, 8);
							 -- s.meta_block_remaining_len;
						}
						
						s.state = ((int) (20) );
						continue;
					}
					
					if (( s.state == ((int) (30) ) )) {
						if (( i >= 3 )) {
							s.state = ((int) (12) );
							continue;
						}
						
						((int[]) (s.num_block_types) )[i] = ( global::decode.Decode.DecodeVarLenUint8(br) + 1 );
						s.state = ((int) (31) );
					}
					
					if (( s.state == ((int) (31) ) )) {
						if (( ((int[]) (s.num_block_types) )[i] >= 2 )) {
							result = global::decode.Decode.ReadHuffmanCode(( ((int[]) (s.num_block_types) )[i] + 2 ), s.block_type_trees, ( i * 1080 ), null, s);
							if (( result != ((int) (1) ) )) {
								continue;
							}
							
							s.state = ((int) (32) );
						}
						else {
							 ++ i;
							s.state = ((int) (30) );
							continue;
						}
						
					}
					
					if (( s.state == ((int) (32) ) )) {
						result = global::decode.Decode.ReadHuffmanCode(26, s.block_len_trees, ( i * 1080 ), null, s);
						if (( result != ((int) (1) ) )) {
							break;
						}
						
						((int[]) (s.block_length) )[i] = global::decode.Decode.ReadBlockLength(s.block_len_trees, ( i * 1080 ), br);
						((int[]) (s.block_type_rb_index) )[i] = 1;
						 ++ i;
						s.state = ((int) (30) );
						continue;
					}
					
					if (( s.state == ((int) (12) ) )) {
						if ( ! (global::decode.BitReader.BrotliReadInputAmount(br, 128)) ) {
							result = ((int) (2) );
							continue;
						}
						
						s.distance_postfix_bits = ((int) (global::decode.BitReader.BrotliReadBits(br, 2)) );
						s.num_direct_distance_codes = ((int) (((uint) (( (((uint) (( global::decode.BitReader.BrotliReadBits(br, 4) << s.distance_postfix_bits )) )) + 16 )) )) );
						s.distance_postfix_mask = ( (( 1 << s.distance_postfix_bits )) - 1 );
						s.num_distance_codes = ( s.num_direct_distance_codes + (( 48 << s.distance_postfix_bits )) );
						s.context_modes = global::FunctionMalloc.mallocUInt(((int[]) (s.num_block_types) )[0]);
						if (( ( ((uint[]) (s.context_modes) ) as global::System.Array ).Length == 0 )) {
							result = ((int) (0) );
							continue;
						}
						
						{
							int _g3 = 0;
							int _g2 = ((int[]) (s.num_block_types) )[0];
							while (( _g3 < _g2 )) {
								((uint[]) (s.context_modes) )[_g3++] = ((uint) (( global::decode.BitReader.BrotliReadBits(br, 2) << 1 )) );
							}
							
						}
						
						s.state = ((int) (33) );
					}
					
					if (( s.state == ((int) (33) ) )) {
						global::Array<int> num_literal_htrees = new global::Array<int>(new int[]{s.num_literal_htrees});
						global::Array<object> context_map = new global::Array<object>(new object[]{s.context_map});
						result = global::decode.Decode.DecodeContextMap(( ((int[]) (s.num_block_types) )[0] << 6 ), num_literal_htrees, context_map, s);
						s.num_literal_htrees = num_literal_htrees[0];
						s.context_map = ((uint[]) (context_map[0]) );
						s.context_map_off = 0;
						s.trivial_literal_context = 1;
						{
							int _g1 = 0;
							int _g4 = ( ((int[]) (s.num_block_types) )[0] << 6 );
							while (( _g1 < _g4 )) {
								int i2 = _g1++;
								if (((bool) (( ((uint[]) (s.context_map) )[i2] != ( i2 >> 6 ) )) )) {
									s.trivial_literal_context = 0;
									continue;
								}
								
							}
							
						}
						
						if (( result != ((int) (1) ) )) {
							continue;
						}
						
						s.state = ((int) (34) );
					}
					
					if (( s.state == ((int) (34) ) )) {
						global::Array<int> num_dist_htrees = new global::Array<int>(new int[]{s.num_dist_htrees});
						global::Array<object> dist_context_map = new global::Array<object>(new object[]{s.dist_context_map});
						result = global::decode.Decode.DecodeContextMap(( ((int[]) (s.num_block_types) )[2] << 2 ), num_dist_htrees, dist_context_map, s);
						s.num_dist_htrees = num_dist_htrees[0];
						s.dist_context_map = ((uint[]) (dist_context_map[0]) );
						s.dist_context_map_off = 0;
						if (( result != ((int) (1) ) )) {
							continue;
						}
						
						global::decode.Huffman.BrotliHuffmanTreeGroupInit(((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[0], 256, s.num_literal_htrees);
						global::decode.Huffman.BrotliHuffmanTreeGroupInit(((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[1], 704, ((int[]) (s.num_block_types) )[1]);
						global::decode.Huffman.BrotliHuffmanTreeGroupInit(((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[2], s.num_distance_codes, s.num_dist_htrees);
						i = 0;
						s.state = ((int) (35) );
					}
					
					if (( s.state == ((int) (35) ) )) {
						result = global::decode.Decode.HuffmanTreeGroupDecode(((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[i], s);
						if (( result != ((int) (1) ) )) {
							continue;
						}
						
						 ++ i;
						if (( i >= 3 )) {
							s.context_map_slice = s.context_map;
							s.context_map_slice_off = s.context_map_off;
							s.dist_context_map_slice = s.dist_context_map;
							s.dist_context_map_slice_off = s.dist_context_map_off;
							s.context_mode = ((uint[]) (s.context_modes) )[((int[]) (s.block_type) )[0]];
							s.context_lookup_offset1 = global::decode.Context.kContextLookupOffsets[((int) (s.context_mode) )];
							s.context_lookup_offset2 = global::decode.Context.kContextLookupOffsets[((int) (((uint) (( s.context_mode + 1 )) )) )];
							s.htree_command = ((global::decode.huffman.HuffmanCode[]) (((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[1].htrees[0]) );
							s.htree_command_off = ((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[1].htrees_off[0];
							s.state = ((int) (13) );
							continue;
						}
						
						continue;
					}
					
					if (( s.state == ((int) (13) ) )) {
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							result = ((int) (2) );
							continue;
						}
						
						if (( s.meta_block_remaining_len <= 0 )) {
							pos &= 1073741823;
							s.state = ((int) (20) );
							continue;
						}
						
						if (( ((int[]) (s.block_length) )[1] == 0 )) {
							global::decode.Decode.DecodeBlockType(((int[]) (s.num_block_types) )[1], s.block_type_trees, 1, s.block_type, s.block_type_rb, s.block_type_rb_index, br);
							((int[]) (s.block_length) )[1] = global::decode.Decode.ReadBlockLength(s.block_len_trees, 1080, br);
							s.htree_command = ((global::decode.huffman.HuffmanCode[]) (((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[1].htrees[((int[]) (s.block_type) )[1]]) );
							s.htree_command_off = ((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[1].htrees_off[((int[]) (s.block_type) )[1]];
						}
						
						((int[]) (s.block_length) )[1] -= 1;
						s.cmd_code = global::decode.Decode.ReadSymbol(s.htree_command, s.htree_command_off, br);
						s.range_idx = ( s.cmd_code >> 6 );
						if (( s.range_idx >= 2 )) {
							s.range_idx -= 2;
							s.distance_code = -1;
						}
						else {
							s.distance_code = 0;
						}
						
						s.insert_code = ( global::decode.Prefix.kInsertRangeLut[s.range_idx] + (( ( s.cmd_code >> 3 ) & 7 )) );
						s.copy_code = ( global::decode.Prefix.kCopyRangeLut[s.range_idx] + (( s.cmd_code & 7 )) );
						int _g5 = ((global::decode.prefix.PrefixCodeRange) (global::decode.Prefix.kInsertLengthPrefixCode[s.insert_code]) ).offset;
						s.insert_length = ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, ((global::decode.prefix.PrefixCodeRange) (global::decode.Prefix.kInsertLengthPrefixCode[s.insert_code]) ).nbits) + _g5 )) )) );
						int _g21 = ((global::decode.prefix.PrefixCodeRange) (global::decode.Prefix.kCopyLengthPrefixCode[s.copy_code]) ).offset;
						s.copy_length = ((int) (((uint) (( global::decode.BitReader.BrotliReadBits(br, ((global::decode.prefix.PrefixCodeRange) (global::decode.Prefix.kCopyLengthPrefixCode[s.copy_code]) ).nbits) + _g21 )) )) );
						i = 0;
						s.state = ((int) (14) );
					}
					
					if (( s.state == ((int) (14) ) )) {
						if (( s.trivial_literal_context == 1 )) {
							while (( i < s.insert_length )) {
								if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
									result = ((int) (2) );
									break;
								}
								
								if (( ((int[]) (s.block_length) )[0] == 0 )) {
									global::decode.Decode.DecodeBlockTypeWithContext(s, br);
								}
								
								((uint[]) (s.ringbuffer) )[( pos & s.ringbuffer_mask )] = ((uint) (global::decode.Decode.ReadSymbol(((global::decode.huffman.HuffmanCode[]) (((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[0].htrees[((int) (s.literal_htree_index) )]) ), ((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[0].htrees_off[((int) (s.literal_htree_index) )], br)) );
								((int[]) (s.block_length) )[0] -= 1;
								if (( (( pos & s.ringbuffer_mask )) == s.ringbuffer_mask )) {
									s.partially_written = 0;
									s.state = ((int) (19) );
									break;
								}
								
								 ++ pos;
								 ++ i;
							}
							
						}
						else {
							uint p1 = s.prev_byte1;
							uint p2 = s.prev_byte2;
							while (( i < s.insert_length )) {
								if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
									result = ((int) (2) );
									break;
								}
								
								if (( ((int[]) (s.block_length) )[0] == 0 )) {
									global::decode.Decode.DecodeBlockTypeWithContext(s, br);
								}
								
								context = ((uint) (( global::decode.Context.kContextLookup[((int) (((uint) (( p1 + s.context_lookup_offset1 )) )) )] | global::decode.Context.kContextLookup[((int) (((uint) (( p2 + s.context_lookup_offset2 )) )) )] )) );
								s.literal_htree_index = ((uint[]) (s.context_map_slice) )[((int) (((uint) (( context + s.context_map_slice_off )) )) )];
								((int[]) (s.block_length) )[0] -= 1;
								p2 = p1;
								p1 = ((uint) (global::decode.Decode.ReadSymbol(((global::decode.huffman.HuffmanCode[]) (((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[0].htrees[((int) (s.literal_htree_index) )]) ), ((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[0].htrees_off[((int) (s.literal_htree_index) )], br)) );
								((uint[]) (s.ringbuffer) )[( pos & s.ringbuffer_mask )] = p1;
								if (( (( pos & s.ringbuffer_mask )) == s.ringbuffer_mask )) {
									s.partially_written = 0;
									s.state = ((int) (19) );
									break;
								}
								
								 ++ pos;
								 ++ i;
							}
							
							s.prev_byte1 = p1;
							s.prev_byte2 = p2;
						}
						
						if (( ( result != ((int) (1) ) ) || ( s.state == ((int) (19) ) ) )) {
							continue;
						}
						
						s.meta_block_remaining_len -= s.insert_length;
						if (( s.meta_block_remaining_len <= 0 )) {
							s.state = ((int) (20) );
							continue;
						}
						else if (( s.distance_code < 0 )) {
							s.state = ((int) (15) );
						}
						else {
							s.state = ((int) (16) );
							continue;
						}
						
					}
					
					if (( s.state == ((int) (15) ) )) {
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							result = ((int) (2) );
							continue;
						}
						
						if (( ((int[]) (s.block_length) )[2] == 0 )) {
							global::decode.Decode.DecodeBlockType(((int[]) (s.num_block_types) )[2], s.block_type_trees, 2, s.block_type, s.block_type_rb, s.block_type_rb_index, br);
							((int[]) (s.block_length) )[2] = global::decode.Decode.ReadBlockLength(s.block_len_trees, 2160, br);
							s.dist_context_offset = ( ((int[]) (s.block_type) )[2] << 2 );
							s.dist_context_map_slice = s.dist_context_map;
							s.dist_context_map_slice_off = ( s.dist_context_map_off + s.dist_context_offset );
						}
						
						((int[]) (s.block_length) )[2] -= 1;
						if (( s.copy_length > 4 )) {
							context = ((uint) (3) );
						}
						else {
							context = ((uint) (( s.copy_length - 2 )) );
						}
						
						s.dist_htree_index = ((uint[]) (s.dist_context_map_slice) )[((int) (((uint) (( context + s.dist_context_map_slice_off )) )) )];
						s.distance_code = global::decode.Decode.ReadSymbol(((global::decode.huffman.HuffmanCode[]) (((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[2].htrees[((int) (s.dist_htree_index) )]) ), ((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[2].htrees_off[((int) (s.dist_htree_index) )], br);
						if (( s.distance_code >= s.num_direct_distance_codes )) {
							int nbits = default(int);
							int postfix = default(int);
							int offset = default(int);
							s.distance_code -= s.num_direct_distance_codes;
							postfix = ( s.distance_code & s.distance_postfix_mask );
							s.distance_code >>= s.distance_postfix_bits;
							nbits = ( (( s.distance_code >> 1 )) + 1 );
							offset = ( (( ( 2 + (( s.distance_code & 1 )) ) << nbits )) - 4 );
							int _g22 = s.num_direct_distance_codes;
							s.distance_code = ((int) (((uint) (( ((uint) (( (((uint) (( ((uint) (( global::decode.BitReader.BrotliReadBits(br, nbits) + offset )) ) << s.distance_postfix_bits )) )) + _g22 )) ) + postfix )) )) );
						}
						
						s.state = ((int) (16) );
					}
					
					if (( s.state == ((int) (16) ) )) {
						if ( ! (global::decode.BitReader.BrotliReadMoreInput(br)) ) {
							result = ((int) (2) );
							continue;
						}
						
						s.distance = global::decode.Decode.TranslateShortCodes(s.distance_code, s.dist_rb, s.dist_rb_idx);
						if (( s.distance < 0 )) {
							result = ((int) (0) );
							continue;
						}
						
						if (( ( ( pos + s.custom_dict_size ) < s.max_backward_distance ) && ( s.max_distance != s.max_backward_distance ) )) {
							s.max_distance = ( pos + s.custom_dict_size );
						}
						else {
							s.max_distance = s.max_backward_distance;
						}
						
						s.copy_dst = s.ringbuffer;
						s.copy_dst_off = ( s.ringbuffer_off + (( pos & s.ringbuffer_mask )) );
						if (( s.distance > s.max_distance )) {
							if (( ( s.copy_length >= 4 ) && ( s.copy_length <= 24 ) )) {
								int offset1 = global::decode.Dictionary.kBrotliDictionaryOffsetsByLength[s.copy_length];
								int word_id = ( ( s.distance - s.max_distance ) - 1 );
								int shift = global::decode.Dictionary.kBrotliDictionarySizeBitsByLength[s.copy_length];
								int transform_idx = ( word_id >> shift );
								offset1 += ( (( word_id & ( (( 1 << shift )) - 1 ) )) * s.copy_length );
								if (( transform_idx < global::decode.Transforms.kNumTransforms )) {
									int len = global::decode.Transforms.TransformDictionaryWord(s.copy_dst, s.copy_dst_off, global::decode.Dictionary.kBrotliDictionary, offset1, s.copy_length, transform_idx);
									s.copy_dst_off += len;
									pos += len;
									s.meta_block_remaining_len -= len;
									if (( s.copy_dst_off >= s.ringbuffer_end_off )) {
										s.partially_written = 0;
										num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, s.ringbuffer_off, s.ringbuffer_size);
										if (( num_written < 0 )) {
											result = ((int) (0) );
											continue;
										}
										
										s.partially_written += num_written;
										if (( s.partially_written < s.ringbuffer_size )) {
											result = ((int) (3) );
											s.state = ((int) (21) );
											continue;
										}
										
										global::DefaultFunctions.memcpy_UInt(s.ringbuffer, s.ringbuffer_off, s.ringbuffer_end, s.ringbuffer_end_off, ( s.copy_dst_off - s.ringbuffer_end_off ));
									}
									
								}
								else {
									global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid backward reference. pos: ", global::haxe.lang.Runtime.toString(pos)), " distance: "), global::haxe.lang.Runtime.toString(s.distance)), " "), "len: "), global::haxe.lang.Runtime.toString(s.copy_length)), " bytes left: "), global::haxe.lang.Runtime.toString(s.meta_block_remaining_len)), "\n"), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
									result = ((int) (0) );
									continue;
								}
								
							}
							else {
								global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid backward reference. pos: ", global::haxe.lang.Runtime.toString(pos)), " distance: "), global::haxe.lang.Runtime.toString(s.distance)), " "), "len: "), global::haxe.lang.Runtime.toString(s.copy_length)), " bytes left: "), global::haxe.lang.Runtime.toString(s.meta_block_remaining_len)), "\n"), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
								result = ((int) (0) );
								continue;
							}
							
						}
						else {
							if (( s.distance_code > 0 )) {
								((int[]) (s.dist_rb) )[( s.dist_rb_idx & 3 )] = s.distance;
								 ++ s.dist_rb_idx;
							}
							
							if (( s.copy_length > s.meta_block_remaining_len )) {
								global::haxe.Log.trace.__hx_invoke2_o(default(double), global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid backward reference. pos: ", global::haxe.lang.Runtime.toString(pos)), " distance: "), global::haxe.lang.Runtime.toString(s.distance)), " "), "len: "), global::haxe.lang.Runtime.toString(s.copy_length)), " bytes left: "), global::haxe.lang.Runtime.toString(s.meta_block_remaining_len)), "\n"), default(double), new global::haxe.lang.DynamicObject(new int[]{302979532, 1547539107, 1648581351}, new object[]{"BROTLI_LOG", "decode.Decode", "Decode.hx"}, new int[]{1981972957}, new double[]{((double) (55) )}));
								result = ((int) (0) );
								continue;
							}
							
							s.copy_src = s.ringbuffer;
							s.copy_src_off = ( s.ringbuffer_off + (( ( pos - s.distance ) & s.ringbuffer_mask )) );
							{
								int _g11 = 0;
								int _g6 = s.copy_length;
								while (( _g11 < _g6 )) {
									 ++ _g11;
									((uint[]) (s.ringbuffer) )[( pos & s.ringbuffer_mask )] = ((uint[]) (s.ringbuffer) )[( ( pos - s.distance ) & s.ringbuffer_mask )];
									if (( (( pos & s.ringbuffer_mask )) == s.ringbuffer_mask )) {
										s.partially_written = 0;
										num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, s.ringbuffer_off, s.ringbuffer_size);
										if (( num_written < 0 )) {
											result = ((int) (0) );
											continue;
										}
										
										s.partially_written += num_written;
										if (( s.partially_written < s.ringbuffer_size )) {
											result = ((int) (3) );
											s.state = ((int) (22) );
											continue;
										}
										
									}
									
									 ++ pos;
									 -- s.meta_block_remaining_len;
								}
								
							}
							
							if (( result == ((int) (3) ) )) {
								continue;
							}
							
						}
						
						s.state = ((int) (23) );
					}
					
					if (( s.state == ((int) (23) ) )) {
						s.prev_byte1 = ((uint[]) (s.ringbuffer) )[( ( pos - 1 ) & s.ringbuffer_mask )];
						s.prev_byte2 = ((uint[]) (s.ringbuffer) )[( ( pos - 2 ) & s.ringbuffer_mask )];
						s.state = ((int) (13) );
					}
					
					if (( ( ( s.state == ((int) (19) ) ) || ( s.state == ((int) (21) ) ) ) || ( s.state == ((int) (22) ) ) )) {
						num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, ( s.ringbuffer_off + s.partially_written ), ( s.ringbuffer_size - s.partially_written ));
						if (( num_written < 0 )) {
							result = ((int) (0) );
							continue;
						}
						
						s.partially_written += num_written;
						if (( s.partially_written < s.ringbuffer_size )) {
							result = ((int) (3) );
							continue;
						}
						
						if (( s.state == ((int) (21) ) )) {
							global::DefaultFunctions.memcpy_UInt(s.ringbuffer, s.ringbuffer_off, s.ringbuffer_end, s.ringbuffer_end_off, ( s.copy_dst_off - s.ringbuffer_end_off ));
							s.state = ((int) (23) );
						}
						else if (( s.state == ((int) (22) ) )) {
							 ++ pos;
							 -- s.meta_block_remaining_len;
							 ++ i;
							while (( i < s.copy_length )) {
								((uint[]) (s.ringbuffer) )[( pos & s.ringbuffer_mask )] = ((uint[]) (s.ringbuffer) )[( ( pos - s.distance ) & s.ringbuffer_mask )];
								if (( (( pos & s.ringbuffer_mask )) == s.ringbuffer_mask )) {
									s.partially_written = 0;
									num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, s.ringbuffer_off, s.ringbuffer_size);
									if (( num_written < 0 )) {
										result = ((int) (0) );
										continue;
									}
									
									s.partially_written += num_written;
									if (( s.partially_written < s.ringbuffer_size )) {
										result = ((int) (3) );
										continue;
									}
									
								}
								
								 ++ pos;
								 -- s.meta_block_remaining_len;
								 ++ i;
							}
							
							if (( result == ((int) (3) ) )) {
								continue;
							}
							
							s.state = ((int) (23) );
						}
						else {
							 ++ pos;
							 ++ i;
							s.state = ((int) (14) );
						}
						
						continue;
					}
					
					if (( s.state == ((int) (20) ) )) {
						if (( s.context_modes != null )) {
							s.context_modes = null;
						}
						
						if (( s.context_map != null )) {
							s.context_map = null;
						}
						
						if (( s.dist_context_map != null )) {
							s.dist_context_map = null;
						}
						
						{
							int _g7 = 0;
							while (( _g7 < 3 )) {
								int i3 = _g7++;
								((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[i3].codes = null;
								((global::decode.huffman.HuffmanTreeGroup[]) (s.hgroup) )[i3].htrees = null;
							}
							
						}
						
						s.state = ((int) (10) );
						continue;
					}
					
					if (( s.state == ((int) (100) ) )) {
						if (( ( ((uint[]) (s.ringbuffer) ) as global::System.Array ).Length != 0 )) {
							num_written = global::decode.Streams.BrotliWrite(output, s.ringbuffer, ( s.ringbuffer_off + s.partially_written ), ( (( pos & s.ringbuffer_mask )) - s.partially_written ));
							if (( num_written < 0 )) {
								return ((int) (0) );
							}
							
							if (( (s.partially_written += num_written) < (( pos & s.ringbuffer_mask )) )) {
								result = ((int) (3) );
								break;
							}
							
						}
						
						if ( ! (global::decode.Decode.JumpToByteBoundary(s.br)) ) {
							result = ((int) (0) );
						}
						
						return result;
					}
					
				}
				
				s.pos = pos;
				s.loop_counter = i;
				return result;
			}
		}
		
		
		public static int BrotliDecompress(global::decode.streams.BrotliInput input, global::decode.streams.BrotliOutput output) {
			unchecked {
				global::decode.state.BrotliState s = new global::decode.state.BrotliState();
				global::decode.State.BrotliStateInit(s);
				global::decode.Decode.BrotliDecompressStreaming(input, output, 1, s);
				return 1;
			}
		}
		
		
	}
}


