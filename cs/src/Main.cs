// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
public class EntryPoint__Main {
	public static void Main() {
		global::cs.Boot.init();
		{
			global::Main.main();
		}
	}
}

public class Main : global::decode.Decode {
	
	public Main(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
	}
	
	
	public Main() {
		global::Main.__hx_ctor__Main(this);
	}
	
	
	public static void __hx_ctor__Main(global::Main __hx_this) {
	}
	
	
	public static bool ParseQuality(string s, global::Array<int> quality) {
		unchecked {
			global::haxe.lang.Null<int> i = global::Std.parseInt(s);
			if (( ( (i).@value >= 0 ) && ( (i).@value <= 11 ) )) {
				quality[0] = (i).@value;
				return true;
			}
			else {
				return false;
			}
			
		}
	}
	
	
	public static bool ParseArgv(int argc, global::Array<object> argv, global::Array<object> input_path, global::Array<object> output_path, global::Array<int> force, global::Array<int> quality, global::Array<int> decompress) {
		unchecked {
			bool error = false;
			force[0] = 0;
			input_path[0] = "";
			output_path[0] = "";
			if (( argc > 0 )) {
				decompress[0] = ( (( ( global::haxe.lang.Runtime.toString(argv[0]).Length >= 5 ) && string.Equals(global::haxe.lang.Runtime.toString(argv[0]), "unbro") )) ? (1) : (0) );
			}
			else {
				error = true;
			}
			
			int k = 0;
			int i = 0;
			if ( ! (error) ) {
				while (( i < argc )) {
					k = i++;
					if (( string.Equals("--force", global::haxe.lang.Runtime.toString(argv[k])) || string.Equals("-f", global::haxe.lang.Runtime.toString(argv[k])) )) {
						if (( force[0] != 0 )) {
							error = true;
							break;
						}
						
						force[0] = 1;
						continue;
					}
					else if (( ( string.Equals("--decompress", global::haxe.lang.Runtime.toString(argv[k])) || string.Equals("--uncompress", global::haxe.lang.Runtime.toString(argv[k])) ) || string.Equals("-d", global::haxe.lang.Runtime.toString(argv[k])) )) {
						decompress[0] = 1;
						continue;
					}
					
					if (( k < ( argc - 1 ) )) {
						if (( ( string.Equals("--input", global::haxe.lang.Runtime.toString(argv[k])) || string.Equals("--in", global::haxe.lang.Runtime.toString(argv[k])) ) || string.Equals("-i", global::haxe.lang.Runtime.toString(argv[k])) )) {
							if ( ! (string.Equals(global::haxe.lang.Runtime.toString(input_path[0]), "")) ) {
								error = true;
								break;
							}
							
							input_path[0] = global::haxe.lang.Runtime.toString(argv[( k + 1 )]);
							 ++ i;
							continue;
						}
						else if (( ( string.Equals("--output", global::haxe.lang.Runtime.toString(argv[k])) || string.Equals("--out", global::haxe.lang.Runtime.toString(argv[k])) ) || string.Equals("-o", global::haxe.lang.Runtime.toString(argv[k])) )) {
							if ( ! (string.Equals(global::haxe.lang.Runtime.toString(output_path[0]), "")) ) {
								error = true;
								break;
							}
							
							output_path[0] = global::haxe.lang.Runtime.toString(argv[( k + 1 )]);
							 ++ i;
							continue;
						}
						else if (( string.Equals("--quality", global::haxe.lang.Runtime.toString(argv[k])) || string.Equals("-q", global::haxe.lang.Runtime.toString(argv[k])) )) {
							if ( ! (global::Main.ParseQuality(global::haxe.lang.Runtime.toString(argv[( k + 1 )]), quality)) ) {
								error = true;
								break;
							}
							
							 ++ i;
							continue;
						}
						
					}
					
					error = true;
					break;
				}
				
			}
			
			if (error) {
				global::System.Console.Write(((object) ("Usage: [--force] [--quality n] [--decompress] [--input filename] [--output filename]\n") ));
				return false;
			}
			
			return true;
		}
	}
	
	
	public static void main() {
		unchecked {
			global::Array<object> argv = global::Sys.args();
			global::Array<object> input_path = new global::Array<object>(new object[]{""});
			global::Array<object> output_path = new global::Array<object>(new object[]{""});
			global::Array<int> force = new global::Array<int>(new int[]{0});
			global::Array<int> quality = new global::Array<int>(new int[]{11});
			global::Array<int> decompress = new global::Array<int>(new int[]{0});
			if ( ! (global::Main.ParseArgv(argv.length, argv, input_path, output_path, force, quality, decompress)) ) {
				return;
			}
			
			if ( ! (global::sys.FileSystem.exists(global::haxe.lang.Runtime.toString(input_path[0]))) ) {
				global::System.Console.Write(((object) ("Input Filename doesn\'t exists") ));
				return;
			}
			
			if (( global::sys.FileSystem.exists(global::haxe.lang.Runtime.toString(output_path[0])) && ( force[0] == 0 ) )) {
				global::System.Console.Write(((object) ("Output Filename can\'t overwrite") ));
				return;
			}
			
			uint[] dictionary = global::Brotli.OpenInputBinary("dictionary.txt");
			global::Date _this = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
			double clock_start = ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) );
			global::sys.io.FileInput fin = global::Brotli.OpenInputFile(global::haxe.lang.Runtime.toString(input_path[0]));
			global::sys.io.FileOutput fout = global::Brotli.OpenOutputFile(global::haxe.lang.Runtime.toString(output_path[0]), force[0]);
			if (( decompress[0] > 0 )) {
				global::decode.Dictionary.kBrotliDictionary = dictionary;
				global::Date _this1 = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
				long __temp_expr3 = ( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this1.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) );
				long __temp_expr4 = global::System.TimeSpan.TicksPerMillisecond;
				if (( global::decode.Decode.BrotliDecompress(global::decode.Streams.BrotliFileInput(fin), global::decode.Streams.BrotliFileOutput(fout)) <= 0 )) {
					global::System.Console.Write(((object) ("Error while decoding") ));
					return;
				}
				
			}
			else {
				global::encode.Dictionary.kBrotliDictionary = dictionary;
				uint[] DictionaryHash = global::Brotli.OpenInputBinary("DictionaryHash.txt");
				uint[] DictionaryWords = global::Brotli.OpenInputBinary("DictionaryWords.txt");
				uint[] DictionaryBuckets = global::Brotli.OpenInputBinary("DictionaryBuckets.txt");
				global::Array<uint> kStaticDictionaryHash = global::encode.Dictionary_hash.kStaticDictionaryHash;
				global::Array<uint> kStaticDictionaryBuckets = global::encode.Static_dict_lut.kStaticDictionaryBuckets;
				{
					int _g = 0;
					while (( _g < 32768 )) {
						int i = _g++;
						kStaticDictionaryHash.push(((uint) (( ((uint) (( ((uint) (((uint[]) (DictionaryHash) )[( ( i * 2 ) + 1 )]) ) << 8 )) ) | ((uint) (((uint[]) (DictionaryHash) )[( i * 2 )]) ) )) ));
						kStaticDictionaryBuckets.push(((uint) (( ((uint) (( ((uint) (( ((uint) (((uint[]) (DictionaryBuckets) )[( ( i * 3 ) + 2 )]) ) << 16 )) ) | ((uint) (( ((uint) (((uint[]) (DictionaryBuckets) )[( ( i * 3 ) + 1 )]) ) << 8 )) ) )) ) | ((uint) (((uint[]) (DictionaryBuckets) )[( i * 3 )]) ) )) ));
					}
					
				}
				
				global::Array<object> kStaticDictionaryWords = global::encode.Static_dict_lut.kStaticDictionaryWords;
				{
					int _g1 = 0;
					while (( _g1 < 31704 )) {
						int i1 = _g1++;
						kStaticDictionaryWords.push(new global::encode.static_dict_lut.DictWord(((uint) (((uint) (( ((uint) (((uint) (((uint[]) (DictionaryWords) )[( ( i1 * 3 ) + 1 )]) )) ) >> 3 )) )) ), ((uint) (((uint[]) (DictionaryWords) )[( ( i1 * 3 ) + 2 )]) ), ((uint) (( ((uint) (( (((uint) (( ((uint) (((uint[]) (DictionaryWords) )[( ( i1 * 3 ) + 1 )]) ) & 7 )) )) << 8 )) ) | ((uint) (((uint[]) (DictionaryWords) )[( i1 * 3 )]) ) )) )));
					}
					
				}
				
				global::encode.encode.BrotliParams @params = new global::encode.encode.BrotliParams();
				@params.quality = quality[0];
				global::Date _this2 = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
				long __temp_expr1 = ( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this2.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) );
				long __temp_expr2 = global::System.TimeSpan.TicksPerMillisecond;
				if ( ! (global::encode.Encode.BrotliCompress(@params, new global::encode.streams.BrotliIn(fin, 65536), new global::encode.streams.BrotliOut(((global::sys.io.FileOutput) (fout) )))) ) {
					global::System.Console.Write(((object) ("Error while encoding") ));
					return;
				}
				
			}
			
			global::Date _this3 = new global::Date(((global::System.DateTime) (global::System.DateTime.Now) ));
			double duration = ( (( ( ((double) (((long) (( ((long) (global::System.TimeZone.CurrentTimeZone.ToUniversalTime(((global::System.DateTime) (_this3.date) )).Ticks) ) - ((long) (global::Date.epochTicks) ) )) )) ) / ((double) (global::System.TimeSpan.TicksPerMillisecond) ) ) - clock_start )) / 1000 );
			if (( duration < 1e-9 )) {
				duration = 1e-9;
			}
			
			if (( decompress[0] > 0 )) {
				fout.tell();
			}
			else {
				fin.tell();
			}
			
			return;
		}
	}
	
	
}


