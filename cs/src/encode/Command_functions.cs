// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	public class Command_functions : global::haxe.lang.HxObject {
		
		static Command_functions() {
			unchecked {
				global::encode.Command_functions.insbase = new global::Array<int>(new int[]{0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 18, 26, 34, 50, 66, 98, 130, 194, 322, 578, 1090, 2114, 6210, 22594});
				global::encode.Command_functions.insextra = new global::Array<int>(new int[]{0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 12, 14, 24});
				global::encode.Command_functions.copybase = new global::Array<int>(new int[]{2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 18, 22, 30, 38, 54, 70, 102, 134, 198, 326, 582, 1094, 2118});
				global::encode.Command_functions.copyextra = new global::Array<int>(new int[]{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 24});
			}
		}
		
		
		public Command_functions(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Command_functions() {
			global::encode.Command_functions.__hx_ctor_encode_Command_functions(this);
		}
		
		
		public static void __hx_ctor_encode_Command_functions(global::encode.Command_functions __hx_this) {
		}
		
		
		public static void GetDistCode(int distance_code, global::Array<uint> code, global::Array<uint> extra) {
			unchecked {
				if (( distance_code < 16 )) {
					code[0] = ((uint) (distance_code) );
					extra[0] = ((uint) (0) );
				}
				else {
					distance_code -= 12;
					int numextra = ( global::encode.Fast_log.Log2FloorNonZero(((uint) (distance_code) )) - 1 );
					int prefix = ( distance_code >> numextra );
					code[0] = ((uint) (( ( 12 + ( 2 * numextra ) ) + prefix )) );
					extra[0] = ((uint) (( ( numextra << 24 ) | ( distance_code - (( prefix << numextra )) ) )) );
				}
				
			}
		}
		
		
		public static global::Array<int> insbase;
		
		public static global::Array<int> insextra;
		
		public static global::Array<int> copybase;
		
		public static global::Array<int> copyextra;
		
		public static int GetInsertLengthCode(int insertlen) {
			unchecked {
				if (( insertlen < 6 )) {
					return insertlen;
				}
				else if (( insertlen < 130 )) {
					insertlen -= 2;
					int nbits = ( global::encode.Fast_log.Log2FloorNonZero(((uint) (insertlen) )) - 1 );
					return ( ( (( nbits << 1 )) + (( insertlen >> nbits )) ) + 2 );
				}
				else if (( insertlen < 2114 )) {
					return ( global::encode.Fast_log.Log2FloorNonZero(((uint) (( insertlen - 66 )) )) + 10 );
				}
				else if (( insertlen < 6210 )) {
					return 21;
				}
				else if (( insertlen < 22594 )) {
					return 22;
				}
				else {
					return 23;
				}
				
			}
		}
		
		
		public static int GetCopyLengthCode(int copylen) {
			unchecked {
				if (( copylen < 10 )) {
					return ( copylen - 2 );
				}
				else if (( copylen < 134 )) {
					copylen -= 6;
					int nbits = ( global::encode.Fast_log.Log2FloorNonZero(((uint) (copylen) )) - 1 );
					return ( ( (( nbits << 1 )) + (( copylen >> nbits )) ) + 4 );
				}
				else if (( copylen < 2118 )) {
					return ( global::encode.Fast_log.Log2FloorNonZero(((uint) (( copylen - 70 )) )) + 12 );
				}
				else {
					return 23;
				}
				
			}
		}
		
		
		public static int CombineLengthCodes(int inscode, int copycode, int distancecode) {
			unchecked {
				int bits64 = ( ( copycode & 7 ) | ( (( inscode & 7 )) << 3 ) );
				if (( ( ( distancecode == 0 ) && ( inscode < 8 ) ) && ( copycode < 16 ) )) {
					if (( copycode < 8 )) {
						return bits64;
					}
					else {
						return ( bits64 | 64 );
					}
					
				}
				else {
					return ( ( new global::Array<int>(new int[]{2, 3, 6, 4, 5, 8, 7, 9, 10})[( (( copycode >> 3 )) + ( 3 * (( inscode >> 3 )) ) )] << 6 ) | bits64 );
				}
				
			}
		}
		
		
		public static void GetLengthCode(int insertlen, int copylen, int distancecode, global::Array<uint> code, global::Array<uint> extra) {
			unchecked {
				int inscode = global::encode.Command_functions.GetInsertLengthCode(insertlen);
				int copycode = global::encode.Command_functions.GetCopyLengthCode(copylen);
				uint insnumextra = ((uint) (global::encode.Command_functions.insextra[inscode]) );
				uint numextra = ((uint) (( insnumextra + global::encode.Command_functions.copyextra[copycode] )) );
				uint insextraval = ((uint) (( insertlen - global::encode.Command_functions.insbase[inscode] )) );
				uint copyextraval = ((uint) (( copylen - global::encode.Command_functions.copybase[copycode] )) );
				code[0] = ((uint) (global::encode.Command_functions.CombineLengthCodes(inscode, copycode, distancecode)) );
				if (((bool) (( numextra < 32 )) )) {
					extra[0] = ((uint) (( ((uint) (( numextra << 16 )) ) | 0 )) );
					extra[1] = ((uint) (( ((uint) (( copyextraval << ((int) (insnumextra) ) )) ) | insextraval )) );
				}
				else {
					long @value = ((long) (0) );
					@value = ((long) (( ((long) (@value) ) + (((long) (( ((long) (numextra) ) << 48 )) )) )) );
					@value = ((long) (( ((long) (@value) ) + (((long) (( ((long) (copyextraval) ) << ((int) (insnumextra) ) )) )) )) );
					@value = ((long) (( ((long) (@value) ) + ((long) (insextraval) ) )) );
					long x = ((long) (((int) (((long) (( ((long) (@value) ) >> 32 )) )) )) );
					if (( ((bool) (( ((long) (x) ) < -2147483648 )) ) || ((bool) (( ((long) (x) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					extra[0] = ((uint) (((int) (((long) (x) )) )) );
					long x1 = ((long) (((int) (((long) (@value) )) )) );
					if (( ((bool) (( ((long) (x1) ) < -2147483648 )) ) || ((bool) (( ((long) (x1) ) > 2147483647 )) ) )) {
						throw global::haxe.lang.HaxeException.wrap("Overflow");
					}
					
					extra[1] = ((uint) (((int) (((long) (x1) )) )) );
				}
				
			}
		}
		
		
	}
}


