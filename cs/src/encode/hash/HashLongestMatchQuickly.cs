// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode.hash {
	public class HashLongestMatchQuickly : global::haxe.lang.HxObject {
		
		public HashLongestMatchQuickly(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public HashLongestMatchQuickly(int kBucketBits, int kBucketSweep, bool kUseDictionary) {
			global::encode.hash.HashLongestMatchQuickly.__hx_ctor_encode_hash_HashLongestMatchQuickly(this, kBucketBits, kBucketSweep, kUseDictionary);
		}
		
		
		public static void __hx_ctor_encode_hash_HashLongestMatchQuickly(global::encode.hash.HashLongestMatchQuickly __hx_this, int kBucketBits, int kBucketSweep, bool kUseDictionary) {
			unchecked {
				__hx_this.kBucketBits = kBucketBits;
				__hx_this.kBucketSweep = kBucketSweep;
				__hx_this.kUseDictionary = kUseDictionary;
				__hx_this.kBucketSize = ((uint) (( 1 << kBucketBits )) );
				__hx_this.buckets_ = ((uint[]) (new uint[((int) (((uint) (( __hx_this.kBucketSize + kBucketSweep )) )) )]) );
				__hx_this.Reset();
			}
		}
		
		
		public virtual void Reset() {
			global::DefaultFunctions.memset_UInt(this.buckets_, 0, ((uint) (0) ), ( ((uint[]) (this.buckets_) ) as global::System.Array ).Length);
			this.num_dict_lookups_ = 0;
			this.num_dict_matches_ = 0;
		}
		
		
		public virtual void Store(uint[] data, int data_off, int ix) {
			unchecked {
				((uint[]) (this.buckets_) )[((uint) (( global::encode.Hash.Hash_(this.kBucketBits, data, data_off) + ( (( ix >> 3 )) % this.kBucketSweep ) )) )] = ((uint) (ix) );
			}
		}
		
		
		public virtual bool FindLongestMatch(uint[] ring_buffer, int ring_buffer_mask, int[] distance_cache, int cur_ix, int max_length, int max_backward, global::Array<int> best_len_out, global::Array<int> best_len_code_out, global::Array<int> best_distance_out, global::Array<double> best_score_out) {
			unchecked {
				int best_len_in = best_len_out[0];
				int cur_ix_masked = ( cur_ix & ring_buffer_mask );
				int compare_char = ((int) (((uint) (((uint[]) (ring_buffer) )[( cur_ix_masked + best_len_in )]) )) );
				double best_score = best_score_out[0];
				int best_len = best_len_in;
				int backward = ((int) (((int[]) (distance_cache) )[0]) );
				uint prev_ix = ((uint) (( cur_ix - backward )) );
				bool match_found = false;
				if (((bool) (( prev_ix < cur_ix )) )) {
					prev_ix = ((uint) (( prev_ix & ring_buffer_mask )) );
					if (((bool) (( compare_char == ((uint) (((uint[]) (ring_buffer) )[((int) (((uint) (( prev_ix + best_len_in )) )) )]) ) )) )) {
						int len = global::encode.Find_match_length.FindMatchLengthWithLimit(ring_buffer, ((int) (prev_ix) ), ring_buffer, cur_ix_masked, max_length);
						if (( len >= 4 )) {
							best_score = global::encode.Hash.BackwardReferenceScoreUsingLastDistance(len, 0);
							best_len = len;
							best_len_out[0] = len;
							best_len_code_out[0] = len;
							best_distance_out[0] = backward;
							best_score_out[0] = best_score;
							compare_char = ((int) (((uint) (((uint[]) (ring_buffer) )[( cur_ix_masked + len )]) )) );
							if (( this.kBucketSweep == 1 )) {
								return true;
							}
							else {
								match_found = true;
							}
							
						}
						
					}
					
				}
				
				uint key = global::encode.Hash.Hash_(this.kBucketBits, ring_buffer, cur_ix_masked);
				if (( this.kBucketSweep == 1 )) {
					prev_ix = ((uint[]) (this.buckets_) )[((int) (key) )];
					backward = ((int) (((uint) (( cur_ix - prev_ix )) )) );
					prev_ix = ((uint) (( prev_ix & ring_buffer_mask )) );
					if (((bool) (( compare_char != ((uint) (((uint[]) (ring_buffer) )[((int) (((uint) (( prev_ix + best_len_in )) )) )]) ) )) )) {
						return false;
					}
					
					if (( ( backward == 0 ) || ( backward > max_backward ) )) {
						return false;
					}
					
					int len1 = global::encode.Find_match_length.FindMatchLengthWithLimit(ring_buffer, ((int) (prev_ix) ), ring_buffer, cur_ix_masked, max_length);
					if (( len1 >= 4 )) {
						best_len_out[0] = len1;
						best_len_code_out[0] = len1;
						best_distance_out[0] = backward;
						best_score_out[0] = global::encode.Hash.BackwardReferenceScore(len1, backward);
						return true;
					}
					
				}
				else {
					uint[] bucket = this.buckets_;
					int bucket_off = ((int) (((uint) (( key + 0 )) )) );
					{
						int _g1 = 0;
						int _g = this.kBucketSweep;
						while (( _g1 < _g )) {
							 ++ _g1;
							prev_ix = ((uint[]) (bucket) )[bucket_off++];
							int backward1 = ((int) (((uint) (( cur_ix - prev_ix )) )) );
							prev_ix = ((uint) (( prev_ix & ring_buffer_mask )) );
							if (((bool) (( compare_char != ((uint) (((uint[]) (ring_buffer) )[((int) (((uint) (( prev_ix + best_len )) )) )]) ) )) )) {
								continue;
							}
							
							if (( ( backward1 == 0 ) || ( backward1 > max_backward ) )) {
								continue;
							}
							
							int len2 = global::encode.Find_match_length.FindMatchLengthWithLimit(ring_buffer, ((int) (prev_ix) ), ring_buffer, cur_ix_masked, max_length);
							if (( len2 >= 4 )) {
								double score = global::encode.Hash.BackwardReferenceScore(len2, backward1);
								if (( best_score < score )) {
									best_score = score;
									best_len = len2;
									best_len_out[0] = len2;
									best_len_code_out[0] = len2;
									best_distance_out[0] = backward1;
									best_score_out[0] = score;
									compare_char = ((int) (((uint) (((uint[]) (ring_buffer) )[( cur_ix_masked + len2 )]) )) );
									match_found = true;
								}
								
							}
							
						}
						
					}
					
				}
				
				if (( ( this.kUseDictionary &&  ! (match_found)  ) && ( this.num_dict_matches_ >= ( this.num_dict_lookups_ >> 7 ) ) )) {
					 ++ this.num_dict_lookups_;
					uint v = global::encode.Dictionary_hash.kStaticDictionaryHash[((int) (((uint) (( global::encode.Hash.Hash_(14, ring_buffer, cur_ix_masked) << 1 )) )) )];
					if (((bool) (( v > 0 )) )) {
						int len3 = ((int) (((uint) (( v & 31 )) )) );
						int dist = ((int) (((uint) (((uint) (( ((uint) (v) ) >> 5 )) )) )) );
						if (( len3 <= max_length )) {
							if (( global::encode.Find_match_length.FindMatchLengthWithLimit(ring_buffer, cur_ix_masked, global::encode.Dictionary.kBrotliDictionary, ( global::encode.Dictionary.kBrotliDictionaryOffsetsByLength[len3] + ( len3 * dist ) ), len3) == len3 )) {
								int backward2 = ( ( max_backward + dist ) + 1 );
								double score1 = global::encode.Hash.BackwardReferenceScore(len3, backward2);
								if (( best_score < score1 )) {
									 ++ this.num_dict_matches_;
									best_len_out[0] = len3;
									best_len_code_out[0] = len3;
									best_distance_out[0] = backward2;
									best_score_out[0] = score1;
									return true;
								}
								
							}
							
						}
						
					}
					
				}
				
				return match_found;
			}
		}
		
		
		public int kBucketBits;
		
		public int kBucketSweep;
		
		public bool kUseDictionary;
		
		public uint kBucketSize;
		
		public uint[] buckets_;
		
		public int num_dict_lookups_;
		
		public int num_dict_matches_;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						this.num_dict_matches_ = ((int) (@value) );
						return @value;
					}
					
					
					case 1703400886:
					{
						this.num_dict_lookups_ = ((int) (@value) );
						return @value;
					}
					
					
					case 1009583766:
					{
						this.kBucketSize = ((uint) (@value) );
						return @value;
					}
					
					
					case 1953090167:
					{
						this.kBucketSweep = ((int) (@value) );
						return @value;
					}
					
					
					case 821059803:
					{
						this.kBucketBits = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						this.num_dict_matches_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1703400886:
					{
						this.num_dict_lookups_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1525593974:
					{
						this.buckets_ = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 1009583766:
					{
						this.kBucketSize = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 622111570:
					{
						this.kUseDictionary = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1953090167:
					{
						this.kBucketSweep = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 821059803:
					{
						this.kBucketBits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						return this.num_dict_matches_;
					}
					
					
					case 1703400886:
					{
						return this.num_dict_lookups_;
					}
					
					
					case 1525593974:
					{
						return this.buckets_;
					}
					
					
					case 1009583766:
					{
						return this.kBucketSize;
					}
					
					
					case 622111570:
					{
						return this.kUseDictionary;
					}
					
					
					case 1953090167:
					{
						return this.kBucketSweep;
					}
					
					
					case 821059803:
					{
						return this.kBucketBits;
					}
					
					
					case 322068116:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "FindLongestMatch", 322068116)) );
					}
					
					
					case 390300609:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Store", 390300609)) );
					}
					
					
					case 2046146991:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Reset", 2046146991)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						return ((double) (this.num_dict_matches_) );
					}
					
					
					case 1703400886:
					{
						return ((double) (this.num_dict_lookups_) );
					}
					
					
					case 1009583766:
					{
						return ((double) (this.kBucketSize) );
					}
					
					
					case 1953090167:
					{
						return ((double) (this.kBucketSweep) );
					}
					
					
					case 821059803:
					{
						return ((double) (this.kBucketBits) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 322068116:
					{
						return this.FindLongestMatch(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int[]) (dynargs[2]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[4])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[5])) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[6]) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[7]) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[8]) ))) ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (dynargs[9]) ))) ));
					}
					
					
					case 390300609:
					{
						this.Store(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 2046146991:
					{
						this.Reset();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("num_dict_matches_");
			baseArr.push("num_dict_lookups_");
			baseArr.push("buckets_");
			baseArr.push("kBucketSize");
			baseArr.push("kUseDictionary");
			baseArr.push("kBucketSweep");
			baseArr.push("kBucketBits");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


