// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode.hash {
	public class HashLongestMatch : global::haxe.lang.HxObject {
		
		public HashLongestMatch(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public HashLongestMatch(int kBucketBits, int kBlockBits, int kNumLastDistancesToCheck) {
			global::encode.hash.HashLongestMatch.__hx_ctor_encode_hash_HashLongestMatch(this, kBucketBits, kBlockBits, kNumLastDistancesToCheck);
		}
		
		
		public static void __hx_ctor_encode_hash_HashLongestMatch(global::encode.hash.HashLongestMatch __hx_this, int kBucketBits, int kBlockBits, int kNumLastDistancesToCheck) {
			unchecked {
				__hx_this.kBucketBits = kBucketBits;
				__hx_this.kBlockBits = kBlockBits;
				__hx_this.kNumLastDistancesToCheck = kNumLastDistancesToCheck;
				__hx_this.kBucketSize = ((uint) (( 1 << kBucketBits )) );
				__hx_this.kBlockSize = ((uint) (( 1 << kBlockBits )) );
				__hx_this.kBlockMask = ((uint) (( (( 1 << kBlockBits )) - 1 )) );
				__hx_this.num_ = ((uint[]) (new uint[((int) (__hx_this.kBucketSize) )]) );
				__hx_this.buckets_ = ((int[][]) (new int[((int) (__hx_this.kBucketSize) )][]) );
				{
					int _g1 = 0;
					int _g = ((int) (__hx_this.kBucketSize) );
					while (( _g1 < _g )) {
						((int[][]) (__hx_this.buckets_) )[_g1++] = ((int[]) (new int[((int) (__hx_this.kBlockSize) )]) );
					}
					
				}
				
				__hx_this.Reset();
			}
		}
		
		
		public virtual void Reset() {
			global::DefaultFunctions.memset_UInt(this.num_, 0, ((uint) (0) ), ( ((uint[]) (this.num_) ) as global::System.Array ).Length);
			this.num_dict_lookups_ = 0;
			this.num_dict_matches_ = 0;
		}
		
		
		public virtual void Store(uint[] data, int data_off, int ix) {
			unchecked {
				uint key = global::encode.Hash.Hash_(this.kBucketBits, data, data_off);
				int minor_ix = ((int) (((uint) (( ((uint[]) (this.num_) )[((int) (key) )] & this.kBlockMask )) )) );
				if (( ((int[][]) (this.buckets_) )[((int) (key) )] == null )) {
					((int[][]) (this.buckets_) )[((int) (key) )] = ((int[]) (new int[((int) (this.kBlockSize) )]) );
				}
				
				((int[]) (((int[][]) (this.buckets_) )[((int) (key) )]) )[minor_ix] = ix;
				((uint[]) (this.num_) )[((int) (key) )] = ((uint) (( ((uint[]) (this.num_) )[((int) (key) )] + 1 )) );
			}
		}
		
		
		public virtual bool FindLongestMatch(uint[] data, int ring_buffer_mask, int[] distance_cache, uint cur_ix, uint max_length, uint max_backward, global::Array<int> best_len_out, global::Array<int> best_len_code_out, global::Array<int> best_distance_out, global::Array<double> best_score_out) {
			unchecked {
				best_len_code_out[0] = 0;
				int cur_ix_masked = ((int) (((uint) (( cur_ix & ring_buffer_mask )) )) );
				bool match_found = false;
				double best_score = best_score_out[0];
				int best_len = best_len_out[0];
				best_len_out[0] = 0;
				{
					int _g1 = 0;
					int _g = this.kNumLastDistancesToCheck;
					while (( _g1 < _g )) {
						int i = _g1++;
						int backward = ( ((int) (((int[]) (distance_cache) )[global::encode.Hash.kDistanceCacheIndex[i]]) ) + global::encode.Hash.kDistanceCacheOffset[i] );
						uint prev_ix = ((uint) (( cur_ix - backward )) );
						if (((bool) (( prev_ix >= cur_ix )) )) {
							continue;
						}
						
						if (((bool) (( backward > max_backward )) )) {
							continue;
						}
						
						prev_ix = ((uint) (( prev_ix & ring_buffer_mask )) );
						if (( ( ( ( cur_ix_masked + best_len ) > ring_buffer_mask ) || ((bool) (( ((uint) (( prev_ix + best_len )) ) > ring_buffer_mask )) ) ) || ((bool) (( ((uint) (((uint[]) (data) )[( cur_ix_masked + best_len )]) ) != ((uint) (((uint[]) (data) )[((int) (((uint) (( prev_ix + best_len )) )) )]) ) )) ) )) {
							continue;
						}
						
						int len = global::encode.Find_match_length.FindMatchLengthWithLimit(data, ((int) (prev_ix) ), data, cur_ix_masked, ((int) (max_length) ));
						if (( ( len >= 3 ) || ( ( len == 2 ) && ( i < 2 ) ) )) {
							double score = global::encode.Hash.BackwardReferenceScoreUsingLastDistance(len, i);
							if (( best_score < score )) {
								best_score = score;
								best_len = len;
								best_len_out[0] = len;
								best_len_code_out[0] = len;
								best_distance_out[0] = backward;
								best_score_out[0] = score;
								match_found = true;
							}
							
						}
						
					}
					
				}
				
				uint key = global::encode.Hash.Hash_(this.kBucketBits, data, cur_ix_masked);
				int[] bucket = ((int[][]) (this.buckets_) )[((int) (key) )];
				int down = ( (((bool) (( ((uint[]) (this.num_) )[((int) (key) )] > this.kBlockSize )) )) ? (((int) (((uint) (( ((uint[]) (this.num_) )[((int) (key) )] - this.kBlockSize )) )) )) : (0) );
				int i1 = ((int) (((uint) (( ((uint[]) (this.num_) )[((int) (key) )] - 1 )) )) );
				while (( i1 >= down )) {
					int prev_ix1 = ((int[]) (bucket) )[((int) (((uint) (( this.kBlockMask & i1 )) )) )];
					if (( ( prev_ix1 != -1 ) && ( prev_ix1 >= 0 ) )) {
						int backward1 = ((int) (((uint) (( cur_ix - prev_ix1 )) )) );
						if (((bool) (( backward1 > max_backward )) )) {
							break;
						}
						
						prev_ix1 &= ring_buffer_mask;
						if (( ( ( ( cur_ix_masked + best_len ) > ring_buffer_mask ) || ( ( prev_ix1 + best_len ) > ring_buffer_mask ) ) || ((bool) (( ((uint) (((uint[]) (data) )[( cur_ix_masked + best_len )]) ) != ((uint) (((uint[]) (data) )[( prev_ix1 + best_len )]) ) )) ) )) {
							 -- i1;
							continue;
						}
						
						int len1 = global::encode.Find_match_length.FindMatchLengthWithLimit(data, prev_ix1, data, cur_ix_masked, ((int) (max_length) ));
						if (( len1 >= 4 )) {
							double score1 = global::encode.Hash.BackwardReferenceScore(len1, backward1);
							if (( best_score < score1 )) {
								best_score = score1;
								best_len = len1;
								best_len_out[0] = len1;
								best_len_code_out[0] = len1;
								best_distance_out[0] = backward1;
								best_score_out[0] = score1;
								match_found = true;
							}
							
						}
						
					}
					
					 -- i1;
				}
				
				if ((  ! (match_found)  && ( this.num_dict_matches_ >= ( this.num_dict_lookups_ >> 7 ) ) )) {
					uint key1 = ((uint) (( global::encode.Hash.Hash_(14, data, cur_ix_masked) << 1 )) );
					{
						int _g2 = 0;
						while (( _g2 < 2 )) {
							 ++ _g2;
							 ++ this.num_dict_lookups_;
							uint v = global::encode.Dictionary_hash.kStaticDictionaryHash[((int) (key1) )];
							if (((bool) (( v > 0 )) )) {
								int len2 = ((int) (((uint) (( v & 31 )) )) );
								int dist = ((int) (((uint) (((uint) (( ((uint) (v) ) >> 5 )) )) )) );
								if (((bool) (( len2 <= max_length )) )) {
									if (( global::encode.Find_match_length.FindMatchLengthWithLimit(data, cur_ix_masked, global::encode.Dictionary.kBrotliDictionary, ( global::encode.Dictionary.kBrotliDictionaryOffsetsByLength[len2] + ( len2 * dist ) ), len2) == len2 )) {
										int backward2 = ((int) (((uint) (( ((uint) (( max_backward + dist )) ) + 1 )) )) );
										double score2 = global::encode.Hash.BackwardReferenceScore(len2, backward2);
										if (( best_score < score2 )) {
											 ++ this.num_dict_matches_;
											best_len_out[0] = len2;
											best_len_code_out[0] = len2;
											best_distance_out[0] = backward2;
											best_score_out[0] = score2;
											match_found = true;
											break;
										}
										
									}
									
								}
								
							}
							
							 ++ key1;
						}
						
					}
					
				}
				
				return match_found;
			}
		}
		
		
		public virtual void FindAllMatches(uint[] data, int ring_buffer_mask, uint cur_ix, uint max_length, uint max_backward, int[] num_matches, int num_matches_off, global::Array<object> matches, int matches_off) {
			unchecked {
				global::Array<object> orig_matches = matches;
				int orig_matches_off = matches_off;
				int cur_ix_masked = ((int) (((uint) (( cur_ix & ring_buffer_mask )) )) );
				int best_len = 1;
				int stop = ((int) (((uint) (( cur_ix - 64 )) )) );
				if (( stop < 0 )) {
					stop = 0;
				}
				
				int i = ((int) (((uint) (( cur_ix - 1 )) )) );
				while (( ( i > stop ) && ( best_len <= 2 ) )) {
					int prev_ix = i;
					int backward = ((int) (((uint) (( cur_ix - prev_ix )) )) );
					if (((bool) (( backward > max_backward )) )) {
						break;
					}
					
					prev_ix &= ring_buffer_mask;
					if (( ((bool) (( ((uint) (((uint[]) (data) )[cur_ix_masked]) ) != ((uint) (((uint[]) (data) )[prev_ix]) ) )) ) || ((bool) (( ((uint) (((uint[]) (data) )[( cur_ix_masked + 1 )]) ) != ((uint) (((uint[]) (data) )[( prev_ix + 1 )]) ) )) ) )) {
						 -- i;
						continue;
					}
					
					int len = global::encode.Find_match_length.FindMatchLengthWithLimit(data, prev_ix, data, cur_ix_masked, ((int) (max_length) ));
					if (( len > best_len )) {
						best_len = len;
						if (( len > 325 )) {
							matches = orig_matches;
						}
						
						global::encode.hash.BackwardMatch match = new global::encode.hash.BackwardMatch();
						match.BackwardMatch2(backward, len);
						matches[matches_off++] = match;
					}
					
					 -- i;
				}
				
				uint key = global::encode.Hash.Hash_(this.kBucketBits, data, cur_ix_masked);
				int[] bucket = ((int[][]) (this.buckets_) )[((int) (key) )];
				int down = ( (((bool) (( ((uint[]) (this.num_) )[((int) (key) )] > this.kBlockSize )) )) ? (((int) (((uint) (( ((uint[]) (this.num_) )[((int) (key) )] - this.kBlockSize )) )) )) : (0) );
				int i1 = ((int) (((uint) (( ((uint[]) (this.num_) )[((int) (key) )] - 1 )) )) );
				while (( i1 >= down )) {
					int prev_ix1 = ((int[]) (bucket) )[((int) (((uint) (( this.kBlockMask & i1 )) )) )];
					if (( prev_ix1 >= 0 )) {
						uint backward1 = ((uint) (( cur_ix - prev_ix1 )) );
						if (((bool) (( backward1 > max_backward )) )) {
							break;
						}
						
						prev_ix1 &= ring_buffer_mask;
						if (( ( ( ( cur_ix_masked + best_len ) > ring_buffer_mask ) || ( ( prev_ix1 + best_len ) > ring_buffer_mask ) ) || ((bool) (( ((uint) (((uint[]) (data) )[( cur_ix_masked + best_len )]) ) != ((uint) (((uint[]) (data) )[( prev_ix1 + best_len )]) ) )) ) )) {
							 -- i1;
							continue;
						}
						
						int len1 = global::encode.Find_match_length.FindMatchLengthWithLimit(data, prev_ix1, data, cur_ix_masked, ((int) (max_length) ));
						if (( len1 > best_len )) {
							best_len = len1;
							if (( len1 > 325 )) {
								matches_off = orig_matches_off;
							}
							
							global::encode.hash.BackwardMatch match1 = new global::encode.hash.BackwardMatch();
							match1.BackwardMatch2(((int) (backward1) ), len1);
							matches[matches_off++] = match1;
						}
						
					}
					
					 -- i1;
				}
				
				int[] dict_matches = global::FunctionMalloc.mallocInt(38);
				global::DefaultFunctions.memset_Int(dict_matches, 0, 268435455, ( ((int[]) (dict_matches) ) as global::System.Array ).Length);
				int minlen = ((int) (global::System.Math.Max(((double) (4) ), ((double) (( best_len + 1 )) ))) );
				if (global::encode.Static_dict.FindAllStaticDictionaryMatches(data, cur_ix_masked, minlen, dict_matches, 0)) {
					int maxlen = ((int) (global::System.Math.Min(((double) (37) ), ((double) (max_length) ))) );
					{
						int _g1 = minlen;
						while (( _g1 < maxlen )) {
							int l = _g1++;
							int dict_id = ((int) (((int[]) (dict_matches) )[l]) );
							if (( dict_id < 268435455 )) {
								global::encode.hash.BackwardMatch match2 = new global::encode.hash.BackwardMatch();
								match2.BackwardMatch3(((int) (((uint) (( ((uint) (( max_backward + (( dict_id >> 5 )) )) ) + 1 )) )) ), l, ( dict_id & 31 ));
								matches[matches_off++] = match2;
							}
							
						}
						
					}
					
				}
				
				((int[]) (num_matches) )[num_matches_off] = ( ((int) (((int[]) (num_matches) )[num_matches_off]) ) + (( matches_off - orig_matches_off )) );
			}
		}
		
		
		public int kBucketBits;
		
		public int kBlockBits;
		
		public int kNumLastDistancesToCheck;
		
		public uint kBucketSize;
		
		public uint kBlockSize;
		
		public uint kBlockMask;
		
		public uint[] num_;
		
		public int[][] buckets_;
		
		public int num_dict_lookups_;
		
		public int num_dict_matches_;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						this.num_dict_matches_ = ((int) (@value) );
						return @value;
					}
					
					
					case 1703400886:
					{
						this.num_dict_lookups_ = ((int) (@value) );
						return @value;
					}
					
					
					case 1322780398:
					{
						this.kBlockMask = ((uint) (@value) );
						return @value;
					}
					
					
					case 1389717187:
					{
						this.kBlockSize = ((uint) (@value) );
						return @value;
					}
					
					
					case 1009583766:
					{
						this.kBucketSize = ((uint) (@value) );
						return @value;
					}
					
					
					case 1464990208:
					{
						this.kNumLastDistancesToCheck = ((int) (@value) );
						return @value;
					}
					
					
					case 1201193224:
					{
						this.kBlockBits = ((int) (@value) );
						return @value;
					}
					
					
					case 821059803:
					{
						this.kBucketBits = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						this.num_dict_matches_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1703400886:
					{
						this.num_dict_lookups_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1525593974:
					{
						this.buckets_ = ((int[][]) (@value) );
						return @value;
					}
					
					
					case 1225695065:
					{
						this.num_ = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 1322780398:
					{
						this.kBlockMask = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1389717187:
					{
						this.kBlockSize = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1009583766:
					{
						this.kBucketSize = ((uint) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1464990208:
					{
						this.kNumLastDistancesToCheck = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1201193224:
					{
						this.kBlockBits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 821059803:
					{
						this.kBucketBits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						return this.num_dict_matches_;
					}
					
					
					case 1703400886:
					{
						return this.num_dict_lookups_;
					}
					
					
					case 1525593974:
					{
						return this.buckets_;
					}
					
					
					case 1225695065:
					{
						return this.num_;
					}
					
					
					case 1322780398:
					{
						return this.kBlockMask;
					}
					
					
					case 1389717187:
					{
						return this.kBlockSize;
					}
					
					
					case 1009583766:
					{
						return this.kBucketSize;
					}
					
					
					case 1464990208:
					{
						return this.kNumLastDistancesToCheck;
					}
					
					
					case 1201193224:
					{
						return this.kBlockBits;
					}
					
					
					case 821059803:
					{
						return this.kBucketBits;
					}
					
					
					case 928091019:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "FindAllMatches", 928091019)) );
					}
					
					
					case 322068116:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "FindLongestMatch", 322068116)) );
					}
					
					
					case 390300609:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Store", 390300609)) );
					}
					
					
					case 2046146991:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Reset", 2046146991)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 880923708:
					{
						return ((double) (this.num_dict_matches_) );
					}
					
					
					case 1703400886:
					{
						return ((double) (this.num_dict_lookups_) );
					}
					
					
					case 1322780398:
					{
						return ((double) (this.kBlockMask) );
					}
					
					
					case 1389717187:
					{
						return ((double) (this.kBlockSize) );
					}
					
					
					case 1009583766:
					{
						return ((double) (this.kBucketSize) );
					}
					
					
					case 1464990208:
					{
						return ((double) (this.kNumLastDistancesToCheck) );
					}
					
					
					case 1201193224:
					{
						return ((double) (this.kBlockBits) );
					}
					
					
					case 821059803:
					{
						return ((double) (this.kBucketBits) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 928091019:
					{
						this.FindAllMatches(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((uint) (global::haxe.lang.Runtime.toInt(dynargs[2])) ), ((uint) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), ((uint) (global::haxe.lang.Runtime.toInt(dynargs[4])) ), ((int[]) (dynargs[5]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[6])) ), ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (dynargs[7]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[8])) ));
						break;
					}
					
					
					case 322068116:
					{
						return this.FindLongestMatch(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int[]) (dynargs[2]) ), ((uint) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), ((uint) (global::haxe.lang.Runtime.toInt(dynargs[4])) ), ((uint) (global::haxe.lang.Runtime.toInt(dynargs[5])) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[6]) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[7]) ))) ), ((global::Array<int>) (global::Array<object>.__hx_cast<int>(((global::Array) (dynargs[8]) ))) ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (dynargs[9]) ))) ));
					}
					
					
					case 390300609:
					{
						this.Store(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 2046146991:
					{
						this.Reset();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("num_dict_matches_");
			baseArr.push("num_dict_lookups_");
			baseArr.push("buckets_");
			baseArr.push("num_");
			baseArr.push("kBlockMask");
			baseArr.push("kBlockSize");
			baseArr.push("kBucketSize");
			baseArr.push("kNumLastDistancesToCheck");
			baseArr.push("kBlockBits");
			baseArr.push("kBucketBits");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


