// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode.streams {
	public class BrotliIn : global::haxe.lang.HxObject {
		
		public BrotliIn(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public BrotliIn(global::sys.io.FileInput f, int max_read_size) {
			global::encode.streams.BrotliIn.__hx_ctor_encode_streams_BrotliIn(this, f, max_read_size);
		}
		
		
		public static void __hx_ctor_encode_streams_BrotliIn(global::encode.streams.BrotliIn __hx_this, global::sys.io.FileInput f, int max_read_size) {
			__hx_this.f_ = f;
			__hx_this.buffer_ = global::FunctionMalloc.mallocUInt(max_read_size);
			__hx_this.buffer_size_ = max_read_size;
		}
		
		
		public global::sys.io.FileInput f_;
		
		public uint[] buffer_;
		
		public int buffer_size_;
		
		public virtual uint[] Read(int n, global::Array<uint> bytes_read) {
			if (( this.buffer_ == null )) {
				bytes_read[0] = ((uint) (0) );
				return null;
			}
			
			if (( n > this.buffer_size_ )) {
				n = this.buffer_size_;
			}
			else if (( n == 0 )) {
				if (this.f_._eof) {
					return null;
				}
				else {
					return this.buffer_;
				}
				
			}
			
			if (this.f_._eof) {
				return null;
			}
			
			global::haxe.io.Bytes bytes = global::haxe.io.Bytes.alloc(n);
			try {
				int size = this.f_.readBytes(bytes, 0, n);
				{
					int _g1 = 0;
					while (( _g1 < size )) {
						int i = _g1++;
						((uint[]) (this.buffer_) )[i] = ((uint) (((int) (bytes.b[i]) )) );
					}
					
				}
				
				bytes_read[0] = ((uint) (size) );
			}
			catch (global::System.Exception __temp_catchallException1){
				global::haxe.lang.Exceptions.exception = __temp_catchallException1;
				object __temp_catchall2 = __temp_catchallException1;
				if (( __temp_catchall2 is global::haxe.lang.HaxeException )) {
					__temp_catchall2 = ((global::haxe.lang.HaxeException) (__temp_catchallException1) ).obj;
				}
				
				if (( __temp_catchall2 is global::haxe.io.Eof )) {
					global::haxe.io.Eof e = ((global::haxe.io.Eof) (__temp_catchall2) );
					{
					}
					
				}
				else {
					throw;
				}
				
			}
			
			
			if (((bool) (( bytes_read[0] == 0 )) )) {
				return null;
			}
			else {
				return this.buffer_;
			}
			
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1224789183:
					{
						this.buffer_size_ = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1224789183:
					{
						this.buffer_size_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 831562591:
					{
						this.buffer_ = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 22841:
					{
						this.f_ = ((global::sys.io.FileInput) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 914388854:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Read", 914388854)) );
					}
					
					
					case 1224789183:
					{
						return this.buffer_size_;
					}
					
					
					case 831562591:
					{
						return this.buffer_;
					}
					
					
					case 22841:
					{
						return this.f_;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1224789183:
					{
						return ((double) (this.buffer_size_) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 914388854:
					{
						return this.Read(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((global::Array<uint>) (global::Array<object>.__hx_cast<uint>(((global::Array) (dynargs[1]) ))) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("buffer_size_");
			baseArr.push("buffer_");
			baseArr.push("f_");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


