// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode.histogram {
	public class Histogram : global::haxe.lang.HxObject {
		
		public Histogram(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Histogram(int kDataSize) {
			global::encode.histogram.Histogram.__hx_ctor_encode_histogram_Histogram(this, kDataSize);
		}
		
		
		public static void __hx_ctor_encode_histogram_Histogram(global::encode.histogram.Histogram __hx_this, int kDataSize) {
			__hx_this.kDataSize = kDataSize;
			__hx_this.data_ = ((int[]) (new int[kDataSize]) );
			__hx_this.Clear();
		}
		
		
		public virtual void Clear() {
			global::DefaultFunctions.memset_Int(this.data_, 0, 0, ( ((int[]) (this.data_) ) as global::System.Array ).Length);
			this.total_count_ = 0;
		}
		
		
		public virtual void Add1(int val) {
			unchecked {
				((int[]) (this.data_) )[val] += 1;
				 ++ this.total_count_;
			}
		}
		
		
		public virtual void Remove(int val) {
			unchecked {
				((int[]) (this.data_) )[val] -= 1;
				 -- this.total_count_;
			}
		}
		
		
		public virtual void Add2(global::Array<uint> p, int p_off, int n) {
			unchecked {
				this.total_count_ += n;
				 ++ n;
				while ((  -- n > 0 )) {
					((int[]) (this.data_) )[((int) (p[p_off++]) )] += 1;
				}
				
			}
		}
		
		
		public virtual void AddHistogram(global::encode.histogram.Histogram v) {
			this.total_count_ += v.total_count_;
			{
				int _g1 = 0;
				int _g = this.kDataSize;
				while (( _g1 < _g )) {
					int i = _g1++;
					((int[]) (this.data_) )[i] += ((int[]) (v.data_) )[i];
				}
				
			}
			
		}
		
		
		public int kDataSize;
		
		public int[] data_;
		
		public int total_count_;
		
		public double bit_cost_;
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1411243328:
					{
						this.bit_cost_ = ((double) (@value) );
						return @value;
					}
					
					
					case 379416331:
					{
						this.total_count_ = ((int) (@value) );
						return @value;
					}
					
					
					case 274734998:
					{
						this.kDataSize = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1411243328:
					{
						this.bit_cost_ = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 379416331:
					{
						this.total_count_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1418202869:
					{
						this.data_ = ((int[]) (@value) );
						return @value;
					}
					
					
					case 274734998:
					{
						this.kDataSize = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1411243328:
					{
						return this.bit_cost_;
					}
					
					
					case 379416331:
					{
						return this.total_count_;
					}
					
					
					case 1418202869:
					{
						return this.data_;
					}
					
					
					case 274734998:
					{
						return this.kDataSize;
					}
					
					
					case 748309603:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "AddHistogram", 748309603)) );
					}
					
					
					case 725817105:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Add2", 725817105)) );
					}
					
					
					case 958206052:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Remove", 958206052)) );
					}
					
					
					case 725817104:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Add1", 725817104)) );
					}
					
					
					case 1535697261:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Clear", 1535697261)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1411243328:
					{
						return this.bit_cost_;
					}
					
					
					case 379416331:
					{
						return ((double) (this.total_count_) );
					}
					
					
					case 274734998:
					{
						return ((double) (this.kDataSize) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 748309603:
					{
						this.AddHistogram(((global::encode.histogram.Histogram) (dynargs[0]) ));
						break;
					}
					
					
					case 725817105:
					{
						this.Add2(((global::Array<uint>) (global::Array<object>.__hx_cast<uint>(((global::Array) (dynargs[0]) ))) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 958206052:
					{
						this.Remove(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 725817104:
					{
						this.Add1(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1535697261:
					{
						this.Clear();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("bit_cost_");
			baseArr.push("total_count_");
			baseArr.push("data_");
			baseArr.push("kDataSize");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


