// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	public class Histogram_functions : global::haxe.lang.HxObject {
		
		static Histogram_functions() {
			unchecked {
				global::encode.Histogram_functions.HistogramLiteralInt = 256;
				global::encode.Histogram_functions.HistogramCommandInt = 704;
				global::encode.Histogram_functions.HistogramDistanceInt = 520;
				global::encode.Histogram_functions.HistogramBlockLengthInt = 26;
				global::encode.Histogram_functions.HistogramContextMapInt = 272;
				global::encode.Histogram_functions.HistogramBlockTypeInt = 258;
				global::encode.Histogram_functions.kLiteralContextBits = 6;
				global::encode.Histogram_functions.kDistanceContextBits = 2;
			}
		}
		
		
		public Histogram_functions(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Histogram_functions() {
			global::encode.Histogram_functions.__hx_ctor_encode_Histogram_functions(this);
		}
		
		
		public static void __hx_ctor_encode_Histogram_functions(global::encode.Histogram_functions __hx_this) {
		}
		
		
		public static global::encode.histogram.Histogram HistogramLiteral() {
			unchecked {
				return new global::encode.histogram.Histogram(((int) (256) ));
			}
		}
		
		
		public static int HistogramLiteralInt;
		
		public static global::encode.histogram.Histogram HistogramCommand() {
			unchecked {
				return new global::encode.histogram.Histogram(((int) (704) ));
			}
		}
		
		
		public static int HistogramCommandInt;
		
		public static global::encode.histogram.Histogram HistogramDistance() {
			unchecked {
				return new global::encode.histogram.Histogram(((int) (520) ));
			}
		}
		
		
		public static int HistogramDistanceInt;
		
		public static global::encode.histogram.Histogram HistogramBlockLength() {
			unchecked {
				return new global::encode.histogram.Histogram(((int) (26) ));
			}
		}
		
		
		public static int HistogramBlockLengthInt;
		
		public static global::encode.histogram.Histogram HistogramContextMap() {
			unchecked {
				return new global::encode.histogram.Histogram(((int) (272) ));
			}
		}
		
		
		public static int HistogramContextMapInt;
		
		public static global::encode.histogram.Histogram HistogramBlockType() {
			unchecked {
				return new global::encode.histogram.Histogram(((int) (258) ));
			}
		}
		
		
		public static int HistogramBlockTypeInt;
		
		public static int kLiteralContextBits;
		
		public static int kDistanceContextBits;
		
		public static void BuildHistograms(global::Array<object> cmds, int num_commands, global::encode.metablock.BlockSplit literal_split, global::encode.metablock.BlockSplit insert_and_copy_split, global::encode.metablock.BlockSplit dist_split, uint[] ringbuffer, int start_pos, int mask, uint prev_byte, uint prev_byte2, global::Array<int> context_modes, global::Array<object> literal_histograms, global::Array<object> insert_and_copy_histograms, global::Array<object> copy_dist_histograms) {
			unchecked {
				int pos = start_pos;
				global::encode.block_splitter.BlockSplitIterator literal_it = new global::encode.block_splitter.BlockSplitIterator(((global::encode.metablock.BlockSplit) (literal_split) ));
				global::encode.block_splitter.BlockSplitIterator insert_and_copy_it = new global::encode.block_splitter.BlockSplitIterator(((global::encode.metablock.BlockSplit) (insert_and_copy_split) ));
				global::encode.block_splitter.BlockSplitIterator dist_it = new global::encode.block_splitter.BlockSplitIterator(((global::encode.metablock.BlockSplit) (dist_split) ));
				{
					int _g1 = 0;
					while (( _g1 < num_commands )) {
						global::encode.command.Command cmd = ((global::encode.command.Command) (cmds[_g1++]) );
						insert_and_copy_it.Next();
						((global::encode.histogram.Histogram) (insert_and_copy_histograms[insert_and_copy_it.type_]) ).Add1(((int) (cmd.cmd_prefix_[0]) ));
						{
							int _g3 = 0;
							int _g2 = cmd.insert_len_;
							while (( _g3 < _g2 )) {
								 ++ _g3;
								literal_it.Next();
								((global::encode.histogram.Histogram) (literal_histograms[((int) (((uint) (( global::encode.Context.ContextFunction(prev_byte, prev_byte2, context_modes[literal_it.type_]) + (( literal_it.type_ << 6 )) )) )) )]) ).Add1(((int) (((uint) (((uint[]) (ringbuffer) )[( pos & mask )]) )) ));
								prev_byte2 = prev_byte;
								prev_byte = ((uint) (((uint[]) (ringbuffer) )[( pos & mask )]) );
								 ++ pos;
							}
							
						}
						
						pos += cmd.copy_len_;
						if (( cmd.copy_len_ > 0 )) {
							prev_byte2 = ((uint) (((uint[]) (ringbuffer) )[( ( pos - 2 ) & mask )]) );
							prev_byte = ((uint) (((uint[]) (ringbuffer) )[( ( pos - 1 ) & mask )]) );
							if (((bool) (( cmd.cmd_prefix_[0] >= 128 )) )) {
								dist_it.Next();
								((global::encode.histogram.Histogram) (copy_dist_histograms[( (( dist_it.type_ << 2 )) + cmd.DistanceContext() )]) ).Add1(((int) (cmd.dist_prefix_[0]) ));
							}
							
						}
						
					}
					
				}
				
			}
		}
		
		
	}
}


