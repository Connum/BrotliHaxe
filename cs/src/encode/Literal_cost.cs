// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	public class Literal_cost : global::haxe.lang.HxObject {
		
		public Literal_cost(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Literal_cost() {
			global::encode.Literal_cost.__hx_ctor_encode_Literal_cost(this);
		}
		
		
		public static void __hx_ctor_encode_Literal_cost(global::encode.Literal_cost __hx_this) {
		}
		
		
		public static int UTF8Position(int last, int c, int clamp) {
			unchecked {
				if (( c < 128 )) {
					return 0;
				}
				else if (( c >= 192 )) {
					return ((int) (global::System.Math.Min(((double) (1) ), ((double) (clamp) ))) );
				}
				else if (( last < 224 )) {
					return 0;
				}
				else {
					return ((int) (global::System.Math.Min(((double) (2) ), ((double) (clamp) ))) );
				}
				
			}
		}
		
		
		public static int DecideMultiByteStatsLevel(int pos, int len, int mask, uint[] data) {
			unchecked {
				global::Array<int> counts = new global::Array<int>(new int[]{0, 0, 0});
				int max_utf8 = 1;
				int last_c = 0;
				int utf8_pos = 0;
				{
					int _g1 = 0;
					while (( _g1 < len )) {
						int c = ((int) (((uint) (((uint[]) (data) )[( ( pos + _g1++ ) & mask )]) )) );
						utf8_pos = global::encode.Literal_cost.UTF8Position(last_c, c, 2);
						 ++ counts[utf8_pos];
						last_c = c;
					}
					
				}
				
				if (( counts[2] < 500 )) {
					max_utf8 = 1;
				}
				
				if (( ( counts[1] + counts[2] ) < 25 )) {
					max_utf8 = 0;
				}
				
				return max_utf8;
			}
		}
		
		
		public static void EstimateBitCostsForLiteralsUTF8(int pos, int len, int mask, int cost_mask, uint[] data, double[] cost) {
			unchecked {
				int max_utf8 = global::encode.Literal_cost.DecideMultiByteStatsLevel(pos, len, mask, data);
				global::Array<object> histogram = new global::Array<object>(new object[]{global::FunctionMalloc.mallocInt(256), global::FunctionMalloc.mallocInt(256), global::FunctionMalloc.mallocInt(256)});
				int in_window = ((int) (global::System.Math.Min(((double) (495) ), ((double) (len) ))) );
				global::Array<int> in_window_utf8 = new global::Array<int>(new int[]{0, 0, 0});
				int last_c = 0;
				int utf8_pos = 0;
				{
					int _g1 = 0;
					while (( _g1 < in_window )) {
						int c = ((int) (((uint) (((uint[]) (data) )[( ( pos + _g1++ ) & mask )]) )) );
						((int[]) (histogram[utf8_pos]) )[c] = ( ((int) (((int[]) (histogram[utf8_pos]) )[c]) ) + 1 );
						 ++ in_window_utf8[utf8_pos];
						utf8_pos = global::encode.Literal_cost.UTF8Position(last_c, c, max_utf8);
						last_c = c;
					}
					
				}
				
				{
					int _g11 = 0;
					while (( _g11 < len )) {
						int i = _g11++;
						if (( ( i - 495 ) >= 0 )) {
							int utf8_pos2 = global::encode.Literal_cost.UTF8Position(( (( ( ( i - 495 ) - 2 ) < 0 )) ? (0) : (((int) (((uint) (((uint[]) (data) )[( ( ( ( pos + i ) - 495 ) - 2 ) & mask )]) )) )) ), ( (( ( ( i - 495 ) - 1 ) < 0 )) ? (0) : (((int) (((uint) (((uint[]) (data) )[( ( ( ( pos + i ) - 495 ) - 1 ) & mask )]) )) )) ), max_utf8);
							{
								uint _g2 = ((uint) (((uint[]) (data) )[( ( ( pos + i ) - 495 ) & mask )]) );
								((int[]) (histogram[utf8_pos2]) )[((int) (_g2) )] = ( ((int) (((int[]) (histogram[utf8_pos2]) )[((int) (_g2) )]) ) - 1 );
							}
							
							 -- in_window_utf8[utf8_pos2];
						}
						
						if (( ( i + 495 ) < len )) {
							int utf8_pos21 = global::encode.Literal_cost.UTF8Position(( (( ( ( i + 495 ) - 2 ) < 0 )) ? (0) : (((int) (((uint) (((uint[]) (data) )[( ( ( ( pos + i ) + 495 ) - 2 ) & mask )]) )) )) ), ( (( ( ( i + 495 ) - 1 ) < 0 )) ? (0) : (((int) (((uint) (((uint[]) (data) )[( ( ( ( pos + i ) + 495 ) - 1 ) & mask )]) )) )) ), max_utf8);
							{
								uint _g21 = ((uint) (((uint[]) (data) )[( ( ( pos + i ) + 495 ) & mask )]) );
								((int[]) (histogram[utf8_pos21]) )[((int) (_g21) )] = ( ((int) (((int[]) (histogram[utf8_pos21]) )[((int) (_g21) )]) ) + 1 );
							}
							
							 ++ in_window_utf8[utf8_pos21];
						}
						
						int utf8_pos1 = global::encode.Literal_cost.UTF8Position(( (( i < 2 )) ? (0) : (((int) (((uint) (((uint[]) (data) )[( ( ( pos + i ) - 2 ) & mask )]) )) )) ), ( (( i < 1 )) ? (0) : (((int) (((uint) (((uint[]) (data) )[( ( ( pos + i ) - 1 ) & mask )]) )) )) ), max_utf8);
						int histo = ((int) (((int[]) (histogram[utf8_pos1]) )[((int) (((uint) (((uint[]) (data) )[( ( pos + i ) & mask )]) )) )]) );
						if (( histo == 0 )) {
							histo = 1;
						}
						
						double lit_cost = ( global::encode.Fast_log.FastLog2(in_window_utf8[utf8_pos1]) - global::encode.Fast_log.FastLog2(histo) );
						lit_cost += 0.02905;
						if (( lit_cost < 1.0 )) {
							lit_cost *= 0.5;
							lit_cost += 0.5;
						}
						
						if (( i < 2000 )) {
							lit_cost += ( 0.7 - ( ( (( 2000 - i )) / 2000.0 ) * 0.35 ) );
						}
						
						((double[]) (cost) )[( ( pos + i ) & cost_mask )] = lit_cost;
					}
					
				}
				
			}
		}
		
		
		public static void EstimateBitCostsForLiterals(int pos, int len, int mask, int cost_mask, uint[] data, double[] cost) {
			unchecked {
				int[] histogram = global::FunctionMalloc.mallocInt(256);
				int in_window = ((int) (global::System.Math.Min(((double) (2000) ), ((double) (len) ))) );
				{
					int _g1 = 0;
					int _g = in_window;
					while (( _g1 < _g )) {
						uint _g2 = ((uint) (((uint[]) (data) )[( ( pos + _g1++ ) & mask )]) );
						((int[]) (histogram) )[((int) (_g2) )] = ( ((int) (((int[]) (histogram) )[((int) (_g2) )]) ) + 1 );
					}
					
				}
				
				{
					int _g11 = 0;
					while (( _g11 < len )) {
						int i = _g11++;
						if (( ( i - 2000 ) >= 0 )) {
							{
								uint _g21 = ((uint) (((uint[]) (data) )[( ( ( pos + i ) - 2000 ) & mask )]) );
								((int[]) (histogram) )[((int) (_g21) )] = ( ((int) (((int[]) (histogram) )[((int) (_g21) )]) ) - 1 );
							}
							
							 -- in_window;
						}
						
						if (( ( i + 2000 ) < len )) {
							{
								uint _g22 = ((uint) (((uint[]) (data) )[( ( ( pos + i ) + 2000 ) & mask )]) );
								((int[]) (histogram) )[((int) (_g22) )] = ( ((int) (((int[]) (histogram) )[((int) (_g22) )]) ) + 1 );
							}
							
							 ++ in_window;
						}
						
						int histo = ((int) (((int[]) (histogram) )[((int) (((uint) (((uint[]) (data) )[( ( pos + i ) & mask )]) )) )]) );
						if (( histo == 0 )) {
							histo = 1;
						}
						
						double lit_cost = ( global::encode.Fast_log.FastLog2(in_window) - global::encode.Fast_log.FastLog2(histo) );
						lit_cost += 0.029;
						if (( lit_cost < 1.0 )) {
							lit_cost *= 0.5;
							lit_cost += 0.5;
						}
						
						((double[]) (cost) )[( ( pos + i ) & cost_mask )] = lit_cost;
					}
					
				}
				
			}
		}
		
		
	}
}


