// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	public class BinaryHeap<T> : global::haxe.lang.HxObject, global::encode.BinaryHeap {
		
		public BinaryHeap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public BinaryHeap() {
			global::encode.BinaryHeap<object>.__hx_ctor_encode_BinaryHeap<T>(((global::encode.BinaryHeap<T>) (this) ));
		}
		
		
		public static void __hx_ctor_encode_BinaryHeap<T_c>(global::encode.BinaryHeap<T_c> __hx_this) {
			__hx_this.arr = new global::Array<object>(new object[]{});
			__hx_this.comp = ((global::haxe.lang.Function) (new global::haxe.lang.Closure(__hx_this, "HistogramPairComparator", 961126132)) );
		}
		
		
		public static object __hx_cast<T_c_c>(global::encode.BinaryHeap me) {
			return ( (( me != null )) ? (me.encode_BinaryHeap_cast<T_c_c>()) : default(object) );
		}
		
		
		public virtual object encode_BinaryHeap_cast<T_c>() {
			if (global::haxe.lang.Runtime.eq(typeof(T), typeof(T_c))) {
				return this;
			}
			
			global::encode.BinaryHeap<T_c> new_me = new global::encode.BinaryHeap<T_c>(global::haxe.lang.EmptyObject.EMPTY);
			global::Array<object> fields = global::Reflect.fields(this);
			int i = 0;
			while (( i < fields.length )) {
				string field = global::haxe.lang.Runtime.toString(fields[i++]);
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			return new_me;
		}
		
		
		public virtual int HistogramPairComparator(object p1, object p2) {
			unchecked {
				if (( ! (global::haxe.lang.Runtime.eq(global::haxe.lang.Runtime.getField(p1, "cost_diff", 1698677367, true), global::haxe.lang.Runtime.getField(p2, "cost_diff", 1698677367, true))) )) {
					if (( global::haxe.lang.Runtime.compare(global::haxe.lang.Runtime.getField(p1, "cost_diff", 1698677367, true), global::haxe.lang.Runtime.getField(p2, "cost_diff", 1698677367, true)) < 0 )) {
						return 1;
					}
					else {
						return 0;
					}
					
				}
				
				if (( global::System.Math.Abs(((double) (( ((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(p1, "idx1", 1169404244, true))) ) - ((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(p1, "idx2", 1169404245, true))) ) )) )) < global::System.Math.Abs(((double) (( ((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(p2, "idx1", 1169404244, true))) ) - ((double) (global::haxe.lang.Runtime.toDouble(global::haxe.lang.Runtime.getField(p2, "idx2", 1169404245, true))) ) )) )) )) {
					return 1;
				}
				else {
					return 0;
				}
				
			}
		}
		
		
		public object comp;
		
		public global::Array arr;
		
		public virtual void swap(int a, int b) {
			object temp = this.arr[a];
			this.arr[a] = this.arr[b];
			this.arr[b] = temp;
		}
		
		
		public virtual void bubbleDown(int pos) {
			unchecked {
				int left = ( ( 2 * pos ) + 1 );
				int right = ( left + 1 );
				int largest = pos;
				if (( ( global::haxe.lang.Runtime.compare(left, ((int) (global::haxe.lang.Runtime.getField_f(this.arr, "length", 520590566, true)) )) < 0 ) && ( global::haxe.lang.Runtime.compare(((object) (((global::haxe.lang.Function) (this.comp) ).__hx_invoke2_o(default(double), this.arr[left], default(double), this.arr[pos])) ), 0) > 0 ) )) {
					largest = left;
				}
				
				if (( ( global::haxe.lang.Runtime.compare(right, ((int) (global::haxe.lang.Runtime.getField_f(this.arr, "length", 520590566, true)) )) < 0 ) && ( global::haxe.lang.Runtime.compare(((object) (((global::haxe.lang.Function) (this.comp) ).__hx_invoke2_o(default(double), this.arr[right], default(double), this.arr[largest])) ), 0) > 0 ) )) {
					largest = right;
				}
				
				if (( largest != pos )) {
					this.swap(largest, pos);
					this.bubbleDown(largest);
				}
				
			}
		}
		
		
		public virtual void bubbleUp(int pos) {
			unchecked {
				if (( pos <= 0 )) {
					return;
				}
				
				int parent = ((int) (global::System.Math.Floor(((double) (( ((double) ((( pos - 1 ))) ) / 2 )) ))) );
				if (( global::haxe.lang.Runtime.compare(((object) (((global::haxe.lang.Function) (this.comp) ).__hx_invoke2_o(default(double), this.arr[pos], default(double), this.arr[parent])) ), 0) > 0 )) {
					this.swap(pos, parent);
					this.bubbleUp(parent);
				}
				
			}
		}
		
		
		public virtual object pop() {
			unchecked {
				if (( ((int) (global::haxe.lang.Runtime.getField_f(this.arr, "length", 520590566, true)) ) == 0 )) {
					return null;
				}
				
				object @value = this.arr[0];
				int last = ( ((int) (global::haxe.lang.Runtime.getField_f(this.arr, "length", 520590566, true)) ) - ((int) (1) ) );
				this.arr[0] = this.arr[last];
				global::haxe.lang.Runtime.callField(this.arr, "pop", 5594513, null);
				if (( last > 0 )) {
					this.bubbleDown(0);
				}
				
				return @value;
			}
		}
		
		
		public virtual void push(global::encode.cluster.HistogramPair @value) {
			unchecked {
				global::haxe.lang.Runtime.callField(this.arr, "push", 1247875546, new global::Array<object>(new object[]{@value}));
				this.bubbleUp(( ((int) (global::haxe.lang.Runtime.getField_f(this.arr, "length", 520590566, true)) ) - ((int) (1) ) ));
			}
		}
		
		
		public virtual int size() {
			return ((int) (global::haxe.lang.Runtime.getField_f(this.arr, "length", 520590566, true)) );
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103411471:
					{
						this.comp = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4849249:
					{
						this.arr = ((global::Array) (@value) );
						return @value;
					}
					
					
					case 1103411471:
					{
						this.comp = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1280549057:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "size", 1280549057)) );
					}
					
					
					case 1247875546:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "push", 1247875546)) );
					}
					
					
					case 5594513:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pop", 5594513)) );
					}
					
					
					case 1250764039:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "bubbleUp", 1250764039)) );
					}
					
					
					case 1487452686:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "bubbleDown", 1487452686)) );
					}
					
					
					case 1281239699:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "swap", 1281239699)) );
					}
					
					
					case 4849249:
					{
						return this.arr;
					}
					
					
					case 1103411471:
					{
						return this.comp;
					}
					
					
					case 961126132:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "HistogramPairComparator", 961126132)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1103411471:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.comp)) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1280549057:
					{
						return this.size();
					}
					
					
					case 1247875546:
					{
						this.push(((global::encode.cluster.HistogramPair) (dynargs[0]) ));
						break;
					}
					
					
					case 5594513:
					{
						return this.pop();
					}
					
					
					case 1250764039:
					{
						this.bubbleUp(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1487452686:
					{
						this.bubbleDown(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1281239699:
					{
						this.swap(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
						break;
					}
					
					
					case 961126132:
					{
						return this.HistogramPairComparator(dynargs[0], dynargs[1]);
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("arr");
			baseArr.push("comp");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	[global::haxe.lang.GenericInterface(typeof(global::encode.BinaryHeap<object>))]
	public interface BinaryHeap : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object encode_BinaryHeap_cast<T_c>();
		
		int HistogramPairComparator(object p1, object p2);
		
		void swap(int a, int b);
		
		void bubbleDown(int pos);
		
		void bubbleUp(int pos);
		
		object pop();
		
		void push(global::encode.cluster.HistogramPair @value);
		
		int size();
		
	}
}


