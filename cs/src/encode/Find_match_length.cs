// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	public class Find_match_length : global::haxe.lang.HxObject {
		
		public Find_match_length(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Find_match_length() {
			global::encode.Find_match_length.__hx_ctor_encode_Find_match_length(this);
		}
		
		
		public static void __hx_ctor_encode_Find_match_length(global::encode.Find_match_length __hx_this) {
		}
		
		
		public static int FindMatchLengthWithLimit(uint[] s1, int s1_off, uint[] s2, int s2_off, int limit) {
			unchecked {
				int matched = 0;
				int s2_limit_off = ( s2_off + limit );
				int s2_ptr_off = s2_off;
				while (true) {
					bool tmp = default(bool);
					if (( s2_ptr_off <= ( s2_limit_off - 4 ) )) {
						int p_off = ( s1_off + matched );
						tmp = ((bool) (( (((uint) (( ((uint) (( ((uint) (( ((uint) (( ((uint) (((uint[]) (s2) )[( s2_ptr_off + 3 )]) ) << 24 )) ) | ((uint) (( ((uint) (((uint[]) (s2) )[( s2_ptr_off + 2 )]) ) << 16 )) ) )) ) | ((uint) (( ((uint) (((uint[]) (s2) )[( s2_ptr_off + 1 )]) ) << 8 )) ) )) ) | ((uint) (((uint[]) (s2) )[s2_ptr_off]) ) )) )) == (((uint) (( ((uint) (( ((uint) (( ((uint) (( ((uint) (((uint[]) (s1) )[( p_off + 3 )]) ) << 24 )) ) | ((uint) (( ((uint) (((uint[]) (s1) )[( p_off + 2 )]) ) << 16 )) ) )) ) | ((uint) (( ((uint) (((uint[]) (s1) )[( p_off + 1 )]) ) << 8 )) ) )) ) | ((uint) (((uint[]) (s1) )[p_off]) ) )) )) )) );
					}
					else {
						tmp = false;
					}
					
					if ( ! (tmp) ) {
						break;
					}
					
					s2_ptr_off += 4;
					matched += 4;
				}
				
				while (( ( s2_ptr_off < s2_limit_off ) && ((bool) (( ((uint) (((uint[]) (s1) )[( s1_off + matched )]) ) == ((uint) (((uint[]) (s2) )[s2_ptr_off]) ) )) ) )) {
					 ++ s2_ptr_off;
					 ++ matched;
				}
				
				return matched;
			}
		}
		
		
	}
}


