// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace encode {
	public class RingBuffer : global::haxe.lang.HxObject {
		
		public RingBuffer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public RingBuffer(int window_bits, int tail_bits) {
			global::encode.RingBuffer.__hx_ctor_encode_RingBuffer(this, window_bits, tail_bits);
		}
		
		
		public static void __hx_ctor_encode_RingBuffer(global::encode.RingBuffer __hx_this, int window_bits, int tail_bits) {
			unchecked {
				__hx_this.window_bits_ = window_bits;
				__hx_this.mask_ = ( (( 1 << window_bits )) - 1 );
				__hx_this.tail_size_ = ( 1 << tail_bits );
				__hx_this.pos_ = 0;
				int buflen = ( (( 1 << __hx_this.window_bits_ )) + __hx_this.tail_size_ );
				__hx_this.buffer_ = ((uint[]) (new uint[( buflen + 3 )]) );
				{
					int _g1 = 0;
					while (( _g1 < 3 )) {
						((uint[]) (__hx_this.buffer_) )[( buflen + _g1++ )] = ((uint) (0) );
					}
					
				}
				
			}
		}
		
		
		public virtual void WriteTail(uint[] bytes, int n) {
			unchecked {
				int masked_pos = ( this.pos_ & this.mask_ );
				if (( masked_pos < this.tail_size_ )) {
					global::DefaultFunctions.memcpy_UInt(this.buffer_, ( (( 1 << this.window_bits_ )) + masked_pos ), bytes, 0, ((int) (global::System.Math.Min(((double) (n) ), ((double) (( this.tail_size_ - masked_pos )) ))) ));
				}
				
			}
		}
		
		
		public int window_bits_;
		
		public int mask_;
		
		public int tail_size_;
		
		public int pos_;
		
		public uint[] buffer_;
		
		public int buffer_off;
		
		public virtual void Write(uint[] bytes, int n) {
			unchecked {
				int masked_pos = ( this.pos_ & this.mask_ );
				this.WriteTail(bytes, n);
				if (( ( masked_pos + n ) <= ( 1 << this.window_bits_ ) )) {
					global::DefaultFunctions.memcpy_UInt(this.buffer_, masked_pos, bytes, 0, n);
				}
				else {
					global::DefaultFunctions.memcpy_UInt(this.buffer_, masked_pos, bytes, 0, ((int) (global::System.Math.Min(((double) (n) ), ((double) (( ( (( 1 << this.window_bits_ )) + this.tail_size_ ) - masked_pos )) ))) ));
					global::DefaultFunctions.memcpy_UInt(this.buffer_, 0, bytes, ( (( 1 << this.window_bits_ )) - masked_pos ), ( n - (( (( 1 << this.window_bits_ )) - masked_pos )) ));
				}
				
				this.pos_ += n;
			}
		}
		
		
		public virtual int position() {
			return this.pos_;
		}
		
		
		public virtual int mask() {
			return this.mask_;
		}
		
		
		public virtual uint[] start() {
			return this.buffer_;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 626464112:
					{
						this.buffer_off = ((int) (@value) );
						return @value;
					}
					
					
					case 1247577163:
					{
						this.pos_ = ((int) (@value) );
						return @value;
					}
					
					
					case 146166351:
					{
						this.tail_size_ = ((int) (@value) );
						return @value;
					}
					
					
					case 52596211:
					{
						this.mask_ = ((int) (@value) );
						return @value;
					}
					
					
					case 1103632842:
					{
						this.window_bits_ = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 626464112:
					{
						this.buffer_off = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 831562591:
					{
						this.buffer_ = ((uint[]) (@value) );
						return @value;
					}
					
					
					case 1247577163:
					{
						this.pos_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 146166351:
					{
						this.tail_size_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 52596211:
					{
						this.mask_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1103632842:
					{
						this.window_bits_ = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 67859554:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "start", 67859554)) );
					}
					
					
					case 1213612268:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mask", 1213612268)) );
					}
					
					
					case 1257939113:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "position", 1257939113)) );
					}
					
					
					case 1669782719:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "Write", 1669782719)) );
					}
					
					
					case 626464112:
					{
						return this.buffer_off;
					}
					
					
					case 831562591:
					{
						return this.buffer_;
					}
					
					
					case 1247577163:
					{
						return this.pos_;
					}
					
					
					case 146166351:
					{
						return this.tail_size_;
					}
					
					
					case 52596211:
					{
						return this.mask_;
					}
					
					
					case 1103632842:
					{
						return this.window_bits_;
					}
					
					
					case 2004716271:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "WriteTail", 2004716271)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 626464112:
					{
						return ((double) (this.buffer_off) );
					}
					
					
					case 1247577163:
					{
						return ((double) (this.pos_) );
					}
					
					
					case 146166351:
					{
						return ((double) (this.tail_size_) );
					}
					
					
					case 52596211:
					{
						return ((double) (this.mask_) );
					}
					
					
					case 1103632842:
					{
						return ((double) (this.window_bits_) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 67859554:
					{
						return this.start();
					}
					
					
					case 1213612268:
					{
						return this.mask();
					}
					
					
					case 1257939113:
					{
						return this.position();
					}
					
					
					case 1669782719:
					{
						this.Write(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
						break;
					}
					
					
					case 2004716271:
					{
						this.WriteTail(((uint[]) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("buffer_off");
			baseArr.push("buffer_");
			baseArr.push("pos_");
			baseArr.push("tail_size_");
			baseArr.push("mask_");
			baseArr.push("window_bits_");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


