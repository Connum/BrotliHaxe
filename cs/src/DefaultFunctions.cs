// Generated by Haxe 3.4.0

#pragma warning disable 109, 114, 219, 429, 168, 162
public class DefaultFunctions : global::haxe.lang.HxObject {
	
	public DefaultFunctions(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public DefaultFunctions() {
		global::DefaultFunctions.__hx_ctor__DefaultFunctions(this);
	}
	
	
	public static void __hx_ctor__DefaultFunctions(global::DefaultFunctions __hx_this) {
	}
	
	
	[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
	public static void memcpy_Int(int[] dst, int dst_offset, int[] src, int src_offset, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			int i = _g1++;
			((int[]) (dst) )[( dst_offset + i )] = ((int) (((int[]) (src) )[( src_offset + i )]) );
		}
		
	}
	
	
	[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
	public static void memset_Int(int[] b, int offset, int v, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			((int[]) (b) )[( offset + _g1++ )] = v;
		}
		
	}
	
	
	[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
	public static void memcpy_UInt(uint[] dst, int dst_offset, uint[] src, int src_offset, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			int i = _g1++;
			((uint[]) (dst) )[( dst_offset + i )] = ((uint) (((uint[]) (src) )[( src_offset + i )]) );
		}
		
	}
	
	
	[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
	public static void memset_UInt(uint[] b, int offset, uint v, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			((uint[]) (b) )[( offset + _g1++ )] = v;
		}
		
	}
	
	
	public static void memcpyArray(global::Array<uint> dst, int dst_offset, global::Array<uint> src, int src_offset, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			int i = _g1++;
			dst[( dst_offset + i )] = src[( src_offset + i )];
		}
		
	}
	
	
	public static void memcpyVectorArray(uint[] dst, int dst_offset, global::Array<uint> src, int src_offset, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			int i = _g1++;
			((uint[]) (dst) )[( dst_offset + i )] = src[( src_offset + i )];
		}
		
	}
	
	
	public static void memcpyArrayVector(global::Array<uint> dst, int dst_offset, uint[] src, int src_offset, int count) {
		int _g1 = 0;
		while (( _g1 < count )) {
			int i = _g1++;
			dst[( dst_offset + i )] = ((uint) (((uint[]) (src) )[( src_offset + i )]) );
		}
		
	}
	
	
}


